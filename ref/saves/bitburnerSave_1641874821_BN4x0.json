{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":494,\"hp\":18,\"max_hp\":18,\"strength\":80,\"defense\":80,\"dexterity\":273,\"agility\":151,\"charisma\":167,\"intelligence\":0,\"hacking_chance_mult\":1.5146069372828472,\"hacking_speed_mult\":1.5166328458482254,\"hacking_money_mult\":1.97482763931437,\"hacking_grow_mult\":1.3737931403926051,\"hacking_exp\":3253093.6001936235,\"strength_exp\":2721.6963934615924,\"defense_exp\":2721.6963934615924,\"dexterity_exp\":45941.984176440164,\"agility_exp\":13357.328127753088,\"charisma_exp\":8701.858391791851,\"intelligence_exp\":0,\"hacking_mult\":1.766486070952985,\"strength_mult\":1.3737931403926051,\"defense_mult\":1.3737931403926051,\"dexterity_mult\":1.904077292584151,\"agility_mult\":1.4424827974122354,\"charisma_mult\":1.813406945318239,\"hacking_exp_mult\":1.8247407387264787,\"strength_exp_mult\":1.7378483225966466,\"defense_exp_mult\":1.7378483225966466,\"dexterity_exp_mult\":1.7378483225966466,\"agility_exp_mult\":1.7378483225966466,\"charisma_exp_mult\":1.7378483225966466,\"company_rep_mult\":1.6622896998750523,\"faction_rep_mult\":1.5111724544318657,\"money\":80636794.40466203,\"city\":\"Sector-12\",\"location\":\"The Slums\",\"jobs\":{\"Joe's Guns\":\"Employee\"},\"companyName\":\"Joe's Guns\",\"currentServer\":\"home\",\"purchasedServers\":[],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":0.10303448552944539,\"onlineTimeSeconds\":167233.6000017339,\"ram\":1,\"totalMoneyGenerated\":17230.82793916395,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":0.10303448552944539,\"onlineTimeSeconds\":167233.20000173387,\"ram\":1,\"totalMoneyGenerated\":17230.78672536974,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":0.10303448552944539,\"onlineTimeSeconds\":167232.80000173385,\"ram\":1,\"totalMoneyGenerated\":17230.74551157553,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":0.10303448552944539,\"onlineTimeSeconds\":167232.2000017338,\"ram\":1,\"totalMoneyGenerated\":17230.683690884212,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":0.10303448552944539,\"onlineTimeSeconds\":167231.8000017338,\"ram\":1,\"totalMoneyGenerated\":17230.64247709,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":0.10303448552944539,\"onlineTimeSeconds\":167231.60000173378,\"ram\":1,\"totalMoneyGenerated\":17230.621870192896,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":0.10303448552944539,\"onlineTimeSeconds\":167231.40000173377,\"ram\":1,\"totalMoneyGenerated\":17230.60126329579,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":0.10303448552944539,\"onlineTimeSeconds\":167231.20000173376,\"ram\":1,\"totalMoneyGenerated\":17230.580656398684,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":0.10303448552944539,\"onlineTimeSeconds\":167231.00000173374,\"ram\":1,\"totalMoneyGenerated\":17230.56004950158,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":0.10303448552944539,\"onlineTimeSeconds\":167230.60000173372,\"ram\":1,\"totalMoneyGenerated\":17230.518835707368,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":0.10303448552944539,\"onlineTimeSeconds\":167230.2000017337,\"ram\":1,\"totalMoneyGenerated\":17230.477621913156,\"name\":\"hacknet-node-10\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Slum Snakes\",\"NiteSec\"],\"factionInvitations\":[\"Sector-12\"],\"queuedAugmentations\":[{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":18,\"name\":\"NeuroFlux Governor\"},{\"level\":19,\"name\":\"NeuroFlux Governor\"},{\"level\":20,\"name\":\"NeuroFlux Governor\"}],\"augmentations\":[{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":17,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"}],\"sourceFiles\":[{\"lvl\":1,\"n\":1}],\"numPeopleKilled\":0,\"karma\":-165.1999999999993,\"crime_money_mult\":1.3737931403926051,\"crime_success_mult\":1.3737931403926051,\"isWorking\":false,\"focus\":true,\"workType\":\"\",\"workCostMult\":3,\"workExpMult\":2,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":50,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":300000,\"work_money_mult\":1.3737931403926051,\"hacknet_node_money_mult\":1.3737931403926051,\"hacknet_node_purchase_cost_mult\":0.7080722824424983,\"hacknet_node_ram_cost_mult\":0.7080722824424983,\"hacknet_node_core_cost_mult\":0.7080722824424983,\"hacknet_node_level_cost_mult\":0.7080722824424983,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":4,\"lastUpdate\":1641874820857,\"totalPlaytime\":1561469200,\"playtimeSinceLastAug\":167707400,\"playtimeSinceLastBitnode\":816577600,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":173262790.86631507,\"gang\":0,\"hacking\":2197596625.8168,\"hacknet\":189537.0466354197,\"hacknet_expenses\":-722848.8243145652,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":79636794.4045886,\"work\":476805.13282108173,\"servers\":0,\"other\":-313700000,\"augmentations\":-1977466115.637268}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-60288,\"codingcontract\":0,\"corporation\":0,\"crime\":764812780.67167,\"gang\":0,\"hacking\":6068327037.596418,\"hacknet\":662680.0774000284,\"hacknet_expenses\":-1213442.6697401851,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":322101441.4252285,\"work\":1502205.785624186,\"servers\":-143068647.72364506,\"other\":-1345500000,\"augmentations\":-5023360884.321251}},\"scriptProdSinceLastAug\":2150343665,\"exploits\":[],\"achievements\":[{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1641707196997},{\"ID\":\"SF1.1\",\"unlockedOn\":1641707197009},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1641707197011},{\"ID\":\"NS2\",\"unlockedOn\":1641707197014},{\"ID\":\"FROZE\",\"unlockedOn\":1641707479541},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1641707599535},{\"ID\":\"TOR\",\"unlockedOn\":1641747005358},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1641749405355},{\"ID\":\"NITESEC\",\"unlockedOn\":1641751085357},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1641751565355},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1641759485364},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1641832384666}],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":true,\"ip\":\"57.1.5.1\",\"isConnectedTo\":true,\"maxRam\":256,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"BruteSSH.exe\",\"DeepscanV1.exe\",\"fl1ght.exe\",\"ServerProfiler.exe\",\"AutoLink.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"DeepscanV2.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\"],\"ramUsed\":186.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/scripts/daemon-main.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":66299.34,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":61587.809999664765,\"pid\":1,\"ramUsage\":7.6,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/lib/const.js\",\"url\":\"blob:file:///e77cbb16-4d36-44a0-afb0-9a8b5b5cee83\"},{\"filename\":\"/lib/lib-BN1.js\",\"url\":\"blob:file:///7fc5b397-2397-45b8-b651-6b296ea1ed28\"},{\"filename\":\"/lib/const.js\",\"url\":\"blob:file:///e77cbb16-4d36-44a0-afb0-9a8b5b5cee83\"},{\"filename\":\"/scripts/daemon-main.js\",\"url\":\"blob:file:///0b2a6665-bdb2-44e5-b193-8a75dad44791\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/bin/darkweb-programs.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":66299.347,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":61587.809999664765,\"pid\":2,\"ramUsage\":6.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/lib/const.js\",\"url\":\"blob:file:///5fd170ba-1a4c-4b9a-978b-70dc72f6047c\"},{\"filename\":\"/lib/const.js\",\"url\":\"blob:file:///5fd170ba-1a4c-4b9a-978b-70dc72f6047c\"},{\"filename\":\"/lib/lib-BN1.js\",\"url\":\"blob:file:///dcb83553-53b1-4aba-b6bc-ae0345636f9a\"},{\"filename\":\"/lib/const.js\",\"url\":\"blob:file:///5fd170ba-1a4c-4b9a-978b-70dc72f6047c\"},{\"filename\":\"/lib/lib-BN4.js\",\"url\":\"blob:file:///e0e2b49e-2256-4f0c-93b0-567b62c0ddd5\"},{\"filename\":\"/bin/darkweb-programs.js\",\"url\":\"blob:file:///f721c746-ba56-4edc-b4bf-77bb6c97ee9d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/scripts/daemon-port1.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":66299.351,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":61587.809999664765,\"pid\":3,\"ramUsage\":6.5,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/lib/const.js\",\"url\":\"blob:file:///5fd170ba-1a4c-4b9a-978b-70dc72f6047c\"},{\"filename\":\"/lib/lib-BN1.js\",\"url\":\"blob:file:///dcb83553-53b1-4aba-b6bc-ae0345636f9a\"},{\"filename\":\"/scripts/daemon-port1.js\",\"url\":\"blob:file:///454d26d4-7be4-4a60-b660-b362605bc7ca\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[347778560,18368,38592,57280]},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":454296.4559145348,\"offlineMoneyMade\":0,\"offlineRunningTime\":66299.35299999999,\"onlineExpGained\":762463.1459763228,\"onlineMoneyMade\":347778560,\"onlineRunningTime\":60910.60999967462,\"pid\":4,\"ramUsage\":2.55,\"server\":\"home\",\"threads\":64,\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///591cad81-1727-4ceb-aa11-b1113ed7b624\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/scripts/daemon-crime.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":66299.35399999999,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60874.00999967515,\"pid\":5,\"ramUsage\":3.1,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/daemon-crime.js\",\"url\":\"blob:file:///09ac4cc6-829f-4ab6-836e-59b2b04184bc\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hashes = {};\\r\\n    const files = ns.ls('home', '.js');\\r\\n    for (const file of files) {\\r\\n        const contents = ns.read(file);\\r\\n        hashes[file] = getHash(contents);\\r\\n    }\\r\\n    while (true) {\\r\\n        const files = ns.ls('home', '.js');\\r\\n        for (const file of files) {\\r\\n            const contents = ns.read(file);\\r\\n            const hash = getHash(contents);\\r\\n            if (hash != hashes[file]) {\\r\\n                ns.tprint(`INFO: Detected change in ${file}`);\\r\\n                const processes = ns.ps().filter((p) => {\\r\\n                    return p.filename == file;\\r\\n                });\\r\\n                for (const process of processes) {\\r\\n                    ns.tprint(`INFO: Restarting ${process.filename} ${process.args} -t ${process.threads}`);\\r\\n                    if (process.filename != ns.getScriptName()) {\\r\\n                        ns.kill(process.pid, ns.getHostname());\\r\\n                        ns.run(process.filename, process.threads, ...process.args);\\r\\n                    }\\r\\n                    else {\\r\\n                        ns.spawn(process.filename, process.threads, ...process.args);\\r\\n                    }\\r\\n                }\\r\\n                hashes[file] = hash;\\r\\n            }\\r\\n        }\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n}\\r\\nconst getHash = (input) => {\\r\\n    let hash = 0, i, chr;\\r\\n    if (input.length === 0)\\r\\n        return hash;\\r\\n    for (i = 0; i < input.length; i++) {\\r\\n        chr = input.charCodeAt(i);\\r\\n        hash = ((hash << 5) - hash) + chr;\\r\\n        hash |= 0; // Convert to 32bit integer\\r\\n    }\\r\\n    return hash;\\r\\n};\",\"filename\":\"watcher.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"watcher.js\",\"url\":\"blob:file:///5f231ac9-9361-4968-ac70-076d643a8a2a\"}],\"ramUsage\":5.55,\"server\":\"home\",\"_hash\":\"a8593bbd317187fe7996762fd39b7ddf48a9c7b0d49bdafea9426846c88a3f80\",\"moduleSequenceNumber\":55}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../NetscriptDefinitions'\\r\\nimport { bestHackTarget } from \\\"/lib/lib-BN1.js\\\"\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.tprint(\\\"TESTING\\\")\\r\\n\\r\\n    ns.tprint(bestHackTarget(ns))\\r\\n    \\r\\n}\",\"filename\":\"_testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/lib-BN1.js\",\"url\":\"blob:file:///3a8c7934-2a9a-4a14-81d2-73d4fa5f7bee\"},{\"filename\":\"_testing.js\",\"url\":\"blob:file:///877595b9-41fc-474a-a31a-baba3c4de2ec\"}],\"ramUsage\":4.4,\"server\":\"home\",\"_hash\":\"27295b9c60afa02649c8faeedfb84635f4a00a65a8a079d47b6434c10818096c\",\"moduleSequenceNumber\":56,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\nimport { getRoot, threadCount, checkCanSelfHack } from '/lib/lib-BN1.js'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n    ns.tail()\\r\\n    ns.print(\\\"\\\\n ----------- \\\\nDAEMON: PORT(1) RUNNING\\\")\\r\\n\\r\\n    while (true) {\\r\\n        // ns.print(ns.peek(1))\\r\\n\\r\\n        if (ns.peek(1) !== \\\"NULL PORT DATA\\\") {\\r\\n            let host = ns.readPort(1)\\r\\n            if (getRoot(ns, host)) {\\r\\n                if (checkCanSelfHack(ns, host)) {\\r\\n                    await ns.scp(\\\"/bin/hack-self.js\\\", \\\"home\\\", host)\\r\\n                    let threads = threadCount(ns, \\\"/bin/hack-self.js\\\", host)\\r\\n                    if (threads > 0) {\\r\\n                        ns.exec(\\\"/bin/hack-self.js\\\", host, threads, host)\\r\\n                        ns.print(\\\"HACK-SELF: \\\" + host)\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n            else {await ns.tryWritePort(1, host)}\\r\\n            ns.print(\\\"FAILED ROOT: \\\" + host)\\r\\n        }\\r\\n        await ns.sleep(30e3)\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/daemon-port1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/lib-BN1.js\",\"url\":\"blob:file:///1c7cedc0-5301-4f1f-919a-edd0d9e32084\"},{\"filename\":\"/scripts/daemon-port1.js\",\"url\":\"blob:file:///13f1b471-5786-45a1-879f-6304d1e77ce8\"}],\"ramUsage\":6.5,\"server\":\"home\",\"_hash\":\"fd61da82af0f0fd367b5670786beeaac12fa400262dd25d27561c6c4d0d037fc\",\"moduleSequenceNumber\":111,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\nimport { bestHackTarget } from '/lib/lib-BN1.js'\\r\\nimport { programs, factionInfo, hackEXE } from '/lib/const.js'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    ns.tail()\\r\\n    ns.print(\\\"RUNNING DAEMON ENGINE\\\")\\r\\n\\r\\n    let c = 0\\r\\n\\r\\n    while (true) {\\r\\n        ns.print(\\\"DAEMON CYCLE: \\\" + ++c)\\r\\n\\r\\n        // check to see the best hack target\\r\\n        ns.clearPort(2)\\r\\n        let bestTarget = bestHackTarget(ns)\\r\\n        await ns.writePort(2, bestTarget)\\r\\n        ns.print(\\\"BEST TARGET: \\\" + bestTarget)\\r\\n\\r\\n        // initialize Stage 1\\r\\n        if (!ns.scriptRunning(\\\"/bin/hack-self.js\\\", \\\"n00dles\\\") && ns.getServerMoneyAvailable(\\\"home\\\") < 1e6 ) {\\r\\n            ns.run(\\\"/scripts/setup-stage1.js\\\")\\r\\n            ns.print(\\\"INITIALIZED: STAGE 1\\\")\\r\\n        }\\r\\n\\r\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") > 200e3 && ns.scan(\\\"home\\\").includes(\\\"darkweb\\\") == false)  {\\r\\n            ns.run(\\\"/bin/darkweb-programs.js\\\")\\r\\n        }\\r\\n\\r\\n        // initialize Stage 2\\r\\n        if (!ns.scriptRunning(\\\"/bin/hack-self.js\\\", \\\"iron-gym\\\")) {\\r\\n            ns.run(\\\"/scripts/setup-stage2.js\\\") \\r\\n            ns.print(\\\"INITIALIZED: STAGE 2\\\")\\r\\n        }\\r\\n        if (!ns.scriptRunning(\\\"/scripts/daemon-port1.js\\\", \\\"home\\\")) { \\r\\n            ns.run(\\\"/scripts/daemon-port1.js\\\")\\r\\n            ns.print(\\\"INITIALIZED: PORT 1 DAEMON\\\")\\r\\n        }\\r\\n\\r\\n        // commit crimes if below a certian ammount of money\\r\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") < 5e6 && ns.isBusy() == false) { \\r\\n            ns.run(\\\"/bin/crime-commit.js\\\")\\r\\n            ns.print(\\\"INITIALIZED: COMMITING CRIME\\\")\\r\\n        }\\r\\n        \\r\\n        // reminders at specified hack levels, 5 iterations currently\\r\\n        let player = ns.getPlayer()\\r\\n\\r\\n        let i = 0\\r\\n        while (i < factionInfo.length) {\\r\\n            await ns.sleep(0)\\r\\n            ns.print(\\\"SUB-CYCLE: \\\" + i)\\r\\n\\r\\n            if (player.hacking > factionInfo[i].hackReq && player.factions.includes(factionInfo[i].name) == false) {\\r\\n                ns.print(\\\"REMINDER: JOIN \\\" + factionInfo[i].name)\\r\\n            }\\r\\n\\r\\n            if (player.hacking > hackEXE[i].unlock && ns.fileExists(hackEXE[i].fileName) == false) {\\r\\n                ns.print(\\\"REMINDER: BUY \\\" + hackEXE[i].fileName)\\r\\n            }\\r\\n\\r\\n            i++\\r\\n        }\\r\\n\\r\\n\\r\\n        // check for if faction invite from not a city faction is waiting\\r\\n\\r\\n\\r\\n        // sleep to make loop work\\r\\n        await ns.sleep(60e3)\\r\\n        ns.clearLog()\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/daemon-main.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/const.js\",\"url\":\"blob:file:///67ed77e2-392e-4c39-b6dd-a0054d3e87d0\"},{\"filename\":\"/lib/lib-BN1.js\",\"url\":\"blob:file:///1c7cedc0-5301-4f1f-919a-edd0d9e32084\"},{\"filename\":\"/scripts/daemon-main.js\",\"url\":\"blob:file:///cdf8a21f-dd79-4df2-bae7-c8e96bdc3b9c\"}],\"ramUsage\":7.6,\"server\":\"home\",\"_hash\":\"4b717c5d0a8d0fc581490576b644b62a282da781cf96f6fca3a2d418ae93c20e\",\"moduleSequenceNumber\":109,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import type { NS } from \\\"../../NetscriptDefinitions\\\"\\r\\n\\r\\nexport async function main(ns) {\\r\\n  \\r\\n  const files = ns.ls(\\\"home\\\", ns.args[0])\\r\\n\\r\\n  if (files.length === 0) { \\r\\n    ns.tprintf(\\\"ERROR File not found\\\") \\r\\n    return\\r\\n  } \\r\\n  for (const file of files) { ns.rm(file, \\\"home\\\") }\\r\\n\\r\\n  ns.tprintf(\\\"SUCCESS Deleted %d files\\\", files.length)\\r\\n}\",\"filename\":\"/bin/rm-all.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/bin/rm-all.js\",\"url\":\"blob:file:///cd335f47-9cb7-4857-9827-80456fc6439c\"}],\"ramUsage\":2.8,\"server\":\"home\",\"_hash\":\"7c05116177b17a5fb33d465e74d52f6fcbba980e8219618da4e9ff2e7b578c18\",\"moduleSequenceNumber\":59}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    while (ns.getCrimeChance(\\\"Rob store\\\") < .75) {\\r\\n        ns.commitCrime(\\\"Shoplifting\\\") \\r\\n        await ns.sleep(2e3)\\r\\n    }\\r\\n    ns.tprint(\\\"NOW ABLE TO ROB STORES\\\")\\r\\n}\",\"filename\":\"/bin/crime-shoplift.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/bin/crime-shoplift.js\",\"url\":\"blob:file:///7cbfa97d-1ca7-4c95-8183-cdc19060f6f3\"}],\"ramUsage\":11.6,\"server\":\"home\",\"_hash\":\"ec99482bef12cc54224410979a06c59f1127b2c7d76a8fc2b8c49203d177574a\",\"moduleSequenceNumber\":60}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\nimport { crimes, crimeStats } from \\\"/lib/const.js\\\"\\r\\n\\r\\n// requires BN4.1 or higher\\r\\nexport async function main(ns) {\\r\\n    // commits crime as long as the chance for success is > 75% or robbing a store\\r\\n    const sucess = .75\\r\\n\\r\\n    for (let crime of crimes) {\\r\\n        if (ns.getCrimeChance(crime) > sucess) {\\r\\n            ns.commitCrime(crime)\\r\\n            break\\r\\n        }\\r\\n        await ns.sleep(1e3)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/crime-commit.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/const.js\",\"url\":\"blob:file:///67ed77e2-392e-4c39-b6dd-a0054d3e87d0\"},{\"filename\":\"/bin/crime-commit.js\",\"url\":\"blob:file:///f9ebe75e-f0ed-45c2-95f0-e18144703a0e\"}],\"ramUsage\":11.6,\"server\":\"home\",\"_hash\":\"df9cd737aacc0ffdb11b56a7449072684e0de1c83089bd0168924a79e0687b3f\",\"moduleSequenceNumber\":141,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getCrimeChance\",\"cost\":5},{\"type\":\"fn\",\"name\":\"commitCrime\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.tprint(\\\"TODO - got to find a good solution for purchasing upgradse with the cheapest cost first\\\")\\r\\n    const n = ns.args[0]\\r\\n    ns.print(\\\"NODE: \\\" + n)\\r\\n\\r\\n    while (ns.hacknet.getNodeStats(n).cores != 8 || ns.hacknet.getNodeStats(n).ram != 32 || ns.hacknet.getNodeStats(n).level != 100){\\r\\n        ns.print(\\\"NODE STILL NEEDS UPGRADES\\\")\\r\\n        break\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hacknet-upgrade.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"home\",\"_hash\":\"20b500d2403e94a238f5cfc7a452140ddf86c30d728989b49eaf01f7d582b9db\",\"moduleSequenceNumber\":62}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../NetscriptDefinitions'\\r\\nimport { programs } from '/lib/const.js'\\r\\nimport { purchaseDarkwebPrograms } from '/lib/lib-BN4.js'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    let allPurchased = false\\r\\n\\r\\n    // eslint-disable-next-line no-unmodified-loop-condition\\r\\n    while (allPurchased == false) {\\r\\n        await ns.sleep (60e3)\\r\\n\\r\\n        await purchaseDarkwebPrograms(ns)\\r\\n\\r\\n        let check = 0\\r\\n        for (let program of programs){\\r\\n            if (ns.fileExists(program, \\\"home\\\")){\\r\\n                check++\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        if (check == (programs.length + 1)) {allPurchased == true}\\r\\n        await ns.sleep(10e3)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/darkweb-programs.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/const.js\",\"url\":\"blob:file:///67ed77e2-392e-4c39-b6dd-a0054d3e87d0\"},{\"filename\":\"/lib/lib-BN1.js\",\"url\":\"blob:file:///1c7cedc0-5301-4f1f-919a-edd0d9e32084\"},{\"filename\":\"/lib/lib-BN4.js\",\"url\":\"blob:file:///1ca51fd8-8128-428c-8a90-313fc35441c0\"},{\"filename\":\"/lib/const.js\",\"url\":\"blob:file:///67ed77e2-392e-4c39-b6dd-a0054d3e87d0\"},{\"filename\":\"/bin/darkweb-programs.js\",\"url\":\"blob:file:///fd8c53b9-2e38-4471-adda-72cfd35b10dc\"}],\"ramUsage\":6.2,\"server\":\"home\",\"_hash\":\"5672a4f8e624c0b4c108a025e243279d6ca25c2674e87f09a94b20f8a0b98863\",\"moduleSequenceNumber\":110,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) { await ns.grow(ns.args[0]) }\",\"filename\":\"/bin/host-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"home\",\"_hash\":\"e12cfb3f76a216b1845e41387d5c170e4bf737edd0e3c87618a2068985a980e1\",\"moduleSequenceNumber\":64}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) { await ns.hack(ns.args[0]) }\",\"filename\":\"/bin/host-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"home\",\"_hash\":\"1052225647a03802366f7025ca51646156e73e82e42d4739b49798d1aa6a8b37\",\"moduleSequenceNumber\":65}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nimport { NS } from '../../NetscriptDefinitions'\\r\\nimport { threadsWeaken, threadCount, usedRAM } from \\\"/lib/lib-BN1.js\\\"\\r\\n\\r\\nexport async function main(ns:NS) {\\r\\n    // calculate the number of weaken , grow , weaken to get server primed for managed hacking\\r\\n    let host = ns.args[0]\\r\\n\\r\\n    let script = \\\"/bin/host-weaken.js\\\"\\r\\n    let threads = threadsWeaken(ns, host)\\r\\n    let neededRAM = usedRAM(ns, script, threads)\\r\\n    let hostRAM = ns.getServerMaxRam(host)\\r\\n    let maxRAMusage = neededRAM - hostRAM\\r\\n\\r\\n}\\r\\n\\r\\n/*\\r\\n\\r\\ncopy script to host\\r\\n\\r\\nget script ram cost\\r\\nx = get number of times weaken can be ran on the server\\r\\ny = get number of times weaken is need to be  ran\\r\\n\\r\\nif y is greater than x \\r\\n    figure out how many more time and run full batches then the remainder\\r\\n\\r\\n\\r\\n*/\",\"filename\":\"/bin/host-prime.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/bin/host-prime.js\",\"url\":\"blob:file:///a3881c99-ba0a-499c-ada2-0181c9ba3134\"}],\"ramUsage\":2.8,\"server\":\"home\",\"_hash\":\"be6d8f9537ebeb90e3a8fe1294c4f20bd655739ad65eafd1e04916690d654e94\",\"moduleSequenceNumber\":66}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) { await ns.weaken(ns.args[0]) }\",\"filename\":\"/bin/host-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"home\",\"_hash\":\"d1ac44ec1cf505a20c27b2d846cea5c4a5f863ad1ae4fd0484911edaf7c818c2\",\"moduleSequenceNumber\":67}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('sleep')\\r\\n    const target = ns.args[0]\\r\\n    let targetHack = ns.getServer(target)\\r\\n\\r\\n    while (targetHack.numOpenPortsRequired > targetHack.openPortCount) {\\r\\n        if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && targetHack.sshPortOpen == false)   {ns.brutessh(targetHack.hostname)}\\r\\n        if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && targetHack.ftpPortOpen == false)   {ns.ftpcrack(targetHack.hostname)}\\r\\n        if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && targetHack.smtpPortOpen == false) {ns.relaysmtp(targetHack.hostname)}\\r\\n        if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && targetHack.httpPortOpen == false)  {ns.httpworm(targetHack.hostname)}\\r\\n        if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && targetHack.sqlPortOpen == false)  {ns.sqlinject(targetHack.hostname)}\\r\\n        \\r\\n        ns.print(targetHack.hostname + \\\": \\\" + targetHack.openPortCount + \\\" / \\\" + targetHack.numOpenPortsRequired)\\r\\n        await ns.sleep(10e3)\\r\\n    }\\r\\n    ns.nuke(targetHack.hostname)\\r\\n}\",\"filename\":\"/bin/root-wait.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":4,\"server\":\"home\",\"_hash\":\"5041966951f5a4b1616b21a8da9524d626595edbfd0670ac444e429ce70e1a3d\",\"moduleSequenceNumber\":68}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    let p = 0\\r\\n\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(target)\\r\\n        p++\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(target)\\r\\n        p++\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(target)\\r\\n        p++\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(target)\\r\\n        p++\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(target) \\r\\n        p++\\r\\n    }\\r\\n\\r\\n    if (ns.getServerNumPortsRequired(target) <= p) {ns.nuke(target)}\\r\\n    else {ns.tprint(\\\"NOT ENOUGH PORTS OPENED\\\")}\\r\\n}\",\"filename\":\"/bin/root.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/bin/root.js\",\"url\":\"blob:file:///a4a32363-5258-4f6a-8067-2a003827c707\"}],\"ramUsage\":2.1,\"server\":\"home\",\"_hash\":\"ae13a5565f98358e44f0215efec5e765124a18ea3270f78cd7e1c8924f50ab25\",\"moduleSequenceNumber\":69,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/self-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.55,\"server\":\"home\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":70}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* eslint-disable no-label-var */\\r\\n/* eslint-disable no-unused-labels */\\r\\n/** @param {NS} ns **/\\r\\n\\r\\nconst programs = [\\\"BruteSSH.exe\\\",\\r\\n                    \\\"FTPCrack.exe\\\",\\r\\n                    \\\"relaySMTP.exe\\\",\\r\\n                    \\\"HTTPWorm.exe\\\",\\r\\n                    \\\"SQLInject.exe\\\",\\r\\n                    \\\"DeepscanV1.exe\\\",\\r\\n                    \\\"DeepscanV2.exe\\\",\\r\\n                    \\\"ServerProfiler.exe\\\",\\r\\n                    \\\"AutoLink.exe\\\"]\\r\\n\\r\\nconst crimes = [\\\"Heist\\\", \\r\\n                \\\"Grand theft Auto\\\", \\r\\n                \\\"Traffick illegal Arms\\\",\\r\\n                \\\"Bond Forgery\\\",\\r\\n                \\\"Larceny\\\",\\r\\n                \\\"Rob store\\\"]\\r\\n\\r\\n// above are old and need to be worked out\\r\\n\\r\\nconst factionInfo = [{ name: \\\"CyberSec\\\",\\r\\n                    hackReq: 56,\\r\\n                    server: \\\"CSEC\\\" },\\r\\n                  { name: \\\"NiteSec\\\",\\r\\n                    hackReq: 214,\\r\\n                    server: \\\"avmnite-02h\\\" },\\r\\n                  { name: \\\"The Black Hand\\\",\\r\\n                    hackReq: 353,\\r\\n                    server: \\\"I.I.I.I\\\" },\\r\\n                  { name: \\\"BitRunners\\\",\\r\\n                    hackReq: 545,\\r\\n                    server: \\\"run4theh111z\\\" },\\r\\n                  { name: \\\"Daedalus\\\",\\r\\n                    hackReq: 2500,\\r\\n                    server: \\\"the-cave\\\" },]\\r\\n\\r\\nlet factionDetails = function() { name: \\\"\\\"\\r\\n                                  type:  \\\"\\\"\\r\\n                                  hackReq: 0\\r\\n                                  server: \\\"\\\" }\\r\\n\\r\\nconst hackEXE = [{ fileName: \\\"BruteSSH.exe\\\",\\r\\n                       command: 'ns.brutessh',\\r\\n                       unlock: 50,\\r\\n                       price: 500e3,\\r\\n                       createTime: 600e3},\\r\\n                     { fileName: \\\"FTPCrack.exe\\\",\\r\\n                       command: 'ns.ftpcrack',\\r\\n                       unlock: 100,\\r\\n                       price: 1500e3,\\r\\n                       createTime: 1800e3},\\r\\n                     { fileName: \\\"relaySMTP.exe\\\",\\r\\n                       command: 'ns.relaysmtp',\\r\\n                       unlock: 250,\\r\\n                       price: 5e6,\\r\\n                       createTime: 7200e3},\\r\\n                     { fileName: \\\"HTTPWorm.exe\\\",\\r\\n                       command: 'ns.httpworm',\\r\\n                       unlock: 500,\\r\\n                       price: 30e6,\\r\\n                       createTime: 14400e3},\\r\\n                     { fileName: \\\"SQLInject.exe\\\",\\r\\n                       command: 'ns.sqlinject',\\r\\n                       unlock: 750,\\r\\n                       price: 250e6,\\r\\n                       createTime: 28800e3} ]\\r\\n\\r\\nconst hackTools = [{ fileName: \\\"DeepscanV1..exe\\\",\\r\\n                     unlock: 75,\\r\\n                     price: 500e3,\\r\\n                     createTime: 900e3},\\r\\n                   { fileName: \\\"DeepscanV2.exe\\\",\\r\\n                     unlock: 400,\\r\\n                     price: 25e6,\\r\\n                     createTime: 7200e3},\\r\\n                   { fileName: \\\"ServerProfiler.exe\\\",\\r\\n                     unlock: 75,\\r\\n                     price: 500e3,\\r\\n                     createTime: 1800e3},\\r\\n                   { fileName: \\\"AutoLink.exe\\\",\\r\\n                     unlock: 25,\\r\\n                     price: 1e6,\\r\\n                     createTime: 900e3},\\r\\n                   { fileName: \\\"Formulas.exe\\\",\\r\\n                     unlock: 1000,\\r\\n                     price: 5e9,\\r\\n                     createTime: 14400e3}]\\r\\n\\r\\nlet programDetails = function() { fileName: \\\"\\\"\\r\\n                                  command: ''\\r\\n                                  price: 0\\r\\n                                  unlock: 0\\r\\n                                  createTime: 0 }\\r\\n\\r\\n\\r\\n// start with Rob Store and go down skipping Homicide and Assassinate unless you need the body count                                  \\r\\nconst crimeStats = [{ name: \\\"Rob Store\\\",\\r\\n                      karma: 0.5,\\r\\n                      kills: 0,\\r\\n                      money: 400000,\\r\\n                      time: 60000,\\r\\n                      hackXP: 30,\\r\\n                      intXP: 0.375 },\\r\\n                    { name: \\\"Larceny\\\",\\r\\n                      karma: 1.5,\\r\\n                      kills: 0,\\r\\n                      money: 800000,\\r\\n                      time: 90000,\\r\\n                      hackXP: 45,\\r\\n                      intXP: 0.75 },\\r\\n                    { name: \\\"Bond Forgery\\\",\\r\\n                      karma: 0.1,\\r\\n                      kills: 0,\\r\\n                      money: 4500000,\\r\\n                      time: 300000,\\r\\n                      hackXP: 100,\\r\\n                      intXP: 3 },\\r\\n                    { name: \\\"Homicide\\\",\\r\\n                      karma: 3,\\r\\n                      kills: 1,\\r\\n                      money: 45000,\\r\\n                      time: 3000,\\r\\n                      hackXP: 0,\\r\\n                      intXP: 0 },\\r\\n                    { name: \\\"Assassination\\\",\\r\\n                      karma: 10,\\r\\n                      kills: 1,\\r\\n                      money: 12000000,\\r\\n                      time: 300000,\\r\\n                      hackXP: 0,\\r\\n                      intXP: 3.25 },\\r\\n                    { name: \\\"Heist\\\",\\r\\n                      karma: 15,\\r\\n                      kills: 0,\\r\\n                      money: 120000000,\\r\\n                      time: 600000,\\r\\n                      hackXP: 450,\\r\\n                      intXP: 6.5 }]\\r\\n\\r\\nlet crimeDetails = function() { name: \\\"\\\"\\r\\n                                karma: 0\\r\\n                                kills: 0\\r\\n                                money: 0\\r\\n                                time: 0\\r\\n                                hackXP: 0\\r\\n                                intXP: 0 }\\r\\n                \\r\\n\\r\\nexport { programs, crimes, factionInfo, hackEXE, hackTools, crimeStats, programDetails, factionDetails, crimeDetails}\",\"filename\":\"/lib/const.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"7a9c5147decc8566e725c2c290249efc2e67dccd6975d77dbae30f39fa1ab972\",\"moduleSequenceNumber\":71,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n// import { hackEXE } from \\\"/lib/const.js\\\"\\r\\n\\r\\nexport function threadCount(ns, script, target){\\r\\n    // takes a script and calculates the avaliable RAM and number of threads that can be run\\r\\n\\r\\n    return Math.floor((ns.getServerMaxRam(target) - ns.getServerUsedRam(target)) / ns.getScriptRam(script, \\\"home\\\"))\\r\\n}\\r\\n\\r\\nexport function threadsWeaken(ns, server){\\r\\n    return (ns.getServerSecurityLevel(server) - ns.getServerMinSecurityLevel(server)) / .05\\r\\n}\\r\\n\\r\\nexport function usedRAM(ns, script, threads) {\\r\\n    return ns.getScriptRam(script, \\\"home\\\") * threads\\r\\n}\\r\\n\\r\\nexport function spider(ns){\\r\\n    let servers = ns.scan(\\\"home\\\")\\r\\n\\r\\n    for (let server of servers) {\\r\\n        ns.scan(server).forEach(element => { if (!servers.includes(element)) {servers.push(element)} })\\r\\n    }\\r\\n\\r\\n    for (let i of servers) {\\r\\n        if (i == \\\"home\\\" || i == \\\"darkweb\\\" || ns.getPurchasedServers().includes(i) == true) { servers.pop(i) }\\r\\n    }\\r\\n\\r\\n    return servers\\r\\n}\\r\\n\\r\\nexport function getRoot(ns, target) {\\r\\n    // gets root on a target\\r\\n    // returns true if sucessfull, false if there aren't enough ports opened\\r\\n    \\r\\n    if (ns.hasRootAccess(target)) {return true}\\r\\n    else {\\r\\n//        for (let hack of hackEXE) {\\r\\n//            if (ns.fileExists(hack.name, \\\"home\\\")) hack.command(target)\\r\\n//        }\\r\\n\\r\\n        if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))    {ns.brutessh(target)} \\r\\n        if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))    {ns.ftpcrack(target)} \\r\\n        if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))   {ns.relaysmtp(target)}    \\r\\n        if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))    {ns.httpworm(target)} \\r\\n        if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))   {ns.sqlinject(target)}    \\r\\n\\r\\n        try { ns.nuke(target) }\\r\\n        catch (e) { return false }\\r\\n/*\\r\\n        let host = ns.getServer(target)\\r\\n        if (ns.getServerNumPortsRequired(target) <= host.openPortCount) {\\r\\n                ns.nuke(target)\\r\\n                return true\\r\\n        } else {return false}\\r\\n*/\\r\\n    }\\r\\n    return true\\r\\n}\\r\\n\\r\\nexport function checkCanSelfHack(ns, target){\\r\\n    if (target == \\\"home\\\" || target == \\\"darkweb\\\" || ns.getPurchasedServers().includes(target) == true || ns.getServerMaxRam(target) == 0 || ns.getServerMoneyAvailable(target) == 0) { return false}\\r\\n    return true\\r\\n}\\r\\n\\r\\nexport function buildRoute(ns, target){\\r\\n    // builds a list from \\\"home\\\" to the target server\\r\\n    ns.print(target)\\r\\n\\r\\n    return route\\r\\n}\\r\\n\\r\\nexport function purchaseBotnodes(ns, RAM) {\\r\\n    let num = 0\\r\\n    while (num < ns.getPurchasedServerLimit()) {\\r\\n        if (ns.getServerMoneyAvailable('home') > (ns.getPurchasedServerCost(RAM) * 2)) {\\r\\n            ns.purchaseServer(\\\"botnode-\\\" + num, RAM)\\r\\n            s++\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function upgradeBotnode(ns) {\\r\\n    let list = ns.getPurchasedServers()\\r\\n    for (let item of list) {\\r\\n        let RAM = ns.getServerMaxRam(item) * 2\\r\\n        if (ns.getPurchasedServerCost(RAM) * 2 < ns.getServerMoneyAvailable('home')) {\\r\\n            ns.deleteServer(item)\\r\\n            ns.purchaseServer(\\\"botnet-\\\" + item.substring(7), RAM)\\r\\n        }\\r\\n    }    \\r\\n}\\r\\n\\r\\nexport function getHackScore(ns, target) {\\r\\n    // current back of the napkin math | growth * (max money / min security + 1)\\r\\n    \\r\\n    return ns.getServerGrowth(target) * (ns.getServerMaxMoney(target) / (ns.getServerMinSecurityLevel(target) + 1))\\r\\n}\\r\\n\\r\\nexport function bestHackTarget(ns) {\\r\\n    let best = [\\\"\\\", 0]\\r\\n    \\r\\n    for (let target of spider(ns)) {\\r\\n        if (ns.hasRootAccess(target)) {\\r\\n            if (best[1] < getHackScore(ns, target)) best[0] = target\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return best[0]\\r\\n}\\r\\n\\r\\n/* export function chooseHackTarget(ns, list){\\r\\n    // \\r\\n}\\r\\n*/\",\"filename\":\"/lib/lib-BN1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":10,\"server\":\"home\",\"_hash\":\"480420002ff22feb1a2d12cb4716cd2de20c8c0ffc40d1399bd4cdcc12be5bf8\",\"moduleSequenceNumber\":72,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\nimport { buildRoute } from '/lib/lib-BN1.js'\\r\\nimport { crimes, programs } from '/lib/const.js'\\r\\n\\r\\nexport async function commitCrime(ns) {\\r\\n    // commits crime as long as the chance for success is > 75% or robbing a store\\r\\n    const sucess = .75\\r\\n\\r\\n    for (let crime of crimes) {\\r\\n        if (ns.getCrimeChance(crime) > sucess) {\\r\\n            ns.commitCrime(crime)\\r\\n            // await ns.write(\\\"/data/log-crime.txt\\\", JSON.stringify(ns.getCrimeStats(crime)), \\\"a\\\")\\r\\n            break\\r\\n        }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\\r\\n\\r\\nexport async function purchaseDarkwebPrograms(ns) {\\r\\n    if (ns.getPlayer().tor == false) { ns.purchaseTor() }\\r\\n\\r\\n    for (let program of programs) {\\r\\n        ns.purchaseProgram(program)\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function manualBackdoor(ns, target){\\r\\n    let route = buildRoute(ns, target)\\r\\n    \\r\\n    for (let server of route) { ns.connect(server) }\\r\\n    return ns.installBackdoor(target)\\r\\n}\\r\\n\\r\\nexport function acceptStoryFactions(ns) {\\r\\n    // TODO\\r\\n    return true\\r\\n}\",\"filename\":\"/lib/lib-BN4.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":20.1,\"server\":\"home\",\"_hash\":\"aa3589e2bdde904dcf279f0dfc270829768e2163b29e3eeee455b0c3603ea56b\",\"moduleSequenceNumber\":73,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getCrimeChance\",\"cost\":5},{\"type\":\"fn\",\"name\":\"commitCrime\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n    ns.tail()\\r\\n    \\r\\n    while (true) {\\r\\n        if (ns.isBusy() == false) { \\r\\n            ns.run(\\\"/bin/crime-commit.js\\\")\\r\\n            ns.print(\\\"INITIALIZED: COMMITING CRIME\\\")\\r\\n        }\\r\\n        await ns.sleep(60e3)\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/daemon-crime.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/daemon-crime.js\",\"url\":\"blob:file:///5ff4e705-dd92-49cd-bcb3-1c8cb8379c12\"}],\"ramUsage\":3.1,\"server\":\"home\",\"_hash\":\"c0481557b440ccb97b79288da298a1a00fd528812ba35820dc35ed2afb109a83\",\"moduleSequenceNumber\":113,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('sleep')\\r\\n    const nodesWanted = ns.args[0]\\r\\n    let nodesPurchased = 0\\r\\n\\r\\n    while (ns.hacknet.numNodes() < nodesWanted) {\\r\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") > (ns.hacknet.getPurchaseNodeCost(1) * .75)){\\r\\n            ns.hacknet.purchaseNode(1)\\r\\n            ns.tprint(\\\"PURCHASED NODE: \\\" + nodesPurchased)\\r\\n            ns.run(\\\"/bin/hacknet-upgrade.js\\\", 1, nodesPurchased)\\r\\n            nodesPurchased++\\r\\n        }\\r\\n        else {await ns.sleep(60e3)}\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/build-hacknet.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.7,\"server\":\"home\",\"_hash\":\"32d383c398640407b8bd2d21431d40965bd1214f7448c08cf844ffbfb06afa39\",\"moduleSequenceNumber\":75}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nimport { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns:NS) {\\r\\n    ns.disableLog('ALL')\\r\\n    \\r\\n    // starting target\\r\\n    let target = \\\"n00dles\\\"\\r\\n    let c = 0\\r\\n\\r\\n    while (true) {\\r\\n        ns.clearLog()\\r\\n        await ns.sleep(0)\\r\\n        ns.print(\\\"BOTET CONTROLLER CYCLE: \\\"+ c)\\r\\n\\r\\n        // check the port for a new target\\r\\n        let update = ns.readPort(2)\\r\\n        if (update != target) target = update\\r\\n        ns.print(\\\"CURRENT TARGET: \\\"+ target)\\r\\n\\r\\n        // if security or money is more than 10% off target numbers\\r\\n            // find out the number of batches of weaken / grow needed to get the target to lowest / highest\\r\\n                // check if they're still working\\r\\n            // assign them out to the botnet\\r\\n\\r\\n        ns.print(\\\"STILL PREPARING....\\\")\\r\\n\\r\\n        // -------\\r\\n\\r\\n        ns.print(\\\"MAIN BATCH PROGRESSING\\\")\\r\\n        // assign out batches of hwgw to be ran against the target, staggering by cycle count \\r\\n\\r\\n\\r\\n        ns.print(\\\" : \\\"+ tH)\\r\\n        ns.print(\\\" : \\\"+ tW1)\\r\\n        ns.print(\\\" : \\\"+ tG)\\r\\n        ns.print(\\\" : \\\"+ tW2)\\r\\n    }\\r\\n\\r\\n}\",\"filename\":\"/scripts/hack-manager-v1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":0,\"server\":\"home\",\"_hash\":\"fdc28121461f5b26dbf4662933e6f905615e39bdb8f05dac7a089d4da2e039fe\",\"moduleSequenceNumber\":76}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\nimport { threadCount } from \\\"/lib/lib-BN1.js\\\"\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    let servers = ns.scan(\\\"home\\\")\\r\\n    let targets = []\\r\\n\\r\\n    for (let server of servers){\\r\\n        // filters scan of servers from home and adds them to targets\\r\\n        if (server != \\\"home\\\" && server != servers.includes(server) && server != \\\"darkweb\\\"){\\r\\n            targets.push(server)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // for debugging, logs the list of targets\\r\\n    ns.print(\\\"\\\\n\\\" + \\\"TARGETS ---- \\\\n\\\" + targets + \\\"\\\\n\\\\n\\\")\\r\\n    \\r\\n    for (let target of targets){\\r\\n        // run waitRoot to get root on the server (waitRoot loops until all port openers have been aquired)\\r\\n        if (ns.hasRootAccess(target) == false) {\\r\\n            if (ns.getServerNumPortsRequired(target) > 0) { \\r\\n                ns.print(\\\"\\\\n PORT OPENERS NEEDED:\\\" + target)\\r\\n            }\\r\\n            else if (ns.getServerNumPortsRequired(target) == 0){ ns.run(\\\"/bin/root.js\\\", 1, target)}\\r\\n\\r\\n            await ns.sleep(5e3)\\r\\n        }\\r\\n\\r\\n        if (ns.hasRootAccess(target)) {\\r\\n            // copies self-hack and runs it as much as it can be on the target server, for debugging logs the self-hack target and it's returned PID\\r\\n            await ns.scp(\\\"/bin/hack-self.js\\\", \\\"home\\\", target)\\r\\n            let threads = threadCount(ns, \\\"/bin/hack-self.js\\\", target)\\r\\n            let PID = ns.exec(\\\"/bin/hack-self.js\\\", target, threads, target)\\r\\n            ns.print(\\\"\\\\n hack-self: \\\" + target +\\\" | t\\\" + threads + \\\" | PID: \\\" + PID)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // hook for build-hacknet\\r\\n    ns.run(\\\"/scripts/hacknet-build.js\\\", 1, 8)\\r\\n}\",\"filename\":\"/scripts/setup-stage1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/lib-BN1.js\",\"url\":\"blob:file:///3a8c7934-2a9a-4a14-81d2-73d4fa5f7bee\"},{\"filename\":\"/scripts/setup-stage1.js\",\"url\":\"blob:file:///ce136163-1712-4967-b763-68663f64815e\"}],\"ramUsage\":5.05,\"server\":\"home\",\"_hash\":\"39c2264a47b343c27634a4bd9e064d97726656c6270ee4b407e25e46cc30d602\",\"moduleSequenceNumber\":77,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\nimport { spider, getRoot, checkCanSelfHack, threadCount } from \\\"/lib/lib-BN1.js\\\"\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n    ns.clearPort(1)\\r\\n\\r\\n    // scan through all servers again, attempt root and add servers not able to be rooted to array\\r\\n    let hosts = spider(ns)\\r\\n\\r\\n    for (let host of hosts) {\\r\\n\\r\\n /*     ns.tprint(\\\"    HOST: \\\" + host)\\r\\n        ns.tprint(\\\"    ROOT: \\\" + ns.hasRootAccess(host))\\r\\n        ns.tprint(\\\" RUNNING: \\\" + ns.scriptRunning(\\\"/bin/self-hack.js\\\", host))\\r\\n        ns.tprint(\\\"     CAN: \\\" + checkCanSelfHack(ns, host) + \\\"\\\\n------\\\")\\r\\n*/\\r\\n        // can self-hack and is not running already\\r\\n        if (checkCanSelfHack(ns, host) && !ns.scriptRunning(\\\"/bin/hack-self.js\\\", host)) {\\r\\n            \\r\\n            // verify root\\r\\n            let hasRoot = getRoot(ns, host)\\r\\n            await ns.sleep(0)\\r\\n\\r\\n            if (hasRoot) {\\r\\n                   await ns.scp(\\\"/bin/hack-self.js\\\", \\\"home\\\", host)\\r\\n                   ns.exec(\\\"/bin/hack-self.js\\\", host, threadCount(ns, \\\"/bin/hack-self.js\\\", host), host)\\r\\n                   ns.print(\\\"HACK-SELF: \\\" + host)\\r\\n            } else {\\r\\n                await ns.writePort(1, host)\\r\\n                ns.print(\\\"ROOT FAILED: \\\"+ host)\\r\\n           }\\r\\n        }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/setup-stage2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/lib-BN1.js\",\"url\":\"blob:file:///1c7cedc0-5301-4f1f-919a-edd0d9e32084\"},{\"filename\":\"/scripts/setup-stage2.js\",\"url\":\"blob:file:///94c9cf55-218e-4200-9357-a25550e2b018\"}],\"ramUsage\":7.7,\"server\":\"home\",\"_hash\":\"9fd98ae163238c64e6c8fa9b89a235bea120dc1c1f0ecf6da3b9e745ea8a03cf\",\"moduleSequenceNumber\":628,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///7f503532-2a45-4c86-ba2f-be4e0bf1281f\"}],\"ramUsage\":2.55,\"server\":\"home\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":112,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tprint(ns.getCrimeStats(\\\"Heist\\\"))\\n}\",\"filename\":\"print.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"print.js\",\"url\":\"blob:file:///796747fb-6d00-4a2a-8307-823a2aa91d65\"}],\"ramUsage\":6.6,\"server\":\"home\",\"_hash\":\"f848297246c49d262dedbef70df4f521bbff89227ee6cf077b7ba9aa29d8b847\",\"moduleSequenceNumber\":80}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\n// requires BN4.1 or higher\\r\\nvar killCounter = 0\\r\\n\\r\\nexport async function main(ns:NS) {\\r\\n    ns.disableLog('ALL')\\r\\n    // counts the number of people murdered, calcs karma from that >:D\\r\\n\\r\\n    while (ns.break.heart() < 54e3) {\\r\\n        await ns.sleep(0)\\r\\n\\r\\n        if (ns.getCrimeChance(\\\"Homicide\\\") < .50) ns.commitCrime(\\\"Rob Store\\\")\\r\\n        else {\\r\\n            ns.clearLog()\\r\\n            ns.print(\\\"KILL COUNT: \\\" + killCounter + \\\" | Score: \\\" + killCounter * 3)\\r\\n            ns.commitCrime(\\\"Homicide\\\")\\r\\n        }\\r\\n    }\\r\\n    ns.tail()\\r\\n}\",\"filename\":\"/bin/crime-goingPostal.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"8731957e58265485bd6609c59776c24b1673d7f771ce3e34a2cda7f29980ce3c\",\"moduleSequenceNumber\":81}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"TODO.txt\",\"text\":\"setup / buyTools / \\r\\n\\r\\n==== Current Task\\r\\n\\tCurrent Aug Target > BitRunners starting with Neurolink / (done [Sector-12, Avernum, Tian, Voldhaven, Ishima , New Tokyo, Chongqing])\\r\\n\\r\\n\\r\\n==== Faction Backdoors\\r\\n\\r\\n\\tCyberSec - CSEC | req hack 56\\r\\n\\tNiteSec - avmnite-02h | req hack 214\\r\\n\\tTheBlackHand - I.I.I.I | req hack 353\\r\\n\\tBitRunners - run4theh111z (is more than 10 deep from home, the-hub then nova-med) | req hack 545\\r\\n\\r\\n\\r\\n==== port() list\\r\\n\\tport 1 - for listner / exec waitRoot for getting root on hostname\\r\\n\\tport 2 - for listner / exec builder against hostname\\r\\n\\tport 3 - for listner / sets up selfHack against hostname\\r\\n\\tport 4 - for listner / sets up managedHack against hostname\\r\\n\\tport 5 - to be implemented / takes RAM return from buildBotnet, determines when we're ready for new target and builds a new botnet targeting that one\\r\\n\\r\\n\\r\\n\\tport 20 - spider passes hostnames to this, supposed to build a list of servers \\r\\n\\r\\n\\r\\n==== todo\\r\\n* botnet works to build servers\\r\\n\\tneed to rework removal to get rid of servers only when needed\\r\\n\\tneed to get ports working \\r\\n\\tlistner set up to do managedHack (listner not working)\\r\\n\\r\\n$ refactor all scripts to handle starting from 'new game'\\r\\n\\tstage1 > no existing hacking tools, no port openers\\r\\n\\t\\t\\t\\tautomate bitnodes\\r\\n\\tstage2 > CashRoot aug for one port opener and 1m\\r\\n\\t\\t\\t\\tsetup purchased servers\\r\\n\\tstage3 > \\r\\n\\r\\n>\\tneed to set up new postAug script that works....\\r\\n\\tfigure out the number of threads needed to not hack a server into not having money....\\r\\n\\tstart purchased servers on hacking \\r\\n\\t\\tports Needed 0 - \\\"harakiri-sushi\\\"\\r\\n\\t\\tports Needed 1 - \\\"iron-gym\\\"\\r\\n\\t\\tports Needed 2 - \\\"phantasy\\\" \\r\\n\\t\\tports Needed 3 - \\\"rho-construction\\\"\\r\\n\\r\\n-\\tcoding contracts, run on .cct\\r\\n\\r\\n+\\tfigure out the number and levels for hacknet to make it worth it?\\r\\n\\r\\n__________SCRATCH__________\\r\\n\\r\\n---- SPIDER\\r\\n# spider [startFrom]\\r\\n\\tscan startFrom\\r\\n\\t\\tfor every name in the scan\\t\\r\\n\\t\\t\\tscan that name\\r\\n\\t\\t\\t\\tif there isn't a file already with that name\\r\\n\\t\\t\\t\\t\\tget the server details and write it to a file with that hostname in /targets/port0/ (a folder for every level of port that needs to be unblocked)\\r\\n\\r\\n * not working right, need to figure out the ports evidently\\r\\n\\r\\n---- LISTNER\\r\\n# home listner\\r\\n\\tlistens for hostname on port(1)\\r\\n\\t\\tif root on server and hostname != home or serv-[0-24] \\r\\n\\t\\t\\twrite hostname to port(2)\\r\\n\\t\\tif not root\\r\\n\\t\\t\\texec waitRoot\\r\\n\\tlistens for hostname on port(2)\\r\\n\\t\\tif host has RAM && Money > 0\\r\\n\\t\\t\\texec builder\\r\\n\\t\\t\\t\\t// this takes the server to the max money and lowest security\\r\\n\\tlistens for hostname on port(3)\\r\\n\\t\\tscp selfHack to hostname\\r\\n\\t\\texec for max threads\\r\\n\\tlistens for hostname on port(4)\\r\\n\\t\\tscp managedHack to hostname\\r\\n\\t\\texec managedHack on hostname\\r\\n\\r\\n---- HACKING\\r\\n# builder [targetServer]\\r\\n\\truns as many threads as possible of weaken, grow, weaken at targetServer\\r\\n\\twrites hostname to port(3) when done\\r\\n\\r\\n# finding servers example \\r\\n\\t/** @param {NS} ns */\\r\\n\\texport function getServers(ns) {\\r\\n    \\tconst servers = ['home'];\\r\\n    \\tfor (const server of servers)\\r\\n        \\tns.scan(server)\\r\\n            \\t.filter((x) => !servers.includes(x))\\r\\n            \\t.forEach((x) => servers.push(x));\\r\\n    \\treturn servers;\\r\\n\\t}\\r\\n\\r\\n\\t/** @param {NS} ns */\\r\\n\\texport function getRootedServers(ns) {\\r\\n    \\tfor (const server of getServers(ns).filter((x) => !ns.hasRootAccess(x) && !ns.getPurchasedServers().includes(x) && x != 'home')) {\\r\\n        \\tfor (const tool of [ns.brutessh, ns.ftpcrack, ns.relaysmtp, ns.httpworm, ns.sqlinject, ns.nuke]) {\\r\\n            \\ttry {\\r\\n                \\ttool(server);\\r\\n            \\t}\\r\\n            \\tcatch (e) { }\\r\\n       \\t\\t}\\r\\n    \\t}\\r\\n    \\treturn getServers(ns).filter((x) => ns.hasRootAccess(x));\\r\\n\\t}\\r\\n\\r\\n\\r\\n#\\thackManager\\r\\n\\r\\n\\twhile don't have formulas\\r\\n\\t\\tdo basic maxThread if loop wgh\\r\\n\\t\\r\\n\\tfigure out the needed threads for getting a server to lowestSec and maxMoney and the number of hacks to not nuke it\\r\\n\\t\\texec those as individual scripts to maxamize thread count\\r\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"96.2.7.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":29697269062.5,\"moneyMax\":111364758984.375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1165,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"88.8.0.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":40043122104.75,\"moneyMax\":150161707892.8125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1336,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"96.4.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\",\"ecorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":16751259296.25,\"moneyMax\":62817222360.9375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1129,\"serverGrowth\":62}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-856914-Joe'sGuns.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,9,1,9,3,7,6,7,7,8,0,7,2,1,0,9,10,0,0,7,0],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-651326-Joe'sGuns.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"24626109108\",\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"90.4.6.3\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":255,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42327.40999994504,\"pid\":56,\"ramUsage\":2.55,\"server\":\"blade\",\"threads\":100,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///7f503532-2a45-4c86-ba2f-be4e0bf1281f\"}],\"ramUsage\":2.55,\"server\":\"blade\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":970,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":12152578834.5,\"moneyMax\":45572170629.375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1097,\"serverGrowth\":81}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"77.4.4.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\",\"megacorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":15038020419,\"moneyMax\":56392576571.25,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1269,\"serverGrowth\":83}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-594039-Joe'sGuns.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[7,[64,66,166,18,187,44,42,61,165,154,175,32,42,9,4,29,50,69,115,166,19,88,37]],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"13.5.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"fulcrumassets\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":13214982864.75,\"moneyMax\":49556185742.8125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1040,\"serverGrowth\":54}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-581381-Joe'sGuns.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-9,8,-8,2,2,2,4,-6,-4,-4,3,-3,-4,-5,6,10,-1,10,-1,3,2,7,2,-2,-4,-4,4,10,-8,-1],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-76356-NiteSec.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[22,31],[17,25],[8,15],[12,19],[16,17],[7,9],[19,24],[19,25],[6,7],[14,21],[2,8],[18,19],[19,29]],\"reward\":{\"name\":\"NiteSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"50.1.2.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":127.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\"],\"dataMap\":{},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42387.40999994417,\"pid\":54,\"ramUsage\":2.55,\"server\":\"omnitek\",\"threads\":50,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///7f503532-2a45-4c86-ba2f-be4e0bf1281f\"}],\"ramUsage\":2.55,\"server\":\"omnitek\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":964,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":15899224347.75,\"moneyMax\":59622091304.0625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1021,\"serverGrowth\":97}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"9.4.4.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\",\"b-and-a\",\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":14058071309.25,\"moneyMax\":52717767409.6875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1091,\"serverGrowth\":75}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"15.4.3.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":98,\"hackDifficulty\":98,\"minDifficulty\":33,\"moneyAvailable\":21830458234.5,\"moneyMax\":81864218379.375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1087,\"serverGrowth\":90}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-190851-Joe'sGuns.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[9,0,-8,9,-4,6,-7,3,7,-9,-1,2,-6,-10,-2,-9,-7,10,-9,-6,6,-5,-9,4,-4,-2,4,10,-8,4,1,-4,-6,4,4,-2],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"85.0.9.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":127.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\"],\"dataMap\":{},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42447.60999994329,\"pid\":51,\"ramUsage\":2.55,\"server\":\"fulcrumtech\",\"threads\":50,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///7f503532-2a45-4c86-ba2f-be4e0bf1281f\"}],\"ramUsage\":2.55,\"server\":\"fulcrumtech\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":958,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"run4theh111z\",\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":1319928358.5,\"moneyMax\":4949731344.375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1191,\"serverGrowth\":88}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"76.7.4.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":750000,\"moneyMax\":2812500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1175,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-745543-Joe'sGuns.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[9,-2,7,3,-4,-3,-3,5,2,-2,4,0,5,-2,4,-1,10,-7,8,3],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"38.1.6.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\"omnitek\",\"kuai-gong\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":879064065,\"moneyMax\":3296490243.75,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":880,\"serverGrowth\":68}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-151031.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[2,7],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"29.3.2.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":700696898.25,\"moneyMax\":2627613368.4375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":985,\"serverGrowth\":60}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-51901-Joe'sGuns.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-2,-3,-2,0,4,5,5,-2,-5,4,-2,2,2,-1,4,6,-5,0,-1,3,-6,4,-6,-5,-5,5,-1,0,-5,-10,9,-6,6,-6,-7,-1,-8,7,-8],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-275646-NiteSec.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"469808\",-53],\"reward\":{\"name\":\"NiteSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"31.9.7.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":625462814.25,\"moneyMax\":2345485553.4375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":880,\"serverGrowth\":60}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"29.9.5.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":30.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42417.40999994373,\"pid\":52,\"ramUsage\":2.55,\"server\":\"helios\",\"threads\":12,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///7f503532-2a45-4c86-ba2f-be4e0bf1281f\"}],\"ramUsage\":2.55,\"server\":\"helios\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":961,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":543088621.5,\"moneyMax\":2036582330.625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":806,\"serverGrowth\":74}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-243993-Joe'sGuns.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[8],[14],[11],[44],[45],[10],[14],[15],[38],[3],[6],[11],[30],[3]],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-89748-NiteSec.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[181,146,121,129,13,148,179,101,16,22,164,16,44,193,148,119,144,97,178,46,101,73,128,180,104,171,115,194,162,135,1,41,183,152,43,137,122,91,38,79,72],\"reward\":{\"name\":\"NiteSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"69.5.3.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":15.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42477.609999942855,\"pid\":50,\"ramUsage\":2.55,\"server\":\"vitalife\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///7f503532-2a45-4c86-ba2f-be4e0bf1281f\"}],\"ramUsage\":2.55,\"server\":\"vitalife\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":955,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":597977900.25,\"moneyMax\":2242417125.9375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":781,\"serverGrowth\":75}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"96.0.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":736564684.5,\"moneyMax\":2762117566.875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":857,\"serverGrowth\":95}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"94.5.0.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":30.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":66299.356,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":48896.40999984945,\"pid\":6,\"ramUsage\":2.55,\"server\":\"univ-energy\",\"threads\":12,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///7f503532-2a45-4c86-ba2f-be4e0bf1281f\"}],\"ramUsage\":2.55,\"server\":\"univ-energy\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":114,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"deltaone\",\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":871516563,\"moneyMax\":3268187111.25,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":816,\"serverGrowth\":86}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"26.5.5.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":127.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42207.40999994679,\"pid\":60,\"ramUsage\":2.55,\"server\":\"titan-labs\",\"threads\":50,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///7f503532-2a45-4c86-ba2f-be4e0bf1281f\"}],\"ramUsage\":2.55,\"server\":\"titan-labs\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":982,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":673535016,\"moneyMax\":2525756310,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":820,\"serverGrowth\":80}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-81931.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":95906861,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"49.6.8.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":15.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42177.409999947224,\"pid\":61,\"ramUsage\":2.55,\"server\":\"microdyne\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///7f503532-2a45-4c86-ba2f-be4e0bf1281f\"}],\"ramUsage\":2.55,\"server\":\"microdyne\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":985,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":416908687.5,\"moneyMax\":1563407578.125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":874,\"serverGrowth\":84}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-480955.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[7,8,0,-9,-2,-2,-10,0,-2,-5,8,-9,-3,-6,7,0,6,0,1,4,-8,-6,-7,-10,-9,7,-9,5,5,-1,5,-3,-6,5,0,-8],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"64.0.2.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":666275679.75,\"moneyMax\":2498533799.0625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":907,\"serverGrowth\":79}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"25.7.1.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":585126228.75,\"moneyMax\":2194223357.8125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":849,\"serverGrowth\":79}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-395149-Joe'sGuns.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0],[0,1],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"46.4.9.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":790119495,\"moneyMax\":2962948106.25,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":922,\"serverGrowth\":56}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-829704.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[191,90,129,60,11,63,36,40,143,62,77,196,14,173,124,104,70,96,114,88,127,177,81,21,48,48,28,112,79,103,19,135,115,56,200,4,19,167,108,175],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-789282-NiteSec.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[114,68,126,154,80,67,56,41,200,145,179,188,98,192,183,38,139,43,9,40,26,21,98,2,14,42,51,106,94,100,130,162,156,142,64,187,182],\"reward\":{\"name\":\"NiteSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"25.9.2.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":30.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42267.409999945914,\"pid\":58,\"ramUsage\":2.55,\"server\":\"omnia\",\"threads\":12,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///7f503532-2a45-4c86-ba2f-be4e0bf1281f\"}],\"ramUsage\":2.55,\"server\":\"omnia\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":976,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"snap-fitness\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":726214812.75,\"moneyMax\":2723305547.8125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":944,\"serverGrowth\":60}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"48.6.0.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":820375698.75,\"moneyMax\":3076408870.3125,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":815,\"serverGrowth\":65}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"95.2.1.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\",\"stormtech\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":687026841,\"moneyMax\":2576350653.75,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":826,\"serverGrowth\":71}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"80.6.4.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":63.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42237.40999994635,\"pid\":59,\"ramUsage\":2.55,\"server\":\"solaris\",\"threads\":25,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///7f503532-2a45-4c86-ba2f-be4e0bf1281f\"}],\"ramUsage\":2.55,\"server\":\"solaris\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":979,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":627774489,\"moneyMax\":2354154333.75,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":821,\"serverGrowth\":76}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"64.5.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"global-pharm\",\"defcomm\",\"univ-energy\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":1247175901.5,\"moneyMax\":4676909630.625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":807,\"serverGrowth\":63}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-244484-Joe'sGuns.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[138,79,191,124,150,182,83,135,62,118],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"58.3.0.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":15.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":66299.358,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":48986.40999984814,\"pid\":7,\"ramUsage\":2.55,\"server\":\"global-pharm\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///7f503532-2a45-4c86-ba2f-be4e0bf1281f\"}],\"ramUsage\":2.55,\"server\":\"global-pharm\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":115,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"aevum-police\",\"deltaone\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":1223966943.75,\"moneyMax\":4589876039.0625,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":847,\"serverGrowth\":82}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"70.5.7.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\",\"titan-labs\",\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":928948202.25,\"moneyMax\":3483555758.4375,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":786,\"serverGrowth\":73}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"8.5.3.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"taiyang-digital\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":1093061966.25,\"moneyMax\":4098982373.4375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":810,\"serverGrowth\":73}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"55.2.5.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":30.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":66299.36099999999,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":48956.409999848576,\"pid\":8,\"ramUsage\":2.55,\"server\":\"unitalife\",\"threads\":12,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///7f503532-2a45-4c86-ba2f-be4e0bf1281f\"}],\"ramUsage\":2.55,\"server\":\"unitalife\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":116,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"global-pharm\",\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":814193401.5,\"moneyMax\":3053225255.625,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":814,\"serverGrowth\":71}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-547825.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[18,21],[5,11],[24,26],[11,21],[8,16],[17,22],[14,22],[12,13],[17,26],[4,10]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-508168.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[4],[4,4],[6,7,6],[3,2,8,2],[9,7,8,3,7],[5,3,6,5,6,9],[2,8,5,5,3,1,4],[4,2,5,3,8,1,9,8]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-133396-NiteSec.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[7],[3,2],[2,4,3],[2,4,4,1],[5,1,7,4,3],[1,8,8,1,8,5],[6,1,4,9,3,9,4]],\"reward\":{\"name\":\"NiteSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"9.4.9.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":30.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":66299.362,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":49046.40999984727,\"pid\":9,\"ramUsage\":2.55,\"server\":\"lexo-corp\",\"threads\":12,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///7f503532-2a45-4c86-ba2f-be4e0bf1281f\"}],\"ramUsage\":2.55,\"server\":\"lexo-corp\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":117,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":576713673,\"moneyMax\":2162676273.75,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":745,\"serverGrowth\":64}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-324502.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[190,76,135,120,21,109,124,47,106,166,1,130,113,23,90,165,65,118,188,143,4,128,179,112,141,189,129,16,198,82,51,106,25,190,170,109,144,46,95,37,159,76,90,135,6,197,34,191,56],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"90.3.2.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":15.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[0,0,0,12]},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":66299.36499999999,\"onlineExpGained\":161.54709317090322,\"onlineMoneyMade\":0,\"onlineRunningTime\":56757.20999973506,\"pid\":10,\"ramUsage\":2.55,\"server\":\"rho-construction\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///7f503532-2a45-4c86-ba2f-be4e0bf1281f\"}],\"ramUsage\":2.55,\"server\":\"rho-construction\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":118,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":55.400000000000006,\"minDifficulty\":19,\"moneyAvailable\":436280701.5,\"moneyMax\":1636052630.625,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":491,\"serverGrowth\":56}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"24.4.3.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":63.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":66299.367,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":49016.4099998477,\"pid\":11,\"ramUsage\":2.55,\"server\":\"alpha-ent\",\"threads\":25,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///7f503532-2a45-4c86-ba2f-be4e0bf1281f\"}],\"ramUsage\":2.55,\"server\":\"alpha-ent\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":119,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"catalyst\",\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":518690925,\"moneyMax\":1945090968.75,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":511,\"serverGrowth\":55}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"0.9.9.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":15.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[0,0,0,144]},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":66299.36899999999,\"onlineExpGained\":2537.6639973895153,\"onlineMoneyMade\":0,\"onlineRunningTime\":48566.40999985425,\"pid\":12,\"ramUsage\":2.55,\"server\":\"aevum-police\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///7f503532-2a45-4c86-ba2f-be4e0bf1281f\"}],\"ramUsage\":2.55,\"server\":\"aevum-police\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":120,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"I.I.I.I\",\"aerocorp\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":67.80000000000007,\"minDifficulty\":25,\"moneyAvailable\":182081365.5,\"moneyMax\":682805120.625,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":427,\"serverGrowth\":31}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"31.0.9.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":30.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,0,168,780]},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":66299.37,\"onlineExpGained\":10686.395296126126,\"onlineMoneyMade\":0,\"onlineRunningTime\":56907.20999973288,\"pid\":13,\"ramUsage\":2.55,\"server\":\"rothman-uni\",\"threads\":12,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///7f503532-2a45-4c86-ba2f-be4e0bf1281f\"}],\"ramUsage\":2.55,\"server\":\"rothman-uni\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":121,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":15.048,\"minDifficulty\":15,\"moneyAvailable\":228656369.33653748,\"moneyMax\":699997370.625,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":379,\"serverGrowth\":44}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"88.3.1.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":63.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42297.40999994548,\"pid\":57,\"ramUsage\":2.55,\"server\":\"zb-institute\",\"threads\":25,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///7f503532-2a45-4c86-ba2f-be4e0bf1281f\"}],\"ramUsage\":2.55,\"server\":\"zb-institute\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":973,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":748448128.5,\"moneyMax\":2806680481.875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":740,\"serverGrowth\":78}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-827148.cct\",\"type\":\"Array Jumping Game\",\"data\":[8,8,0],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-557595.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[10,[123,39,140,31,1,191,176,16,155,193,34,39,57,132,16,186,95,108,60,24,198,189,106,196]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"37.4.9.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":30.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[0,0,36,660]},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":66299.37199999999,\"onlineExpGained\":7998.110285426473,\"onlineMoneyMade\":0,\"onlineRunningTime\":56877.20999973331,\"pid\":14,\"ramUsage\":2.55,\"server\":\"summit-uni\",\"threads\":12,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///7f503532-2a45-4c86-ba2f-be4e0bf1281f\"}],\"ramUsage\":2.55,\"server\":\"summit-uni\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":122,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":16,\"minDifficulty\":16,\"moneyAvailable\":177283922.4498794,\"moneyMax\":628868160,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":431,\"serverGrowth\":60}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-658334-Joe'sGuns.cct\",\"type\":\"Array Jumping Game\",\"data\":[9,6,2,0,0,6,10,7,0,0,8,0,0,4,0,5,0,0,2,0,8,2,8,0,0],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"74.7.3.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"comptek\",\"rho-construction\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":374702309.25,\"moneyMax\":1405133659.6875,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":606,\"serverGrowth\":65}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"77.4.3.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":15.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[0,0,0,174]},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":66299.37299999999,\"onlineExpGained\":2723.4387172241845,\"onlineMoneyMade\":0,\"onlineRunningTime\":56817.20999973419,\"pid\":15,\"ramUsage\":2.55,\"server\":\"catalyst\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///7f503532-2a45-4c86-ba2f-be4e0bf1281f\"}],\"ramUsage\":2.55,\"server\":\"catalyst\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":123,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"avmnite-02h\",\"lexo-corp\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":57.30000000000008,\"minDifficulty\":22,\"moneyAvailable\":242385822.75,\"moneyMax\":908946835.3125,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":421,\"serverGrowth\":48}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"39.6.3.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":63.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[239253975,975,1875,3000]},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5605.396446271522,\"offlineMoneyMade\":0,\"offlineRunningTime\":66299.375,\"onlineExpGained\":57221.24661128441,\"onlineMoneyMade\":239253975,\"onlineRunningTime\":59037.40999970188,\"pid\":16,\"ramUsage\":2.55,\"server\":\"the-hub\",\"threads\":25,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///7f503532-2a45-4c86-ba2f-be4e0bf1281f\"}],\"ramUsage\":2.55,\"server\":\"the-hub\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":124,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"silver-helix\",\"rothman-uni\",\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":39,\"hackDifficulty\":13,\"minDifficulty\":13,\"moneyAvailable\":443703721.25,\"moneyMax\":450095771.25,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":299,\"serverGrowth\":46}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"86.4.6.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":171682935.75,\"moneyMax\":643811009.0625,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":346,\"serverGrowth\":62}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-892706.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,9,0,4,3,9,6,6,1,0,4,6,6,9,6,5,3,0,0,8,2,5,6,5,9],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"48.6.3.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":63.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,0,875]},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":66299.37599999999,\"onlineExpGained\":15803.028872603569,\"onlineMoneyMade\":0,\"onlineRunningTime\":56937.20999973244,\"pid\":17,\"ramUsage\":2.55,\"server\":\"netlink\",\"threads\":25,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///7f503532-2a45-4c86-ba2f-be4e0bf1281f\"}],\"ramUsage\":2.55,\"server\":\"netlink\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":125,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"silver-helix\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":33.25,\"minDifficulty\":26,\"moneyAvailable\":206250000,\"moneyMax\":773437500,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":385,\"serverGrowth\":59}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"57.0.6.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":63564153.75,\"moneyMax\":238365576.5625,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":263,\"serverGrowth\":59}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-868570.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[12,3],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"47.9.2.8\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":2.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[458880,1434,1442,2875]},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5102.356552300455,\"offlineMoneyMade\":0,\"offlineRunningTime\":66299.378,\"onlineExpGained\":8160.490078610112,\"onlineMoneyMade\":458880,\"onlineRunningTime\":61587.60999966477,\"pid\":18,\"ramUsage\":2.55,\"server\":\"n00dles\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///7f503532-2a45-4c86-ba2f-be4e0bf1281f\"}],\"ramUsage\":2.55,\"server\":\"n00dles\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":126,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":196555,\"moneyMax\":196875,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-57323-Joe'sGuns.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[8,3],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-52355-Joe'sGuns.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"646839469525\",-99],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"56.2.0.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":15.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[14599854,1626,13278,15036]},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":61333.722730929585,\"offlineMoneyMade\":0,\"offlineRunningTime\":66299.38399999999,\"onlineExpGained\":101487.28526096171,\"onlineMoneyMade\":14599854,\"onlineRunningTime\":61587.60999966477,\"pid\":19,\"ramUsage\":2.55,\"server\":\"foodnstuff\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///7f503532-2a45-4c86-ba2f-be4e0bf1281f\"}],\"ramUsage\":2.55,\"server\":\"foodnstuff\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":127,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"zer0\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3.02,\"minDifficulty\":3,\"moneyAvailable\":5625000,\"moneyMax\":5625000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"60.3.4.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":15.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[25800186,2520,11826,14484]},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":57400.87506600868,\"offlineMoneyMade\":0,\"offlineRunningTime\":66299.386,\"onlineExpGained\":97724.73059697817,\"onlineMoneyMade\":25800186,\"onlineRunningTime\":61587.60999966477,\"pid\":20,\"ramUsage\":2.55,\"server\":\"sigma-cosmetics\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///7f503532-2a45-4c86-ba2f-be4e0bf1281f\"}],\"ramUsage\":2.55,\"server\":\"sigma-cosmetics\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":128,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3,\"minDifficulty\":3,\"moneyAvailable\":6407298,\"moneyMax\":6468750,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"8.3.5.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":15.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[41014446,3804,8970,12966]},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":64543.60098663439,\"offlineMoneyMade\":0,\"offlineRunningTime\":66299.38799999999,\"onlineExpGained\":115431.88790667678,\"onlineMoneyMade\":41014446,\"onlineRunningTime\":61587.60999966477,\"pid\":21,\"ramUsage\":2.55,\"server\":\"joesguns\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///7f503532-2a45-4c86-ba2f-be4e0bf1281f\"}],\"ramUsage\":2.55,\"server\":\"joesguns\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":129,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5.012,\"minDifficulty\":5,\"moneyAvailable\":6966498,\"moneyMax\":7031250,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"92.0.5.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":30.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[100814700,3744,4356,8436]},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":48305.90084014821,\"offlineMoneyMade\":0,\"offlineRunningTime\":66299.39099999999,\"onlineExpGained\":110364.93856674545,\"onlineMoneyMade\":100814700,\"onlineRunningTime\":61587.60999966477,\"pid\":22,\"ramUsage\":2.55,\"server\":\"zer0\",\"threads\":12,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///7f503532-2a45-4c86-ba2f-be4e0bf1281f\"}],\"ramUsage\":2.55,\"server\":\"zer0\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":130,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"foodnstuff\",\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8.036,\"minDifficulty\":8,\"moneyAvailable\":21093750,\"moneyMax\":21093750,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"69.3.9.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":15.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[31490094,2772,6504,9528]},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":55948.781366467054,\"offlineMoneyMade\":0,\"offlineRunningTime\":66299.39199999999,\"onlineExpGained\":104914.61964243429,\"onlineMoneyMade\":31490094,\"onlineRunningTime\":61587.60999966477,\"pid\":23,\"ramUsage\":2.55,\"server\":\"nectar-net\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///7f503532-2a45-4c86-ba2f-be4e0bf1281f\"}],\"ramUsage\":2.55,\"server\":\"nectar-net\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":131,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"n00dles\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7.008,\"minDifficulty\":7,\"moneyAvailable\":7734375,\"moneyMax\":7734375,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-492033.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[38,145,3,171,200,133,70,60,41,181,80,88,97,166,90,142,50],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-170797-NiteSec.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[181,33,36,167,80,170],\"reward\":{\"name\":\"NiteSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"36.5.1.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":30.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[60197892,3348,7332,10728]},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":84811.89080893052,\"offlineMoneyMade\":0,\"offlineRunningTime\":66299.394,\"onlineExpGained\":142881.74920397374,\"onlineMoneyMade\":60197892,\"onlineRunningTime\":61587.40999966477,\"pid\":24,\"ramUsage\":2.55,\"server\":\"neo-net\",\"threads\":12,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///7f503532-2a45-4c86-ba2f-be4e0bf1281f\"}],\"ramUsage\":2.55,\"server\":\"neo-net\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":132,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zer0\",\"comptek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8,\"minDifficulty\":8,\"moneyAvailable\":13832352,\"moneyMax\":14062500,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"61.3.2.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":63.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[471319200,3675,4125,8150]},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":47394.913371166236,\"offlineMoneyMade\":0,\"offlineRunningTime\":66299.39499999999,\"onlineExpGained\":123916.61321767351,\"onlineMoneyMade\":471319200,\"onlineRunningTime\":59127.40999970057,\"pid\":25,\"ramUsage\":2.55,\"server\":\"silver-helix\",\"threads\":25,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///7f503532-2a45-4c86-ba2f-be4e0bf1281f\"}],\"ramUsage\":2.55,\"server\":\"silver-helix\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":133,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"nectar-net\",\"the-hub\",\"netlink\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10.05,\"minDifficulty\":10,\"moneyAvailable\":123289650,\"moneyMax\":126562500,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"67.3.3.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":15.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[33351558,2694,6348,9234]},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":43978.851172060255,\"offlineMoneyMade\":0,\"offlineRunningTime\":66299.397,\"onlineExpGained\":81959.33113373832,\"onlineMoneyMade\":33351558,\"onlineRunningTime\":61587.60999966477,\"pid\":26,\"ramUsage\":2.55,\"server\":\"hong-fang-tea\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///7f503532-2a45-4c86-ba2f-be4e0bf1281f\"}],\"ramUsage\":2.55,\"server\":\"hong-fang-tea\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":134,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5.024,\"minDifficulty\":5,\"moneyAvailable\":8411318.736430291,\"moneyMax\":8437500,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-105878-NiteSec.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"()))aa((a)\",\"reward\":{\"name\":\"NiteSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"57.8.1.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":15.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[61528344,3816,4506,8514]},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":38527.95247072247,\"offlineMoneyMade\":0,\"offlineRunningTime\":66299.39899999999,\"onlineExpGained\":75501.6031389592,\"onlineMoneyMade\":61528344,\"onlineRunningTime\":61587.60999966477,\"pid\":27,\"ramUsage\":2.55,\"server\":\"harakiri-sushi\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///7f503532-2a45-4c86-ba2f-be4e0bf1281f\"}],\"ramUsage\":2.55,\"server\":\"harakiri-sushi\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":135,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5.02,\"minDifficulty\":5,\"moneyAvailable\":11250000,\"moneyMax\":11250000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"63.0.8.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":30.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[271331760,3324,3888,7476]},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":35757.904767505446,\"offlineMoneyMade\":0,\"offlineRunningTime\":66299.40299999999,\"onlineExpGained\":81949.90072899678,\"onlineMoneyMade\":271331760,\"onlineRunningTime\":59097.409999701005,\"pid\":28,\"ramUsage\":2.55,\"server\":\"phantasy\",\"threads\":12,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///7f503532-2a45-4c86-ba2f-be4e0bf1281f\"}],\"ramUsage\":2.55,\"server\":\"phantasy\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":136,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7,\"minDifficulty\":7,\"moneyAvailable\":67500000,\"moneyMax\":67500000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-35516-Joe'sGuns.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":658705097,\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"81.4.8.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":30.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[186405660,5100,6000,11280]},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":50544.71316251154,\"offlineMoneyMade\":0,\"offlineRunningTime\":66299.404,\"onlineExpGained\":100363.85591885877,\"onlineMoneyMade\":186405660,\"onlineRunningTime\":61587.60999966477,\"pid\":29,\"ramUsage\":2.55,\"server\":\"max-hardware\",\"threads\":12,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///7f503532-2a45-4c86-ba2f-be4e0bf1281f\"}],\"ramUsage\":2.55,\"server\":\"max-hardware\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":137,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"hong-fang-tea\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5.024,\"minDifficulty\":5,\"moneyAvailable\":27681732,\"moneyMax\":28125000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"3.9.5.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":30.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[182588244,1080,1860,3240]},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":10216.524756157982,\"offlineMoneyMade\":0,\"offlineRunningTime\":66299.40599999999,\"onlineExpGained\":43953.14875966831,\"onlineMoneyMade\":182588244,\"onlineRunningTime\":59067.40999970144,\"pid\":30,\"ramUsage\":2.55,\"server\":\"omega-net\",\"threads\":12,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///7f503532-2a45-4c86-ba2f-be4e0bf1281f\"}],\"ramUsage\":2.55,\"server\":\"omega-net\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":138,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"max-hardware\",\"johnson-ortho\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":27,\"hackDifficulty\":9.024,\"minDifficulty\":9,\"moneyAvailable\":186749757.9375,\"moneyMax\":188817285.9375,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":194,\"serverGrowth\":37}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"28.0.9.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\",\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37,\"hackDifficulty\":37,\"minDifficulty\":12,\"moneyAvailable\":33699999,\"moneyMax\":126374996.25,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":253,\"serverGrowth\":27}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-863038-Joe'sGuns.cct\",\"type\":\"Total Ways to Sum\",\"data\":96,\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-372930-Joe'sGuns.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[45,41,2,12,6,1,27,17,46,23],[12,43,18,44,14,39,15,10,28,11],[25,30,43,13,46,11,44,44,50,17],[32,1,50,38,3,50,6,41,8,32],[48,13,28,48,7,38,44,41,47,46],[48,27,24,35,12,3,21,15,4,38],[16,34,24,1,48,12,38,47,19,20]],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"15.9.9.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":30.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[82410312,1248,3576,5220]},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":30046.592028369032,\"offlineMoneyMade\":0,\"offlineRunningTime\":66299.40699999999,\"onlineExpGained\":78032.50552716659,\"onlineMoneyMade\":82410312,\"onlineRunningTime\":61587.60999966477,\"pid\":31,\"ramUsage\":2.55,\"server\":\"iron-gym\",\"threads\":12,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///7f503532-2a45-4c86-ba2f-be4e0bf1281f\"}],\"ramUsage\":2.55,\"server\":\"iron-gym\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":139,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10.024,\"minDifficulty\":10,\"moneyAvailable\":56250000,\"moneyMax\":56250000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-188507-Joe'sGuns.cct\",\"type\":\"Array Jumping Game\",\"data\":[8,7,0,9,0,6,1,10,5,3,3,3,1,0],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-226718.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[2,-10,-3,-3,3,-3,-7,0,0,5,2,-7,1,4,-3,9,-9,10,-8,6,4,3,3,-4,1,-4,-4,6],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-388696-NiteSec.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[10,13],[15,25],[6,16],[24,28],[8,10],[13,14],[17,25],[18,27]],\"reward\":{\"name\":\"NiteSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"52.1.6.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":127.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[0,0,0,150]},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":66299.409,\"onlineExpGained\":1855.1119981509073,\"onlineMoneyMade\":0,\"onlineRunningTime\":56727.209999735496,\"pid\":32,\"ramUsage\":2.55,\"server\":\"millenium-fitness\",\"threads\":50,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///7f503532-2a45-4c86-ba2f-be4e0bf1281f\"}],\"ramUsage\":2.55,\"server\":\"millenium-fitness\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":140,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"syscore\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":43.5,\"minDifficulty\":17,\"moneyAvailable\":187500000,\"moneyMax\":703125000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":491,\"serverGrowth\":34}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"13.2.9.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":15.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42357.409999944604,\"pid\":55,\"ramUsage\":2.55,\"server\":\"powerhouse-fitness\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///7f503532-2a45-4c86-ba2f-be4e0bf1281f\"}],\"ramUsage\":2.55,\"server\":\"powerhouse-fitness\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":967,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":675000000,\"moneyMax\":2531250000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":950,\"serverGrowth\":51}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"47.4.9.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"millenium-fitness\",\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":337500000,\"moneyMax\":1265625000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":791,\"serverGrowth\":44}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-748011-Joe'sGuns.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"18060\",82],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"22.9.6.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\",\"fulcrumtech\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":506,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"15.5.7.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"netlink\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":363,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-788822.cct\",\"type\":\"Total Ways to Sum\",\"data\":31,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"56.5.4.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":216,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"79.2.5.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\",\"blade\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":546,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-312059-Joe'sGuns.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[5,[148,21,51,89,136,166,90,43,165,196,75,93,81,30,153,65,146,120,104,15,91,66,77,78,132]],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-343464-NiteSec.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[43,64,181,129,193,131,57,145,100,133,125,54,193],\"reward\":{\"name\":\"NiteSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"51.3.5.0\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"foodnstuff\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":52,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-6132-Joe'sGuns.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"571877148888\",-16],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-168554-NiteSec.cct\",\"type\":\"Array Jumping Game\",\"data\":[10,0,6,0,8,0,7,1,4,3,8,8,9,6,0,1,2,5,0,0,0],\"reward\":{\"name\":\"NiteSec\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-915.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[2],[7,8],[2,1,7],[9,5,2,3],[7,7,3,7,6]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"54.2.4.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"5.9.1.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":9000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-24761.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[174,194,154,116,53,158,87,149,137,33,39,136,194,188,143,23,69,57,146,29,133,78,141,32,116,131,101,96,40,100,153,104,108,39,168,92,36,182,104,131,23,93,3,74,82],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"72.0.9.0\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":4,\"rolloverRep\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":21592.3533501176,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":0.0004,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":98.77280000000002,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":264689.00323578063}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":4.8257,\"isBanned\":false,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":13.4159,\"isBanned\":false,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":48.0816,\"isBanned\":false,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":2,\"isBanned\":false,\"isMember\":true,\"name\":\"Slum Snakes\",\"playerReputation\":94330.40960893949}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":3.2978,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":29.0803,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":101.2253,\"isBanned\":false,\"isMember\":false,\"name\":\"CyberSec\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{\"buyTools\":\"buy BruteSSH.exe; buy FTPCrack.exe; buy relaySMTP.exe; buy HTTPWorm.exe; buy SQLInject.exe; buy ServerProfiler.exe; buy DeepscanV1.exe; buy DeepscanV2.exe; buy AutoLink.exe\",\"root\":\"run /bin/root.js\",\"setup\":\"run /scripts/daemon-main.js\",\"scan\":\"scan-analyze\"}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":20,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":600,\"CodeInstructionRunTime\":10,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":100,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":2,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":true,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":true,\"UseIEC60027_2\":false,\"MonacoTheme\":\"vs-dark\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#FFFFFF\",\"primary\":\"#C3C7CC\",\"primarydark\":\"#72767D\",\"successlight\":\"#858C23\",\"success\":\"#59731F\",\"successdark\":\"#2F5B1C\",\"errorlight\":\"#FF5258\",\"error\":\"#ED4245\",\"errordark\":\"#E12B31\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#FFBA52\",\"warning\":\"#EAA741\",\"warningdark\":\"#D59022\",\"infolight\":\"#99A1F7\",\"info\":\"#848DED\",\"infodark\":\"#6A75E8\",\"welllight\":\"#202225\",\"well\":\"#36393F\",\"white\":\"#fff\",\"black\":\"#202225\",\"hp\":\"#ED4245\",\"money\":\"#F1C40F\",\"hack\":\"#2ECC71\",\"combat\":\"#faffdf\",\"cha\":\"#9B59B6\",\"int\":\"#5865F2\",\"rep\":\"#faffdf\",\"disabled\":\"#1ABC9C\",\"backgroundprimary\":\"#36393F\",\"backgroundsecondary\":\"#2F3136\",\"button\":\"#2F3136\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"}}","VersionSave":"9","AllGangsSave":"","LastExportBonus":"1641874820923","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}","SaveTimestamp":"1641874820941"}}