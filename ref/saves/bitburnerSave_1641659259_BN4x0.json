{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":396,\"hp\":10,\"max_hp\":10,\"strength\":1,\"defense\":1,\"dexterity\":224,\"agility\":158,\"charisma\":40,\"intelligence\":0,\"hacking_chance_mult\":1.455507496346134,\"hacking_speed_mult\":1.428876818291354,\"hacking_money_mult\":1.3201882053026157,\"hacking_grow_mult\":1.3201882053026157,\"hacking_exp\":1465359.735931627,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":23242.754974333428,\"agility_exp\":17919.508595264786,\"charisma_exp\":532.3246379068639,\"intelligence_exp\":0,\"hacking_mult\":1.5573930210903635,\"strength_mult\":1.3201882053026157,\"defense_mult\":1.3201882053026157,\"dexterity_mult\":1.8297808525494257,\"agility_mult\":1.3861976155677467,\"charisma_mult\":1.7426484309994528,\"hacking_exp_mult\":1.7535399836931997,\"strength_exp_mult\":1.6700380797078092,\"defense_exp_mult\":1.6700380797078092,\"dexterity_exp_mult\":1.6700380797078092,\"agility_exp_mult\":1.6700380797078092,\"charisma_exp_mult\":1.6700380797078092,\"company_rep_mult\":1.5974277284161653,\"faction_rep_mult\":1.4522070258328774,\"money\":353938524.03400105,\"city\":\"New Tokyo\",\"location\":\"The Slums\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"avmnite-02h\",\"purchasedServers\":[],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":0.09901411539769618,\"onlineTimeSeconds\":45473.99999989925,\"ram\":1,\"totalMoneyGenerated\":4502.567883577144,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":0.09901411539769618,\"onlineTimeSeconds\":18.799999999999965,\"ram\":1,\"totalMoneyGenerated\":1.8614653694766918,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":0.09901411539769618,\"onlineTimeSeconds\":18.399999999999967,\"ram\":1,\"totalMoneyGenerated\":1.8218597233176133,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":0.09901411539769618,\"onlineTimeSeconds\":15.999999999999975,\"ram\":1,\"totalMoneyGenerated\":1.5842258463631418,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":0.09901411539769618,\"onlineTimeSeconds\":15.599999999999977,\"ram\":1,\"totalMoneyGenerated\":1.5446202002040632,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":0.09901411539769618,\"onlineTimeSeconds\":14.999999999999979,\"ram\":1,\"totalMoneyGenerated\":1.4852117309654453,\"name\":\"hacknet-node-5\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Tian Di Hui\",\"New Tokyo\",\"NiteSec\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"DataJack\"}],\"augmentations\":[{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":13,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Augmented Targeting II\"}],\"sourceFiles\":[{\"lvl\":1,\"n\":1}],\"numPeopleKilled\":0,\"karma\":-266.00000000000045,\"crime_money_mult\":1.3201882053026157,\"crime_success_mult\":1.3201882053026157,\"isWorking\":false,\"focus\":true,\"workType\":\"\",\"workCostMult\":3,\"workExpMult\":2,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":50,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":300000,\"work_money_mult\":1.3201882053026157,\"hacknet_node_money_mult\":1.3201882053026157,\"hacknet_node_purchase_cost_mult\":0.737117659319133,\"hacknet_node_ram_cost_mult\":0.737117659319133,\"hacknet_node_core_cost_mult\":0.737117659319133,\"hacknet_node_level_cost_mult\":0.737117659319133,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":4,\"lastUpdate\":1641659258995,\"totalPlaytime\":1345908000,\"playtimeSinceLastAug\":93167400,\"playtimeSinceLastBitnode\":601016400,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":60167577.45666672,\"gang\":0,\"hacking\":1056700334,\"hacknet\":4510.8652664475685,\"hacknet_expenses\":-33898.285199612874,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":352938524.03401405,\"work\":0,\"servers\":0,\"other\":-313900000,\"augmentations\":-450000000}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-60288,\"codingcontract\":0,\"corporation\":0,\"crime\":451346002.4022205,\"gang\":0,\"hacking\":2976268480.7796183,\"hacknet\":444713.82074382604,\"hacknet_expenses\":-490593.84542561986,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":520732451.1168266,\"work\":1025400.652794733,\"servers\":-143068647.72364506,\"other\":-1031800000,\"augmentations\":-1732932616.9662745}},\"scriptProdSinceLastAug\":1056700334,\"exploits\":[],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":true,\"ip\":\"57.1.5.1\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"BruteSSH.exe\",\"DeepscanV1.exe\",\"ServerProfiler.exe\",\"fl1ght.exe\",\"AutoLink.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"DeepscanV2.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\"],\"ramUsed\":35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/scripts/daemon-main.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":93156.20999920538,\"pid\":1,\"ramUsage\":7.6,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/lib/const.js\",\"url\":\"blob:file:///5fd170ba-1a4c-4b9a-978b-70dc72f6047c\"},{\"filename\":\"/lib/lib-BN1.js\",\"url\":\"blob:file:///dcb83553-53b1-4aba-b6bc-ae0345636f9a\"},{\"filename\":\"/lib/const.js\",\"url\":\"blob:file:///5fd170ba-1a4c-4b9a-978b-70dc72f6047c\"},{\"filename\":\"/scripts/daemon-main.js\",\"url\":\"blob:file:///7de9670c-2c5f-4f41-a286-36d4b1547ba2\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/bin/darkweb-programs.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":93156.00999920539,\"pid\":2,\"ramUsage\":6.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/lib/const.js\",\"url\":\"blob:file:///1ed94c7c-79af-4df8-830a-47d8eec7ad37\"},{\"filename\":\"/lib/lib-BN1.js\",\"url\":\"blob:file:///895473d1-e313-4350-8114-44fdf0d2e5a5\"},{\"filename\":\"/lib/const.js\",\"url\":\"blob:file:///1ed94c7c-79af-4df8-830a-47d8eec7ad37\"},{\"filename\":\"/lib/lib-BN4.js\",\"url\":\"blob:file:///aef3ad59-31c5-4d76-9488-0b74f9b566e9\"},{\"filename\":\"/bin/darkweb-programs.js\",\"url\":\"blob:file:///e3017f93-1956-45ae-a47b-f79ff6f7c9cf\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/scripts/daemon-port1.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":93156.00999920539,\"pid\":4,\"ramUsage\":6.5,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/lib/lib-BN1.js\",\"url\":\"blob:file:///895473d1-e313-4350-8114-44fdf0d2e5a5\"},{\"filename\":\"/scripts/daemon-port1.js\",\"url\":\"blob:file:///6643a056-93b6-407f-a5c7-1ad3049c61ba\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/scripts/daemon-crime.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":29472.010000072158,\"pid\":261,\"ramUsage\":3.1,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/daemon-crime.js\",\"url\":\"blob:file:///09ac4cc6-829f-4ab6-836e-59b2b04184bc\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/bin/crime-commit.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":282,\"ramUsage\":11.6,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/lib/const.js\",\"url\":\"blob:file:///5fd170ba-1a4c-4b9a-978b-70dc72f6047c\"},{\"filename\":\"/bin/crime-commit.js\",\"url\":\"blob:file:///37d955c0-abd2-4e4d-b1aa-b10f8f6970d4\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hashes = {};\\r\\n    const files = ns.ls('home', '.js');\\r\\n    for (const file of files) {\\r\\n        const contents = ns.read(file);\\r\\n        hashes[file] = getHash(contents);\\r\\n    }\\r\\n    while (true) {\\r\\n        const files = ns.ls('home', '.js');\\r\\n        for (const file of files) {\\r\\n            const contents = ns.read(file);\\r\\n            const hash = getHash(contents);\\r\\n            if (hash != hashes[file]) {\\r\\n                ns.tprint(`INFO: Detected change in ${file}`);\\r\\n                const processes = ns.ps().filter((p) => {\\r\\n                    return p.filename == file;\\r\\n                });\\r\\n                for (const process of processes) {\\r\\n                    ns.tprint(`INFO: Restarting ${process.filename} ${process.args} -t ${process.threads}`);\\r\\n                    if (process.filename != ns.getScriptName()) {\\r\\n                        ns.kill(process.pid, ns.getHostname());\\r\\n                        ns.run(process.filename, process.threads, ...process.args);\\r\\n                    }\\r\\n                    else {\\r\\n                        ns.spawn(process.filename, process.threads, ...process.args);\\r\\n                    }\\r\\n                }\\r\\n                hashes[file] = hash;\\r\\n            }\\r\\n        }\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n}\\r\\nconst getHash = (input) => {\\r\\n    let hash = 0, i, chr;\\r\\n    if (input.length === 0)\\r\\n        return hash;\\r\\n    for (i = 0; i < input.length; i++) {\\r\\n        chr = input.charCodeAt(i);\\r\\n        hash = ((hash << 5) - hash) + chr;\\r\\n        hash |= 0; // Convert to 32bit integer\\r\\n    }\\r\\n    return hash;\\r\\n};\",\"filename\":\"watcher.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"watcher.js\",\"url\":\"blob:file:///5f231ac9-9361-4968-ac70-076d643a8a2a\"}],\"ramUsage\":5.55,\"server\":\"home\",\"_hash\":\"a8593bbd317187fe7996762fd39b7ddf48a9c7b0d49bdafea9426846c88a3f80\",\"moduleSequenceNumber\":5924}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../NetscriptDefinitions'\\r\\nimport { bestHackTarget } from \\\"/lib/lib-BN1.js\\\"\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.tprint(\\\"TESTING\\\")\\r\\n\\r\\n    ns.tprint(bestHackTarget(ns))\\r\\n    \\r\\n}\",\"filename\":\"_testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/const.js\",\"url\":\"blob:file:///5fd170ba-1a4c-4b9a-978b-70dc72f6047c\"},{\"filename\":\"/lib/lib-BN1.js\",\"url\":\"blob:file:///dcb83553-53b1-4aba-b6bc-ae0345636f9a\"},{\"filename\":\"_testing.js\",\"url\":\"blob:file:///f2949686-bc88-41ce-898d-0b3f3ea4131a\"}],\"ramUsage\":4.4,\"server\":\"home\",\"_hash\":\"27295b9c60afa02649c8faeedfb84635f4a00a65a8a079d47b6434c10818096c\",\"moduleSequenceNumber\":5925}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\nimport { getRoot, threadCount, checkCanSelfHack } from '/lib/lib-BN1.js'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n    ns.tail()\\r\\n    ns.print(\\\"\\\\n ----------- \\\\nDAEMON: PORT(1) RUNNING\\\")\\r\\n\\r\\n    while (true) {\\r\\n        // ns.print(ns.peek(1))\\r\\n\\r\\n        if (ns.peek(1) !== \\\"NULL PORT DATA\\\") {\\r\\n            let host = ns.readPort(1)\\r\\n            if (getRoot(ns, host)) {\\r\\n                if (checkCanSelfHack(ns, host)) {\\r\\n                    await ns.scp(\\\"/bin/hack-self.js\\\", \\\"home\\\", host)\\r\\n                    let threads = threadCount(ns, \\\"/bin/hack-self.js\\\", host)\\r\\n                    if (threads > 0) {\\r\\n                        ns.exec(\\\"/bin/hack-self.js\\\", host, threads, host)\\r\\n                        ns.print(\\\"HACK-SELF: \\\" + host)\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n            else {await ns.tryWritePort(1, host)}\\r\\n            ns.print(\\\"FAILED ROOT: \\\" + host)\\r\\n        }\\r\\n        await ns.sleep(30e3)\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/daemon-port1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/const.js\",\"url\":\"blob:file:///5fd170ba-1a4c-4b9a-978b-70dc72f6047c\"},{\"filename\":\"/lib/lib-BN1.js\",\"url\":\"blob:file:///dcb83553-53b1-4aba-b6bc-ae0345636f9a\"},{\"filename\":\"/scripts/daemon-port1.js\",\"url\":\"blob:file:///454d26d4-7be4-4a60-b660-b362605bc7ca\"}],\"ramUsage\":6.5,\"server\":\"home\",\"_hash\":\"fd61da82af0f0fd367b5670786beeaac12fa400262dd25d27561c6c4d0d037fc\",\"moduleSequenceNumber\":5954}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\nimport { bestHackTarget } from '/lib/lib-BN1.js'\\r\\nimport { programs, factionInfo, hackEXE } from '/lib/const.js'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    ns.tail()\\r\\n    ns.print(\\\"RUNNING DAEMON ENGINE\\\")\\r\\n\\r\\n    let c = 0\\r\\n\\r\\n    while (true) {\\r\\n        ns.print(\\\"DAEMON CYCLE: \\\" + ++c)\\r\\n\\r\\n        // check to see the best hack target\\r\\n        ns.clearPort(2)\\r\\n        let bestTarget = bestHackTarget(ns)\\r\\n        await ns.writePort(2, bestTarget)\\r\\n        ns.print(\\\"BEST TARGET: \\\" + bestTarget)\\r\\n\\r\\n        // initialize Stage 1\\r\\n        if (!ns.scriptRunning(\\\"/bin/hack-self.js\\\", \\\"n00dles\\\") && ns.getServerMoneyAvailable(\\\"home\\\") < 1e6 ) {\\r\\n            ns.run(\\\"/scripts/setup-stage1.js\\\")\\r\\n            ns.print(\\\"INITIALIZED: STAGE 1\\\")\\r\\n        }\\r\\n\\r\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") > 200e3 && ns.scan(\\\"home\\\").includes(\\\"darkweb\\\") == false)  {\\r\\n            ns.run(\\\"/bin/darkweb-programs.js\\\")\\r\\n        }\\r\\n\\r\\n        // initialize Stage 2\\r\\n        if (!ns.scriptRunning(\\\"/bin/hack-self.js\\\", \\\"iron-gym\\\")) {\\r\\n            ns.run(\\\"/scripts/setup-stage2.js\\\") \\r\\n            ns.print(\\\"INITIALIZED: STAGE 2\\\")\\r\\n        }\\r\\n        if (!ns.scriptRunning(\\\"/scripts/daemon-port1.js\\\", \\\"home\\\")) { \\r\\n            ns.run(\\\"/scripts/daemon-port1.js\\\")\\r\\n            ns.print(\\\"INITIALIZED: PORT 1 DAEMON\\\")\\r\\n        }\\r\\n\\r\\n        // commit crimes if below a certian ammount of money\\r\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") < 5e6 && ns.isBusy() == false) { \\r\\n            ns.run(\\\"/bin/crime-commit.js\\\")\\r\\n            ns.print(\\\"INITIALIZED: COMMITING CRIME\\\")\\r\\n        }\\r\\n        \\r\\n        // reminders at specified hack levels, 5 iterations currently\\r\\n        let player = ns.getPlayer()\\r\\n\\r\\n        let i = 0\\r\\n        while (i < factionInfo.length) {\\r\\n            await ns.sleep(0)\\r\\n            ns.print(\\\"SUB-CYCLE: \\\" + i)\\r\\n\\r\\n            if (player.hacking > factionInfo[i].hackReq && player.factions.includes(factionInfo[i].name) == false) {\\r\\n                ns.print(\\\"REMINDER: JOIN \\\" + factionInfo[i].name)\\r\\n            }\\r\\n\\r\\n            if (player.hacking > hackEXE[i].unlock && ns.fileExists(hackEXE[i].fileName) == false) {\\r\\n                ns.print(\\\"REMINDER: BUY \\\" + hackEXE[i].fileName)\\r\\n            }\\r\\n\\r\\n            i++\\r\\n        }\\r\\n\\r\\n\\r\\n        // check for if faction invite from not a city faction is waiting\\r\\n\\r\\n\\r\\n        // sleep to make loop work\\r\\n        await ns.sleep(60e3)\\r\\n        ns.clearLog()\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/daemon-main.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/const.js\",\"url\":\"blob:file:///5fd170ba-1a4c-4b9a-978b-70dc72f6047c\"},{\"filename\":\"/lib/lib-BN1.js\",\"url\":\"blob:file:///dcb83553-53b1-4aba-b6bc-ae0345636f9a\"},{\"filename\":\"/lib/const.js\",\"url\":\"blob:file:///5fd170ba-1a4c-4b9a-978b-70dc72f6047c\"},{\"filename\":\"/scripts/daemon-main.js\",\"url\":\"blob:file:///7de9670c-2c5f-4f41-a286-36d4b1547ba2\"}],\"ramUsage\":7.6,\"server\":\"home\",\"_hash\":\"4b717c5d0a8d0fc581490576b644b62a282da781cf96f6fca3a2d418ae93c20e\",\"moduleSequenceNumber\":5951}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import type { NS } from \\\"../../NetscriptDefinitions\\\"\\r\\n\\r\\nexport async function main(ns) {\\r\\n  \\r\\n  const files = ns.ls(\\\"home\\\", ns.args[0])\\r\\n\\r\\n  if (files.length === 0) { \\r\\n    ns.tprintf(\\\"ERROR File not found\\\") \\r\\n    return\\r\\n  } \\r\\n  for (const file of files) { ns.rm(file, \\\"home\\\") }\\r\\n\\r\\n  ns.tprintf(\\\"SUCCESS Deleted %d files\\\", files.length)\\r\\n}\",\"filename\":\"/bin/rm-all.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/bin/rm-all.js\",\"url\":\"blob:file:///cd335f47-9cb7-4857-9827-80456fc6439c\"}],\"ramUsage\":2.8,\"server\":\"home\",\"_hash\":\"7c05116177b17a5fb33d465e74d52f6fcbba980e8219618da4e9ff2e7b578c18\",\"moduleSequenceNumber\":5928}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    while (ns.getCrimeChance(\\\"Rob store\\\") < .75) {\\r\\n        ns.commitCrime(\\\"Shoplifting\\\") \\r\\n        await ns.sleep(2e3)\\r\\n    }\\r\\n    ns.tprint(\\\"NOW ABLE TO ROB STORES\\\")\\r\\n}\",\"filename\":\"/bin/crime-shoplift.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/crime-shoplift.js\",\"url\":\"blob:file:///7cbfa97d-1ca7-4c95-8183-cdc19060f6f3\"}],\"ramUsage\":11.6,\"server\":\"home\",\"_hash\":\"ec99482bef12cc54224410979a06c59f1127b2c7d76a8fc2b8c49203d177574a\",\"moduleSequenceNumber\":5989}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\nimport { crimes, crimeStats } from \\\"/lib/const.js\\\"\\r\\n\\r\\n// requires BN4.1 or higher\\r\\nexport async function main(ns) {\\r\\n    // commits crime as long as the chance for success is > 75% or robbing a store\\r\\n    const sucess = .75\\r\\n\\r\\n    for (let crime of crimes) {\\r\\n        if (ns.getCrimeChance(crime) > sucess) {\\r\\n            ns.commitCrime(crime)\\r\\n            break\\r\\n        }\\r\\n        await ns.sleep(1e3)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/crime-commit.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/const.js\",\"url\":\"blob:file:///5fd170ba-1a4c-4b9a-978b-70dc72f6047c\"},{\"filename\":\"/bin/crime-commit.js\",\"url\":\"blob:file:///37d955c0-abd2-4e4d-b1aa-b10f8f6970d4\"}],\"ramUsage\":11.6,\"server\":\"home\",\"_hash\":\"df9cd737aacc0ffdb11b56a7449072684e0de1c83089bd0168924a79e0687b3f\",\"moduleSequenceNumber\":15488}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.tprint(\\\"TODO - got to find a good solution for purchasing upgradse with the cheapest cost first\\\")\\r\\n    const n = ns.args[0]\\r\\n    ns.print(\\\"NODE: \\\" + n)\\r\\n\\r\\n    while (ns.hacknet.getNodeStats(n).cores != 8 || ns.hacknet.getNodeStats(n).ram != 32 || ns.hacknet.getNodeStats(n).level != 100){\\r\\n        ns.print(\\\"NODE STILL NEEDS UPGRADES\\\")\\r\\n        break\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hacknet-upgrade.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"home\",\"_hash\":\"20b500d2403e94a238f5cfc7a452140ddf86c30d728989b49eaf01f7d582b9db\",\"moduleSequenceNumber\":5931}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../NetscriptDefinitions'\\r\\nimport { programs } from '/lib/const.js'\\r\\nimport { purchaseDarkwebPrograms } from '/lib/lib-BN4.js'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    let allPurchased = false\\r\\n\\r\\n    // eslint-disable-next-line no-unmodified-loop-condition\\r\\n    while (allPurchased == false) {\\r\\n        await ns.sleep (60e3)\\r\\n\\r\\n        await purchaseDarkwebPrograms(ns)\\r\\n\\r\\n        let check = 0\\r\\n        for (let program of programs){\\r\\n            if (ns.fileExists(program, \\\"home\\\")){\\r\\n                check++\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        if (check == (programs.length + 1)) {allPurchased == true}\\r\\n        await ns.sleep(10e3)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/darkweb-programs.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/const.js\",\"url\":\"blob:file:///5fd170ba-1a4c-4b9a-978b-70dc72f6047c\"},{\"filename\":\"/lib/const.js\",\"url\":\"blob:file:///5fd170ba-1a4c-4b9a-978b-70dc72f6047c\"},{\"filename\":\"/lib/lib-BN1.js\",\"url\":\"blob:file:///dcb83553-53b1-4aba-b6bc-ae0345636f9a\"},{\"filename\":\"/lib/const.js\",\"url\":\"blob:file:///5fd170ba-1a4c-4b9a-978b-70dc72f6047c\"},{\"filename\":\"/lib/lib-BN4.js\",\"url\":\"blob:file:///e0e2b49e-2256-4f0c-93b0-567b62c0ddd5\"},{\"filename\":\"/bin/darkweb-programs.js\",\"url\":\"blob:file:///f721c746-ba56-4edc-b4bf-77bb6c97ee9d\"}],\"ramUsage\":6.2,\"server\":\"home\",\"_hash\":\"5672a4f8e624c0b4c108a025e243279d6ca25c2674e87f09a94b20f8a0b98863\",\"moduleSequenceNumber\":5952}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) { await ns.grow(ns.args[0]) }\",\"filename\":\"/bin/host-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"home\",\"_hash\":\"e12cfb3f76a216b1845e41387d5c170e4bf737edd0e3c87618a2068985a980e1\",\"moduleSequenceNumber\":5933}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) { await ns.hack(ns.args[0]) }\",\"filename\":\"/bin/host-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"home\",\"_hash\":\"1052225647a03802366f7025ca51646156e73e82e42d4739b49798d1aa6a8b37\",\"moduleSequenceNumber\":5934}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nimport { NS } from '../../NetscriptDefinitions'\\r\\nimport { threadsWeaken, threadCount, usedRAM } from \\\"/lib/lib-BN1.js\\\"\\r\\n\\r\\nexport async function main(ns:NS) {\\r\\n    // calculate the number of weaken , grow , weaken to get server primed for managed hacking\\r\\n    let host = ns.args[0]\\r\\n\\r\\n    let script = \\\"/bin/host-weaken.js\\\"\\r\\n    let threads = threadsWeaken(ns, host)\\r\\n    let neededRAM = usedRAM(ns, script, threads)\\r\\n    let hostRAM = ns.getServerMaxRam(host)\\r\\n    let maxRAMusage = neededRAM - hostRAM\\r\\n\\r\\n    await ns.scp(script, \\\"home\\\", host)\\r\\n    if (maxRAMusage < 0) ns.exec(script, host, threads, host)\\r\\n    else {\\r\\n        while (maxRAMusage > 0 )\\r\\n\\r\\n    }\\r\\n    \\r\\n\\r\\n    while (neededRAM > 0) {\\r\\n        \\r\\n        ns.exec (script, host, )\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n}\\r\\n\\r\\n/*\\r\\n\\r\\ncopy script to host\\r\\n\\r\\nget script ram cost\\r\\nx = get number of times weaken can be ran on the server\\r\\ny = get number of times weaken is need to be  ran\\r\\n\\r\\nif y is greater than x \\r\\n    figure out how many more time and run full batches then the remainder\\r\\n\\r\\n\\r\\n*/\",\"filename\":\"/bin/host-prime.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/bin/host-prime.js\",\"url\":\"blob:file:///a3881c99-ba0a-499c-ada2-0181c9ba3134\"}],\"ramUsage\":2.8,\"server\":\"home\",\"_hash\":\"d357492bdb96e69de9cac2faadf339926b0455916b2554d7d5be938649cd204f\",\"moduleSequenceNumber\":15104}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) { await ns.weaken(ns.args[0]) }\",\"filename\":\"/bin/host-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"home\",\"_hash\":\"d1ac44ec1cf505a20c27b2d846cea5c4a5f863ad1ae4fd0484911edaf7c818c2\",\"moduleSequenceNumber\":5936}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('sleep')\\r\\n    const target = ns.args[0]\\r\\n    let targetHack = ns.getServer(target)\\r\\n\\r\\n    while (targetHack.numOpenPortsRequired > targetHack.openPortCount) {\\r\\n        if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && targetHack.sshPortOpen == false)   {ns.brutessh(targetHack.hostname)}\\r\\n        if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && targetHack.ftpPortOpen == false)   {ns.ftpcrack(targetHack.hostname)}\\r\\n        if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && targetHack.smtpPortOpen == false) {ns.relaysmtp(targetHack.hostname)}\\r\\n        if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && targetHack.httpPortOpen == false)  {ns.httpworm(targetHack.hostname)}\\r\\n        if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && targetHack.sqlPortOpen == false)  {ns.sqlinject(targetHack.hostname)}\\r\\n        \\r\\n        ns.print(targetHack.hostname + \\\": \\\" + targetHack.openPortCount + \\\" / \\\" + targetHack.numOpenPortsRequired)\\r\\n        await ns.sleep(10e3)\\r\\n    }\\r\\n    ns.nuke(targetHack.hostname)\\r\\n}\",\"filename\":\"/bin/root-wait.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":4,\"server\":\"home\",\"_hash\":\"5041966951f5a4b1616b21a8da9524d626595edbfd0670ac444e429ce70e1a3d\",\"moduleSequenceNumber\":5937}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0]\\r\\n    let p = 0\\r\\n\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(target)\\r\\n        p++\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(target)\\r\\n        p++\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(target)\\r\\n        p++\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(target)\\r\\n        p++\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(target) \\r\\n        p++\\r\\n    }\\r\\n\\r\\n    if (ns.getServerNumPortsRequired(target) <= p) {ns.nuke(target)}\\r\\n    else {ns.tprint(\\\"NOT ENOUGH PORTS OPENED\\\")}\\r\\n}\",\"filename\":\"/bin/root.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/root.js\",\"url\":\"blob:file:///1dcc7a04-d308-4016-a51a-fd02cd893ff2\"}],\"ramUsage\":2.1,\"server\":\"home\",\"_hash\":\"ae13a5565f98358e44f0215efec5e765124a18ea3270f78cd7e1c8924f50ab25\",\"moduleSequenceNumber\":9189}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/self-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.55,\"server\":\"home\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":5939}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* eslint-disable no-label-var */\\r\\n/* eslint-disable no-unused-labels */\\r\\n/** @param {NS} ns **/\\r\\n\\r\\nconst programs = [\\\"BruteSSH.exe\\\",\\r\\n                    \\\"FTPCrack.exe\\\",\\r\\n                    \\\"relaySMTP.exe\\\",\\r\\n                    \\\"HTTPWorm.exe\\\",\\r\\n                    \\\"SQLInject.exe\\\",\\r\\n                    \\\"DeepscanV1.exe\\\",\\r\\n                    \\\"DeepscanV2.exe\\\",\\r\\n                    \\\"ServerProfiler.exe\\\",\\r\\n                    \\\"AutoLink.exe\\\"]\\r\\n\\r\\nconst crimes = [\\\"Heist\\\", \\r\\n                \\\"Grand theft Auto\\\", \\r\\n                \\\"Traffick illegal Arms\\\",\\r\\n                \\\"Bond Forgery\\\",\\r\\n                \\\"Larceny\\\",\\r\\n                \\\"Rob store\\\"]\\r\\n\\r\\n// above are old and need to be worked out\\r\\n\\r\\nconst factionInfo = [{ name: \\\"CyberSec\\\",\\r\\n                    hackReq: 56,\\r\\n                    server: \\\"CSEC\\\" },\\r\\n                  { name: \\\"NiteSec\\\",\\r\\n                    hackReq: 214,\\r\\n                    server: \\\"avmnite-02h\\\" },\\r\\n                  { name: \\\"The Black Hand\\\",\\r\\n                    hackReq: 353,\\r\\n                    server: \\\"I.I.I.I\\\" },\\r\\n                  { name: \\\"BitRunners\\\",\\r\\n                    hackReq: 545,\\r\\n                    server: \\\"run4theh111z\\\" },\\r\\n                  { name: \\\"Daedalus\\\",\\r\\n                    hackReq: 2500,\\r\\n                    server: \\\"the-cave\\\" },]\\r\\n\\r\\nlet factionDetails = function() { name: \\\"\\\"\\r\\n                                  type:  \\\"\\\"\\r\\n                                  hackReq: 0\\r\\n                                  server: \\\"\\\" }\\r\\n\\r\\nconst hackEXE = [{ fileName: \\\"BruteSSH.exe\\\",\\r\\n                       command: 'ns.brutessh',\\r\\n                       unlock: 50,\\r\\n                       price: 500e3,\\r\\n                       createTime: 600e3},\\r\\n                     { fileName: \\\"FTPCrack.exe\\\",\\r\\n                       command: 'ns.ftpcrack',\\r\\n                       unlock: 100,\\r\\n                       price: 1500e3,\\r\\n                       createTime: 1800e3},\\r\\n                     { fileName: \\\"relaySMTP.exe\\\",\\r\\n                       command: 'ns.relaysmtp',\\r\\n                       unlock: 250,\\r\\n                       price: 5e6,\\r\\n                       createTime: 7200e3},\\r\\n                     { fileName: \\\"HTTPWorm.exe\\\",\\r\\n                       command: 'ns.httpworm',\\r\\n                       unlock: 500,\\r\\n                       price: 30e6,\\r\\n                       createTime: 14400e3},\\r\\n                     { fileName: \\\"SQLInject.exe\\\",\\r\\n                       command: 'ns.sqlinject',\\r\\n                       unlock: 750,\\r\\n                       price: 250e6,\\r\\n                       createTime: 28800e3} ]\\r\\n\\r\\nconst hackTools = [{ fileName: \\\"DeepscanV1..exe\\\",\\r\\n                     unlock: 75,\\r\\n                     price: 500e3,\\r\\n                     createTime: 900e3},\\r\\n                   { fileName: \\\"DeepscanV2.exe\\\",\\r\\n                     unlock: 400,\\r\\n                     price: 25e6,\\r\\n                     createTime: 7200e3},\\r\\n                   { fileName: \\\"ServerProfiler.exe\\\",\\r\\n                     unlock: 75,\\r\\n                     price: 500e3,\\r\\n                     createTime: 1800e3},\\r\\n                   { fileName: \\\"AutoLink.exe\\\",\\r\\n                     unlock: 25,\\r\\n                     price: 1e6,\\r\\n                     createTime: 900e3},\\r\\n                   { fileName: \\\"Formulas.exe\\\",\\r\\n                     unlock: 1000,\\r\\n                     price: 5e9,\\r\\n                     createTime: 14400e3}]\\r\\n\\r\\nlet programDetails = function() { fileName: \\\"\\\"\\r\\n                                  command: ''\\r\\n                                  price: 0\\r\\n                                  unlock: 0\\r\\n                                  createTime: 0 }\\r\\n\\r\\n\\r\\n// start with Rob Store and go down skipping Homicide and Assassinate unless you need the body count                                  \\r\\nconst crimeStats = [{ name: \\\"Rob Store\\\",\\r\\n                      karma: 0.5,\\r\\n                      kills: 0,\\r\\n                      money: 400000,\\r\\n                      time: 60000,\\r\\n                      hackXP: 30,\\r\\n                      intXP: 0.375 },\\r\\n                    { name: \\\"Larceny\\\",\\r\\n                      karma: 1.5,\\r\\n                      kills: 0,\\r\\n                      money: 800000,\\r\\n                      time: 90000,\\r\\n                      hackXP: 45,\\r\\n                      intXP: 0.75 },\\r\\n                    { name: \\\"Bond Forgery\\\",\\r\\n                      karma: 0.1,\\r\\n                      kills: 0,\\r\\n                      money: 4500000,\\r\\n                      time: 300000,\\r\\n                      hackXP: 100,\\r\\n                      intXP: 3 },\\r\\n                    { name: \\\"Homicide\\\",\\r\\n                      karma: 3,\\r\\n                      kills: 1,\\r\\n                      money: 45000,\\r\\n                      time: 3000,\\r\\n                      hackXP: 0,\\r\\n                      intXP: 0 },\\r\\n                    { name: \\\"Assassination\\\",\\r\\n                      karma: 10,\\r\\n                      kills: 1,\\r\\n                      money: 12000000,\\r\\n                      time: 300000,\\r\\n                      hackXP: 0,\\r\\n                      intXP: 3.25 },\\r\\n                    { name: \\\"Heist\\\",\\r\\n                      karma: 15,\\r\\n                      kills: 0,\\r\\n                      money: 120000000,\\r\\n                      time: 600000,\\r\\n                      hackXP: 450,\\r\\n                      intXP: 6.5 }]\\r\\n\\r\\nlet crimeDetails = function() { name: \\\"\\\"\\r\\n                                karma: 0\\r\\n                                kills: 0\\r\\n                                money: 0\\r\\n                                time: 0\\r\\n                                hackXP: 0\\r\\n                                intXP: 0 }\\r\\n                \\r\\n\\r\\nexport { programs, crimes, factionInfo, hackEXE, hackTools, crimeStats, programDetails, factionDetails, crimeDetails}\",\"filename\":\"/lib/const.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"7a9c5147decc8566e725c2c290249efc2e67dccd6975d77dbae30f39fa1ab972\",\"moduleSequenceNumber\":15485}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n// import { hackEXE } from \\\"/lib/const.js\\\"\\r\\n\\r\\nexport function threadCount(ns, script, target){\\r\\n    // takes a script and calculates the avaliable RAM and number of threads that can be run\\r\\n\\r\\n    return Math.floor((ns.getServerMaxRam(target) - ns.getServerUsedRam(target)) / ns.getScriptRam(script, \\\"home\\\"))\\r\\n}\\r\\n\\r\\nexport function threadsWeaken(ns, host){\\r\\n    let host = ns.args[0]\\r\\n\\r\\n    return (ns.getServerSecurityLevel(host) - ns.getServerMinSecurityLevel(host)) / .05\\r\\n}\\r\\n\\r\\nexport function usedRAM(ns, script, threads) {\\r\\n    return ns.getScriptRam(script, \\\"home\\\") * threads\\r\\n}\\r\\n\\r\\nexport function spider(ns){\\r\\n    let servers = ns.scan(\\\"home\\\")\\r\\n\\r\\n    for (let server of servers) {\\r\\n        ns.scan(server).forEach(element => { if (!servers.includes(element)) {servers.push(element)} })\\r\\n    }\\r\\n\\r\\n    for (let i of servers) {\\r\\n        if (i == \\\"home\\\" || i == \\\"darkweb\\\" || ns.getPurchasedServers().includes(i) == true) { servers.pop(i) }\\r\\n    }\\r\\n\\r\\n    return servers\\r\\n}\\r\\n\\r\\nexport function getRoot(ns, target) {\\r\\n    // gets root on a target\\r\\n    // returns true if sucessfull, false if there aren't enough ports opened\\r\\n    \\r\\n    if (ns.hasRootAccess(target)) {return true}\\r\\n    else {\\r\\n//        for (let hack of hackEXE) {\\r\\n//            if (ns.fileExists(hack.name, \\\"home\\\")) hack.command(target)\\r\\n//        }\\r\\n\\r\\n        if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))    {ns.brutessh(target)} \\r\\n        if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))    {ns.ftpcrack(target)} \\r\\n        if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))   {ns.relaysmtp(target)}    \\r\\n        if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))    {ns.httpworm(target)} \\r\\n        if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))   {ns.sqlinject(target)}    \\r\\n\\r\\n        try { ns.nuke(target) }\\r\\n        catch (e) { return false }\\r\\n/*\\r\\n        let host = ns.getServer(target)\\r\\n        if (ns.getServerNumPortsRequired(target) <= host.openPortCount) {\\r\\n                ns.nuke(target)\\r\\n                return true\\r\\n        } else {return false}\\r\\n*/\\r\\n    }\\r\\n    return true\\r\\n}\\r\\n\\r\\nexport function checkCanSelfHack(ns, target){\\r\\n    if (target == \\\"home\\\" || target == \\\"darkweb\\\" || ns.getPurchasedServers().includes(target) == true || ns.getServerMaxRam(target) == 0 || ns.getServerMoneyAvailable(target) == 0) { return false}\\r\\n    return true\\r\\n}\\r\\n\\r\\nexport function buildRoute(ns, target){\\r\\n    // builds a list from \\\"home\\\" to the target server\\r\\n    ns.print(target)\\r\\n\\r\\n    return route\\r\\n}\\r\\n\\r\\nexport function purchaseBotnodes(ns, RAM) {\\r\\n    let num = 0\\r\\n    while (num < ns.getPurchasedServerLimit()) {\\r\\n        if (ns.getServerMoneyAvailable('home') > (ns.getPurchasedServerCost(RAM) * 2)) {\\r\\n            ns.purchaseServer(\\\"botnode-\\\" + num, RAM)\\r\\n            s++\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function upgradeBotnode(ns) {\\r\\n    let list = ns.getPurchasedServers()\\r\\n    for (let item of list) {\\r\\n        let RAM = ns.getServerMaxRam(item) * 2\\r\\n        if (ns.getPurchasedServerCost(RAM) * 2 < ns.getServerMoneyAvailable('home')) {\\r\\n            ns.deleteServer(item)\\r\\n            ns.purchaseServer(\\\"botnet-\\\" + item.substring(7), RAM)\\r\\n        }\\r\\n    }    \\r\\n}\\r\\n\\r\\nexport function getHackScore(ns, target) {\\r\\n    // current back of the napkin math | growth * (max money / min security + 1)\\r\\n    \\r\\n    return ns.getServerGrowth(target) * (ns.getServerMaxMoney(target) / (ns.getServerMinSecurityLevel(target) + 1))\\r\\n}\\r\\n\\r\\nexport function bestHackTarget(ns) {\\r\\n    let best = [\\\"\\\", 0]\\r\\n    \\r\\n    for (let target of spider(ns)) {\\r\\n        if (ns.hasRootAccess(target)) {\\r\\n            if (best[1] < getHackScore(ns, target)) best[0] = target\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return best[0]\\r\\n}\\r\\n\\r\\n/* export function chooseHackTarget(ns, list){\\r\\n    // \\r\\n}\\r\\n*/\",\"filename\":\"/lib/lib-BN1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":9.9,\"server\":\"home\",\"_hash\":\"b57fdbe3d770a14d6de77bad7424eea7271682ed6231e074f4b40cbddb02138b\",\"moduleSequenceNumber\":8497}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\nimport { buildRoute } from '/lib/lib-BN1.js'\\r\\nimport { crimes, programs } from '/lib/const.js'\\r\\n\\r\\nexport async function commitCrime(ns) {\\r\\n    // commits crime as long as the chance for success is > 75% or robbing a store\\r\\n    const sucess = .75\\r\\n\\r\\n    for (let crime of crimes) {\\r\\n        if (ns.getCrimeChance(crime) > sucess) {\\r\\n            ns.commitCrime(crime)\\r\\n            // await ns.write(\\\"/data/log-crime.txt\\\", JSON.stringify(ns.getCrimeStats(crime)), \\\"a\\\")\\r\\n            break\\r\\n        }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\\r\\n\\r\\nexport async function purchaseDarkwebPrograms(ns) {\\r\\n    if (ns.getPlayer().tor == false) { ns.purchaseTor() }\\r\\n\\r\\n    for (let program of programs) {\\r\\n        ns.purchaseProgram(program)\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function manualBackdoor(ns, target){\\r\\n    let route = buildRoute(ns, target)\\r\\n    \\r\\n    for (let server of route) { ns.connect(server) }\\r\\n    return ns.installBackdoor(target)\\r\\n}\\r\\n\\r\\nexport function acceptStoryFactions(ns) {\\r\\n    // TODO\\r\\n    return true\\r\\n}\",\"filename\":\"/lib/lib-BN4.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":20.1,\"server\":\"home\",\"_hash\":\"aa3589e2bdde904dcf279f0dfc270829768e2163b29e3eeee455b0c3603ea56b\",\"moduleSequenceNumber\":15487}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n    ns.tail()\\r\\n    \\r\\n    while (true) {\\r\\n        if (ns.isBusy() == false) { \\r\\n            ns.run(\\\"/bin/crime-commit.js\\\")\\r\\n            ns.print(\\\"INITIALIZED: COMMITING CRIME\\\")\\r\\n        }\\r\\n        await ns.sleep(60e3)\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/daemon-crime.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/daemon-crime.js\",\"url\":\"blob:file:///09ac4cc6-829f-4ab6-836e-59b2b04184bc\"}],\"ramUsage\":3.1,\"server\":\"home\",\"_hash\":\"c0481557b440ccb97b79288da298a1a00fd528812ba35820dc35ed2afb109a83\",\"moduleSequenceNumber\":6977}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('sleep')\\r\\n    const nodesWanted = ns.args[0]\\r\\n    let nodesPurchased = 0\\r\\n\\r\\n    while (ns.hacknet.numNodes() < nodesWanted) {\\r\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") > (ns.hacknet.getPurchaseNodeCost(1) * .75)){\\r\\n            ns.hacknet.purchaseNode(1)\\r\\n            ns.tprint(\\\"PURCHASED NODE: \\\" + nodesPurchased)\\r\\n            ns.run(\\\"/bin/hacknet-upgrade.js\\\", 1, nodesPurchased)\\r\\n            nodesPurchased++\\r\\n        }\\r\\n        else {await ns.sleep(60e3)}\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/build-hacknet.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.7,\"server\":\"home\",\"_hash\":\"32d383c398640407b8bd2d21431d40965bd1214f7448c08cf844ffbfb06afa39\",\"moduleSequenceNumber\":5944}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nimport { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns:NS) {\\r\\n    ns.disableLog('ALL')\\r\\n    \\r\\n    // starting target\\r\\n    let target = \\\"n00dles\\\"\\r\\n    let c = 0\\r\\n\\r\\n    while (true) {\\r\\n        ns.clearLog()\\r\\n        await ns.sleep(0)\\r\\n        ns.print(\\\"BOTET CONTROLLER CYCLE: \\\"+ c)\\r\\n\\r\\n        // check the port for a new target\\r\\n        let update = ns.readPort(2)\\r\\n        if (update != target) target = update\\r\\n        ns.print(\\\"CURRENT TARGET: \\\"+ target)\\r\\n\\r\\n        // if security or money is more than 10% off target numbers\\r\\n            // find out the number of batches of weaken / grow needed to get the target to lowest / highest\\r\\n                // check if they're still working\\r\\n            // assign them out to the botnet\\r\\n\\r\\n        ns.print(\\\"STILL PREPARING....\\\")\\r\\n\\r\\n        // -------\\r\\n\\r\\n        ns.print(\\\"MAIN BATCH PROGRESSING\\\")\\r\\n        // assign out batches of hwgw to be ran against the target, staggering by cycle count \\r\\n\\r\\n\\r\\n        ns.print(\\\" : \\\"+ tH)\\r\\n        ns.print(\\\" : \\\"+ tW1)\\r\\n        ns.print(\\\" : \\\"+ tG)\\r\\n        ns.print(\\\" : \\\"+ tW2)\\r\\n    }\\r\\n\\r\\n}\",\"filename\":\"/scripts/hack-manager-v1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":0,\"server\":\"home\",\"_hash\":\"fdc28121461f5b26dbf4662933e6f905615e39bdb8f05dac7a089d4da2e039fe\",\"moduleSequenceNumber\":8230}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\nimport { threadCount } from \\\"/lib/lib-BN1.js\\\"\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    let servers = ns.scan(\\\"home\\\")\\r\\n    let targets = []\\r\\n\\r\\n    for (let server of servers){\\r\\n        // filters scan of servers from home and adds them to targets\\r\\n        if (server != \\\"home\\\" && server != servers.includes(server) && server != \\\"darkweb\\\"){\\r\\n            targets.push(server)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // for debugging, logs the list of targets\\r\\n    ns.print(\\\"\\\\n\\\" + \\\"TARGETS ---- \\\\n\\\" + targets + \\\"\\\\n\\\\n\\\")\\r\\n    \\r\\n    for (let target of targets){\\r\\n        // run waitRoot to get root on the server (waitRoot loops until all port openers have been aquired)\\r\\n        if (ns.hasRootAccess(target) == false) {\\r\\n            if (ns.getServerNumPortsRequired(target) > 0) { \\r\\n                ns.print(\\\"\\\\n PORT OPENERS NEEDED:\\\" + target)\\r\\n            }\\r\\n            else if (ns.getServerNumPortsRequired(target) == 0){ ns.run(\\\"/bin/root.js\\\", 1, target)}\\r\\n\\r\\n            await ns.sleep(5e3)\\r\\n        }\\r\\n\\r\\n        if (ns.hasRootAccess(target)) {\\r\\n            // copies self-hack and runs it as much as it can be on the target server, for debugging logs the self-hack target and it's returned PID\\r\\n            await ns.scp(\\\"/bin/hack-self.js\\\", \\\"home\\\", target)\\r\\n            let threads = threadCount(ns, \\\"/bin/hack-self.js\\\", target)\\r\\n            let PID = ns.exec(\\\"/bin/hack-self.js\\\", target, threads, target)\\r\\n            ns.print(\\\"\\\\n hack-self: \\\" + target +\\\" | t\\\" + threads + \\\" | PID: \\\" + PID)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // hook for build-hacknet\\r\\n    ns.run(\\\"/scripts/hacknet-build.js\\\", 1, 8)\\r\\n}\",\"filename\":\"/scripts/setup-stage1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/lib-BN1.js\",\"url\":\"blob:file:///354cd9b3-bd02-403d-b582-f47196590132\"},{\"filename\":\"/scripts/setup-stage1.js\",\"url\":\"blob:file:///7c2f887f-a329-4bf0-93db-c6d2e5bf2b57\"}],\"ramUsage\":5.05,\"server\":\"home\",\"_hash\":\"39c2264a47b343c27634a4bd9e064d97726656c6270ee4b407e25e46cc30d602\",\"moduleSequenceNumber\":5946}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\nimport { spider, getRoot, checkCanSelfHack, threadCount } from \\\"/lib/lib-BN1.js\\\"\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n    ns.clearPort(1)\\r\\n\\r\\n    // scan through all servers again, attempt root and add servers not able to be rooted to array\\r\\n    let hosts = spider(ns)\\r\\n\\r\\n    for (let host of hosts) {\\r\\n\\r\\n /*     ns.tprint(\\\"    HOST: \\\" + host)\\r\\n        ns.tprint(\\\"    ROOT: \\\" + ns.hasRootAccess(host))\\r\\n        ns.tprint(\\\" RUNNING: \\\" + ns.scriptRunning(\\\"/bin/self-hack.js\\\", host))\\r\\n        ns.tprint(\\\"     CAN: \\\" + checkCanSelfHack(ns, host) + \\\"\\\\n------\\\")\\r\\n*/\\r\\n        // can self-hack and is not running already\\r\\n        if (checkCanSelfHack(ns, host) && !ns.scriptRunning(\\\"/bin/hack-self.js\\\", host)) {\\r\\n            \\r\\n            // verify root\\r\\n            let hasRoot = getRoot(ns, host)\\r\\n            await ns.sleep(0)\\r\\n\\r\\n            if (hasRoot) {\\r\\n                   await ns.scp(\\\"/bin/hack-self.js\\\", \\\"home\\\", host)\\r\\n                   ns.exec(\\\"/bin/hack-self.js\\\", host, threadCount(ns, \\\"/bin/hack-self.js\\\", host), host)\\r\\n                   ns.print(\\\"HACK-SELF: \\\" + host)\\r\\n            } else {\\r\\n                await ns.writePort(1, host)\\r\\n                ns.print(\\\"ROOT FAILED: \\\"+ host)\\r\\n           }\\r\\n        }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/setup-stage2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/const.js\",\"url\":\"blob:file:///5fd170ba-1a4c-4b9a-978b-70dc72f6047c\"},{\"filename\":\"/lib/lib-BN1.js\",\"url\":\"blob:file:///dcb83553-53b1-4aba-b6bc-ae0345636f9a\"},{\"filename\":\"/scripts/setup-stage2.js\",\"url\":\"blob:file:///eb4d2c7f-0b7c-46de-bc84-cb9f0dade4d7\"}],\"ramUsage\":7.7,\"server\":\"home\",\"_hash\":\"9fd98ae163238c64e6c8fa9b89a235bea120dc1c1f0ecf6da3b9e745ea8a03cf\",\"moduleSequenceNumber\":5953}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///591cad81-1727-4ceb-aa11-b1113ed7b624\"}],\"ramUsage\":2.55,\"server\":\"home\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":5948}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tprint(ns.getCrimeStats(\\\"Heist\\\"))\\n}\",\"filename\":\"print.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"print.js\",\"url\":\"blob:file:///796747fb-6d00-4a2a-8307-823a2aa91d65\"}],\"ramUsage\":6.6,\"server\":\"home\",\"_hash\":\"f848297246c49d262dedbef70df4f521bbff89227ee6cf077b7ba9aa29d8b847\",\"moduleSequenceNumber\":5949}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\n// requires BN4.1 or higher\\r\\nvar killCounter = 0\\r\\n\\r\\nexport async function main(ns:NS) {\\r\\n    ns.disableLog('ALL')\\r\\n    // counts the number of people murdered, calcs karma from that >:D\\r\\n\\r\\n    while (ns.break.heart() < 54e3) {\\r\\n        await ns.sleep(0)\\r\\n\\r\\n        if (ns.getCrimeChance(\\\"Homicide\\\") < .50) ns.commitCrime(\\\"Rob Store\\\")\\r\\n        else {\\r\\n            ns.clearLog()\\r\\n            ns.print(\\\"KILL COUNT: \\\" + killCounter + \\\" | Score: \\\" + killCounter * 3)\\r\\n            ns.commitCrime(\\\"Homicide\\\")\\r\\n        }\\r\\n    }\\r\\n    ns.tail()\\r\\n}\",\"filename\":\"/bin/crime-goingPostal.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"8731957e58265485bd6609c59776c24b1673d7f771ce3e34a2cda7f29980ce3c\",\"moduleSequenceNumber\":5950}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"TODO.txt\",\"text\":\"setup / buyTools / \\r\\n\\r\\n==== Current Task\\r\\n\\tCurrent Aug Target > BitRunners starting with Neurolink / (done [Sector-12, Avernum, Tian, Voldhaven, Ishima , New Tokyo, Chongqing])\\r\\n\\r\\n\\r\\n==== Faction Backdoors\\r\\n\\r\\n\\tCyberSec - CSEC | req hack 56\\r\\n\\tNiteSec - avmnite-02h | req hack 214\\r\\n\\tTheBlackHand - I.I.I.I | req hack 353\\r\\n\\tBitRunners - run4theh111z (is more than 10 deep from home, the-hub then nova-med) | req hack 545\\r\\n\\r\\n\\r\\n==== port() list\\r\\n\\tport 1 - for listner / exec waitRoot for getting root on hostname\\r\\n\\tport 2 - for listner / exec builder against hostname\\r\\n\\tport 3 - for listner / sets up selfHack against hostname\\r\\n\\tport 4 - for listner / sets up managedHack against hostname\\r\\n\\tport 5 - to be implemented / takes RAM return from buildBotnet, determines when we're ready for new target and builds a new botnet targeting that one\\r\\n\\r\\n\\r\\n\\tport 20 - spider passes hostnames to this, supposed to build a list of servers \\r\\n\\r\\n\\r\\n==== todo\\r\\n* botnet works to build servers\\r\\n\\tneed to rework removal to get rid of servers only when needed\\r\\n\\tneed to get ports working \\r\\n\\tlistner set up to do managedHack (listner not working)\\r\\n\\r\\n$ refactor all scripts to handle starting from 'new game'\\r\\n\\tstage1 > no existing hacking tools, no port openers\\r\\n\\t\\t\\t\\tautomate bitnodes\\r\\n\\tstage2 > CashRoot aug for one port opener and 1m\\r\\n\\t\\t\\t\\tsetup purchased servers\\r\\n\\tstage3 > \\r\\n\\r\\n>\\tneed to set up new postAug script that works....\\r\\n\\tfigure out the number of threads needed to not hack a server into not having money....\\r\\n\\tstart purchased servers on hacking \\r\\n\\t\\tports Needed 0 - \\\"harakiri-sushi\\\"\\r\\n\\t\\tports Needed 1 - \\\"iron-gym\\\"\\r\\n\\t\\tports Needed 2 - \\\"phantasy\\\" \\r\\n\\t\\tports Needed 3 - \\\"rho-construction\\\"\\r\\n\\r\\n-\\tcoding contracts, run on .cct\\r\\n\\r\\n+\\tfigure out the number and levels for hacknet to make it worth it?\\r\\n\\r\\n__________SCRATCH__________\\r\\n\\r\\n---- SPIDER\\r\\n# spider [startFrom]\\r\\n\\tscan startFrom\\r\\n\\t\\tfor every name in the scan\\t\\r\\n\\t\\t\\tscan that name\\r\\n\\t\\t\\t\\tif there isn't a file already with that name\\r\\n\\t\\t\\t\\t\\tget the server details and write it to a file with that hostname in /targets/port0/ (a folder for every level of port that needs to be unblocked)\\r\\n\\r\\n * not working right, need to figure out the ports evidently\\r\\n\\r\\n---- LISTNER\\r\\n# home listner\\r\\n\\tlistens for hostname on port(1)\\r\\n\\t\\tif root on server and hostname != home or serv-[0-24] \\r\\n\\t\\t\\twrite hostname to port(2)\\r\\n\\t\\tif not root\\r\\n\\t\\t\\texec waitRoot\\r\\n\\tlistens for hostname on port(2)\\r\\n\\t\\tif host has RAM && Money > 0\\r\\n\\t\\t\\texec builder\\r\\n\\t\\t\\t\\t// this takes the server to the max money and lowest security\\r\\n\\tlistens for hostname on port(3)\\r\\n\\t\\tscp selfHack to hostname\\r\\n\\t\\texec for max threads\\r\\n\\tlistens for hostname on port(4)\\r\\n\\t\\tscp managedHack to hostname\\r\\n\\t\\texec managedHack on hostname\\r\\n\\r\\n---- HACKING\\r\\n# builder [targetServer]\\r\\n\\truns as many threads as possible of weaken, grow, weaken at targetServer\\r\\n\\twrites hostname to port(3) when done\\r\\n\\r\\n# finding servers example \\r\\n\\t/** @param {NS} ns */\\r\\n\\texport function getServers(ns) {\\r\\n    \\tconst servers = ['home'];\\r\\n    \\tfor (const server of servers)\\r\\n        \\tns.scan(server)\\r\\n            \\t.filter((x) => !servers.includes(x))\\r\\n            \\t.forEach((x) => servers.push(x));\\r\\n    \\treturn servers;\\r\\n\\t}\\r\\n\\r\\n\\t/** @param {NS} ns */\\r\\n\\texport function getRootedServers(ns) {\\r\\n    \\tfor (const server of getServers(ns).filter((x) => !ns.hasRootAccess(x) && !ns.getPurchasedServers().includes(x) && x != 'home')) {\\r\\n        \\tfor (const tool of [ns.brutessh, ns.ftpcrack, ns.relaysmtp, ns.httpworm, ns.sqlinject, ns.nuke]) {\\r\\n            \\ttry {\\r\\n                \\ttool(server);\\r\\n            \\t}\\r\\n            \\tcatch (e) { }\\r\\n       \\t\\t}\\r\\n    \\t}\\r\\n    \\treturn getServers(ns).filter((x) => ns.hasRootAccess(x));\\r\\n\\t}\\r\\n\\r\\n\\r\\n#\\thackManager\\r\\n\\r\\n\\twhile don't have formulas\\r\\n\\t\\tdo basic maxThread if loop wgh\\r\\n\\t\\r\\n\\tfigure out the needed threads for getting a server to lowestSec and maxMoney and the number of hacks to not nuke it\\r\\n\\t\\texec those as individual scripts to maxamize thread count\\r\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-265675.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[4,5,-4,5,9,10,1,6,4,8,-6,-3,8,4,-6,6,4,-1,3,-8,-1,-6,8,5,-4,4,-4,4,1,-4,8,3,-7,-2,-5,4,-6,-9,-1],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"65.9.5.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":28968850954.5,\"moneyMax\":108633191079.375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1364,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-542938.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[8,11],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-691197.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-10,-1,6,1,4,-5,-4,2,2,-3,-2,4,0,8,-3,-8,-2,-9,2,-6,-2,-3,0],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"64.3.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":34142426676,\"moneyMax\":128034100035,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1296,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-130653.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[186,193,118,154,193,180,123,125,126,107,44,55],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"5.0.2.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\",\"ecorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":18143671382.25,\"moneyMax\":68038767683.4375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":908,\"serverGrowth\":78}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"5.3.4.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":127.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47549.40999986905,\"pid\":260,\"ramUsage\":2.55,\"server\":\"blade\",\"threads\":50,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///d5b361fc-4a2f-43fe-bfe8-d3b7869ecc7e\"}],\"ramUsage\":2.55,\"server\":\"blade\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":10194}}],\"serversOnNetwork\":[\"omnitek\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":12745115932.5,\"moneyMax\":47794184746.875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1070,\"serverGrowth\":72}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"91.3.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":27710895081,\"moneyMax\":103915856553.75,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1067,\"serverGrowth\":88}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"33.5.4.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":13886099898.75,\"moneyMax\":52072874620.3125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1158,\"serverGrowth\":72}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"17.9.4.0\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":510,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\"],\"dataMap\":{},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47579.409999868614,\"pid\":259,\"ramUsage\":2.55,\"server\":\"omnitek\",\"threads\":200,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///d5b361fc-4a2f-43fe-bfe8-d3b7869ecc7e\"}],\"ramUsage\":2.55,\"server\":\"omnitek\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":10191}}],\"serversOnNetwork\":[\"vitalife\",\"blade\",\"nwo\",\"clarkinc\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":12159886453.5,\"moneyMax\":45599574200.625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1068,\"serverGrowth\":98}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-686526.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-5,6,-2,-4,-1,2,0],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-989089.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[2],[6,7],[9,6,6],[1,1,6,1],[4,9,9,3,5],[6,3,4,5,5,1]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-951631.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[48,33,47,39,48,30,7,8,42,18,41],[17,20,14,12,17,31,6,44,39,45,36],[43,13,27,18,33,7,5,23,50,24,15],[1,39,31,11,7,32,47,42,49,5,5],[44,7,43,7,49,2,4,13,31,11,3],[10,4,19,35,9,31,15,35,20,11,49],[18,11,47,33,15,32,46,47,15,37,40],[48,2,6,8,2,10,41,24,33,38,9],[5,42,35,8,5,37,30,27,36,21,32],[17,25,29,1,8,30,46,9,47,46,18],[4,2,44,12,30,41,11,27,22,45,11]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"50.6.6.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":17056134411,\"moneyMax\":63960504041.25,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1057,\"serverGrowth\":84}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"44.5.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\",\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":22182045956.25,\"moneyMax\":83182672335.9375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":978,\"serverGrowth\":92}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"88.7.2.0\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":255,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\"],\"dataMap\":{},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47609.40999986818,\"pid\":258,\"ramUsage\":2.55,\"server\":\"fulcrumtech\",\"threads\":100,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///d5b361fc-4a2f-43fe-bfe8-d3b7869ecc7e\"}],\"ramUsage\":2.55,\"server\":\"fulcrumtech\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":10188}}],\"serversOnNetwork\":[\"run4theh111z\",\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":1157933274,\"moneyMax\":4342249777.5,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":995,\"serverGrowth\":82}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"89.9.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":750000,\"moneyMax\":2812500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1315,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-872122-NiteSec.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[7,11],\"reward\":{\"name\":\"NiteSec\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-266340.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"9543294\",-21],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-837142.cct\",\"type\":\"Total Ways to Sum\",\"data\":13,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"82.4.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":781950003,\"moneyMax\":2932312511.25,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":991,\"serverGrowth\":71}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"49.1.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"infocomm\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":703532352,\"moneyMax\":2638246320,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1045,\"serverGrowth\":55}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"4.4.3.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":630646467.75,\"moneyMax\":2364924254.0625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":950,\"serverGrowth\":72}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"45.8.1.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":127.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47669.409999867305,\"pid\":256,\"ramUsage\":2.55,\"server\":\"helios\",\"threads\":50,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///d5b361fc-4a2f-43fe-bfe8-d3b7869ecc7e\"}],\"ramUsage\":2.55,\"server\":\"helios\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":10182}}],\"serversOnNetwork\":[\"microdyne\",\"kuai-gong\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":488717730.75,\"moneyMax\":1832691490.3125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":831,\"serverGrowth\":70}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"98.6.8.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":15.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47639.40999986774,\"pid\":257,\"ramUsage\":2.55,\"server\":\"vitalife\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///d5b361fc-4a2f-43fe-bfe8-d3b7869ecc7e\"}],\"ramUsage\":2.55,\"server\":\"vitalife\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":10185}}],\"serversOnNetwork\":[\"titan-labs\",\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":536816902.5,\"moneyMax\":2013063384.375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":794,\"serverGrowth\":73}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"55.9.9.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"zb-def\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":705189196.5,\"moneyMax\":2644459486.875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":916,\"serverGrowth\":94}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-734601.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":669943061,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"29.1.1.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":63.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68252.80999956778,\"pid\":167,\"ramUsage\":2.55,\"server\":\"univ-energy\",\"threads\":25,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///d5b361fc-4a2f-43fe-bfe8-d3b7869ecc7e\"}],\"ramUsage\":2.55,\"server\":\"univ-energy\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":8053}}],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":844939701,\"moneyMax\":3168523878.75,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":891,\"serverGrowth\":83}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"60.4.5.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":127.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47699.40999986687,\"pid\":255,\"ramUsage\":2.55,\"server\":\"titan-labs\",\"threads\":50,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///d5b361fc-4a2f-43fe-bfe8-d3b7869ecc7e\"}],\"ramUsage\":2.55,\"server\":\"titan-labs\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":10179}}],\"serversOnNetwork\":[\"taiyang-digital\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":645924337.5,\"moneyMax\":2422216265.625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":808,\"serverGrowth\":72}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-323719.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"())a)((a)a)()aa(\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"41.2.6.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":63.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47729.40999986643,\"pid\":254,\"ramUsage\":2.55,\"server\":\"microdyne\",\"threads\":25,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///d5b361fc-4a2f-43fe-bfe8-d3b7869ecc7e\"}],\"ramUsage\":2.55,\"server\":\"microdyne\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":10176}}],\"serversOnNetwork\":[\"infocomm\",\"stormtech\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":393460179.75,\"moneyMax\":1475475674.0625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":815,\"serverGrowth\":84}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"60.5.3.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":666743958.75,\"moneyMax\":2500289845.3125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":915,\"serverGrowth\":72}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"74.3.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"millenium-fitness\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":590893836,\"moneyMax\":2215851885,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":875,\"serverGrowth\":87}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"54.8.9.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":856828117.5,\"moneyMax\":3213105440.625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":854,\"serverGrowth\":62}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"42.1.9.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":63.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47789.40999986556,\"pid\":252,\"ramUsage\":2.55,\"server\":\"omnia\",\"threads\":25,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///d5b361fc-4a2f-43fe-bfe8-d3b7869ecc7e\"}],\"ramUsage\":2.55,\"server\":\"omnia\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":10170}}],\"serversOnNetwork\":[\"snap-fitness\",\"defcomm\",\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":749683701,\"moneyMax\":2811313878.75,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":879,\"serverGrowth\":61}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"27.4.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":707629696.5,\"moneyMax\":2653611361.875,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":790,\"serverGrowth\":68}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"81.3.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":531629461.5,\"moneyMax\":1993610480.625,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":823,\"serverGrowth\":75}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-474810.cct\",\"type\":\"Total Ways to Sum\",\"data\":19,\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-648689.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"882455120\",15],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"2.2.7.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":63.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47759.409999865995,\"pid\":253,\"ramUsage\":2.55,\"server\":\"solaris\",\"threads\":25,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///d5b361fc-4a2f-43fe-bfe8-d3b7869ecc7e\"}],\"ramUsage\":2.55,\"server\":\"solaris\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":10173}}],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":606890846.25,\"moneyMax\":2275840673.4375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":836,\"serverGrowth\":80}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-725015.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[2,14],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-162111.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,1,0,0,1,0,1,0,1,0,0],[0,0,1,0,1,0,0,0,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"44.0.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"galactic-cyber\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":1134668872.5,\"moneyMax\":4255008271.875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":858,\"serverGrowth\":64}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"6.0.9.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":30.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68342.80999956647,\"pid\":165,\"ramUsage\":2.55,\"server\":\"global-pharm\",\"threads\":12,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///d5b361fc-4a2f-43fe-bfe8-d3b7869ecc7e\"}],\"ramUsage\":2.55,\"server\":\"global-pharm\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":8047}}],\"serversOnNetwork\":[\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1246424157,\"moneyMax\":4674090588.75,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":788,\"serverGrowth\":85}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-362607.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,1,1,1,0,0,0],[1,0,0,0,0,0,0,0,0,1],[0,0,0,0,1,0,0,0,0,1],[0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0],[0,0,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,0,0,1],[0,0,0,0,1,0,1,0,0,0],[0,0,1,0,0,0,1,1,0,0],[0,1,0,1,1,0,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"44.5.7.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":919104759.75,\"moneyMax\":3446642849.0625,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":839,\"serverGrowth\":81}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"68.6.0.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":1091267494.5,\"moneyMax\":4092253104.375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":825,\"serverGrowth\":73}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"71.0.4.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":15.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68282.80999956734,\"pid\":166,\"ramUsage\":2.55,\"server\":\"unitalife\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///d5b361fc-4a2f-43fe-bfe8-d3b7869ecc7e\"}],\"ramUsage\":2.55,\"server\":\"unitalife\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":8050}}],\"serversOnNetwork\":[\"snap-fitness\",\"univ-energy\",\"solaris\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":773530311.75,\"moneyMax\":2900738669.0625,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":801,\"serverGrowth\":70}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-271653.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-2,6,-5,-6,-1],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"18.4.9.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":30.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68432.80999956516,\"pid\":162,\"ramUsage\":2.55,\"server\":\"lexo-corp\",\"threads\":12,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///d5b361fc-4a2f-43fe-bfe8-d3b7869ecc7e\"}],\"ramUsage\":2.55,\"server\":\"lexo-corp\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":7988}}],\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":588322471.5,\"moneyMax\":2206209268.125,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":735,\"serverGrowth\":58}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"35.5.6.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":30.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":86825.20999929751,\"pid\":76,\"ramUsage\":2.55,\"server\":\"rho-construction\",\"threads\":12,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///d5b361fc-4a2f-43fe-bfe8-d3b7869ecc7e\"}],\"ramUsage\":2.55,\"server\":\"rho-construction\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":6493}}],\"serversOnNetwork\":[\"syscore\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":389525525.25,\"moneyMax\":1460720719.6875,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":517,\"serverGrowth\":51}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"68.1.2.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":127.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68402.8099995656,\"pid\":163,\"ramUsage\":2.55,\"server\":\"alpha-ent\",\"threads\":50,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///d5b361fc-4a2f-43fe-bfe8-d3b7869ecc7e\"}],\"ramUsage\":2.55,\"server\":\"alpha-ent\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":7991}}],\"serversOnNetwork\":[\"syscore\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":457640967,\"moneyMax\":1716153626.25,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":505,\"serverGrowth\":58}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"77.4.6.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":15.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68372.80999956603,\"pid\":164,\"ramUsage\":2.55,\"server\":\"aevum-police\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///d5b361fc-4a2f-43fe-bfe8-d3b7869ecc7e\"}],\"ramUsage\":2.55,\"server\":\"aevum-police\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":8044}}],\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":250962841.5,\"moneyMax\":941110655.625,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":426,\"serverGrowth\":33}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"0.0.0.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":15.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":86885.20999929664,\"pid\":74,\"ramUsage\":2.55,\"server\":\"rothman-uni\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///d5b361fc-4a2f-43fe-bfe8-d3b7869ecc7e\"}],\"ramUsage\":2.55,\"server\":\"rothman-uni\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":6490}}],\"serversOnNetwork\":[\"comptek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":51,\"minDifficulty\":17,\"moneyAvailable\":169881677.25,\"moneyMax\":637056289.6875,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":420,\"serverGrowth\":36}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"82.4.3.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":127.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47819.40999986512,\"pid\":251,\"ramUsage\":2.55,\"server\":\"zb-institute\",\"threads\":50,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///d5b361fc-4a2f-43fe-bfe8-d3b7869ecc7e\"}],\"ramUsage\":2.55,\"server\":\"zb-institute\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":10167}}],\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":718966758,\"moneyMax\":2696125342.5,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":756,\"serverGrowth\":83}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-817025.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[30],[14]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-891865.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[102,15,23,41,31,54,181,65,151,30,51,106,129,76],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"23.0.4.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":63.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":86945.40999929576,\"pid\":72,\"ramUsage\":2.55,\"server\":\"summit-uni\",\"threads\":25,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///d5b361fc-4a2f-43fe-bfe8-d3b7869ecc7e\"}],\"ramUsage\":2.55,\"server\":\"summit-uni\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":6484}}],\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":52,\"minDifficulty\":17,\"moneyAvailable\":171468569.25,\"moneyMax\":643007134.6875,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":472,\"serverGrowth\":44}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-852536.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[2,6,-10,-7,5,6,-7,-10,-8,10,-6,1,6,10,0,-5,3,4,-6,10,8,10,-3,8],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"48.7.9.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\",\"lexo-corp\",\"rho-construction\",\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":383579322.75,\"moneyMax\":1438422460.3125,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":647,\"serverGrowth\":65}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"43.3.9.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":15.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":86915.4099992962,\"pid\":73,\"ramUsage\":2.55,\"server\":\"catalyst\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///d5b361fc-4a2f-43fe-bfe8-d3b7869ecc7e\"}],\"ramUsage\":2.55,\"server\":\"catalyst\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":6487}}],\"serversOnNetwork\":[\"avmnite-02h\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":335630211.75,\"moneyMax\":1258613294.0625,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":421,\"serverGrowth\":27}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-562471-NewTokyo.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[10,[71,185,117]],\"reward\":{\"name\":\"New Tokyo\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-650962.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[43,44,22,18,26,28,15,50,1,17,19],[25,44,38,44,20,46,27,13,47,29,13],[39,45,50,46,11,10,1,10,6,22,42],[27,36,10,19,44,14,29,23,15,16,15],[36,4,26,35,16,12,11,48,26,3,8],[43,19,2,46,6,22,2,38,34,45,35],[16,26,44,2,12,39,7,32,20,29,24],[25,22,45,26,35,9,42,29,18,48,2],[9,23,16,40,12,48,17,32,2,46,16],[40,2,24,32,18,46,7,50,14,13,32],[49,14,7,33,47,20,41,49,4,33,48],[44,3,21,29,40,38,34,14,9,16,26]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"35.1.5.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":7.65,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[0,0,0,222]},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2088.2579014578846,\"onlineMoneyMade\":0,\"onlineRunningTime\":89765.60999925472,\"pid\":47,\"ramUsage\":2.55,\"server\":\"the-hub\",\"threads\":3,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///d5b361fc-4a2f-43fe-bfe8-d3b7869ecc7e\"}],\"ramUsage\":2.55,\"server\":\"the-hub\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":6267}}],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":39,\"hackDifficulty\":27.900000000000105,\"minDifficulty\":13,\"moneyAvailable\":142272411,\"moneyMax\":533521541.25,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":310,\"serverGrowth\":48}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-471260.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[51,27,59,117,77,66,194,78],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-275731.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(())))a)))))\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"22.1.1.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"rothman-uni\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":181806786.75,\"moneyMax\":681775450.3125,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":354,\"serverGrowth\":54}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"37.4.7.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":127.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,0,350]},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5943.65094863358,\"onlineMoneyMade\":0,\"onlineRunningTime\":87005.40999929489,\"pid\":70,\"ramUsage\":2.55,\"server\":\"netlink\",\"threads\":50,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///d5b361fc-4a2f-43fe-bfe8-d3b7869ecc7e\"}],\"ramUsage\":2.55,\"server\":\"netlink\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":6438}}],\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":57.5,\"minDifficulty\":25,\"moneyAvailable\":206250000,\"moneyMax\":773437500,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":384,\"serverGrowth\":45}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-154534.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[23,91,118,200,106,89,162,72,66,135,74,14,177,199,131,187,12,60,99,120,60,193,15,170],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"2.9.2.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\",\"zb-institute\",\"summit-uni\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":53198754.75,\"moneyMax\":199495330.3125,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":281,\"serverGrowth\":63}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-703604-NiteSec.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[182,59,43,121,17,165,3,19,44,152,34,54,18,193,83],\"reward\":{\"name\":\"NiteSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"72.7.8.2\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":2.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[347322,1623,1633,3255]},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9183.275860058673,\"onlineMoneyMade\":347322,\"onlineRunningTime\":93156.00999920539,\"pid\":6,\"ramUsage\":2.55,\"server\":\"n00dles\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///d5b361fc-4a2f-43fe-bfe8-d3b7869ecc7e\"}],\"ramUsage\":2.55,\"server\":\"n00dles\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":5958}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1.004,\"minDifficulty\":1,\"moneyAvailable\":196875,\"moneyMax\":196875,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-24472.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"()()a))))\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"16.0.7.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":15.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[11163720,1860,15024,17022]},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":112033.83202453483,\"onlineMoneyMade\":11163720,\"onlineRunningTime\":93156.00999920539,\"pid\":7,\"ramUsage\":2.55,\"server\":\"foodnstuff\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///d5b361fc-4a2f-43fe-bfe8-d3b7869ecc7e\"}],\"ramUsage\":2.55,\"server\":\"foodnstuff\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":5961}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3.016,\"minDifficulty\":3,\"moneyAvailable\":5625000,\"moneyMax\":5625000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-456292.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[24,34],[18,21],[10,15],[22,32],[7,13],[24,29],[25,30],[20,23],[24,30],[24,26]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"82.7.5.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":15.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[23140890,3390,13032,16560]},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":108980.70689061483,\"onlineMoneyMade\":23140890,\"onlineRunningTime\":93156.00999920539,\"pid\":8,\"ramUsage\":2.55,\"server\":\"sigma-cosmetics\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///d5b361fc-4a2f-43fe-bfe8-d3b7869ecc7e\"}],\"ramUsage\":2.55,\"server\":\"sigma-cosmetics\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":5964}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3.024,\"minDifficulty\":3,\"moneyAvailable\":6463441.008977119,\"moneyMax\":6468750,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"57.6.6.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":15.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[31195662,4356,10134,14694]},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":127136.35959138842,\"onlineMoneyMade\":31195662,\"onlineRunningTime\":93156.00999920539,\"pid\":9,\"ramUsage\":2.55,\"server\":\"joesguns\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///d5b361fc-4a2f-43fe-bfe8-d3b7869ecc7e\"}],\"ramUsage\":2.55,\"server\":\"joesguns\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":5967}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":6988164,\"moneyMax\":7031250,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"20.8.2.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":30.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[72039420,4260,4968,9564]},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":121407.97012068424,\"onlineMoneyMade\":72039420,\"onlineRunningTime\":93156.00999920539,\"pid\":13,\"ramUsage\":2.55,\"server\":\"zer0\",\"threads\":12,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///d5b361fc-4a2f-43fe-bfe8-d3b7869ecc7e\"}],\"ramUsage\":2.55,\"server\":\"zer0\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":5979}}],\"serversOnNetwork\":[\"n00dles\",\"silver-helix\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8.024,\"minDifficulty\":8,\"moneyAvailable\":20885430,\"moneyMax\":21093750,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"43.7.7.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":15.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[37260882,4974,6114,11346]},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":121334.19838601892,\"onlineMoneyMade\":37260882,\"onlineRunningTime\":93156.00999920539,\"pid\":14,\"ramUsage\":2.55,\"server\":\"nectar-net\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///d5b361fc-4a2f-43fe-bfe8-d3b7869ecc7e\"}],\"ramUsage\":2.55,\"server\":\"nectar-net\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":5982}}],\"serversOnNetwork\":[\"hong-fang-tea\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7.012,\"minDifficulty\":7,\"moneyAvailable\":7689177,\"moneyMax\":7734375,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-978280.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"154001531248\",-46],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"95.0.8.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":30.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[69380796,5652,6792,12780]},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":162962.67764602648,\"onlineMoneyMade\":69380796,\"onlineRunningTime\":93156.00999920539,\"pid\":16,\"ramUsage\":2.55,\"server\":\"neo-net\",\"threads\":12,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///d5b361fc-4a2f-43fe-bfe8-d3b7869ecc7e\"}],\"ramUsage\":2.55,\"server\":\"neo-net\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":5988}}],\"serversOnNetwork\":[\"CSEC\",\"the-hub\",\"comptek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8.024,\"minDifficulty\":8,\"moneyAvailable\":13912836,\"moneyMax\":14062500,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"90.8.8.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":63.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[282335000,3825,4925,9125]},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":134290.29795065924,\"onlineMoneyMade\":282335000,\"onlineRunningTime\":89885.60999925298,\"pid\":43,\"ramUsage\":2.55,\"server\":\"silver-helix\",\"threads\":25,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///d5b361fc-4a2f-43fe-bfe8-d3b7869ecc7e\"}],\"ramUsage\":2.55,\"server\":\"silver-helix\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":6258}}],\"serversOnNetwork\":[\"zer0\",\"johnson-ortho\",\"crush-fitness\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10.05,\"minDifficulty\":10,\"moneyAvailable\":124608425,\"moneyMax\":126562500,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"46.9.6.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":15.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[23784582,2934,7290,10422]},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":89941.65570599261,\"onlineMoneyMade\":23784582,\"onlineRunningTime\":93156.00999920539,\"pid\":10,\"ramUsage\":2.55,\"server\":\"hong-fang-tea\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///d5b361fc-4a2f-43fe-bfe8-d3b7869ecc7e\"}],\"ramUsage\":2.55,\"server\":\"hong-fang-tea\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":5970}}],\"serversOnNetwork\":[\"home\",\"nectar-net\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5.012,\"minDifficulty\":5,\"moneyAvailable\":8388468,\"moneyMax\":8437500,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-881805.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(a)(()a\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"31.9.3.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":15.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[45749244,4374,5088,9666]},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":83328.68305454838,\"onlineMoneyMade\":45749244,\"onlineRunningTime\":93156.00999920539,\"pid\":11,\"ramUsage\":2.55,\"server\":\"harakiri-sushi\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///d5b361fc-4a2f-43fe-bfe8-d3b7869ecc7e\"}],\"ramUsage\":2.55,\"server\":\"harakiri-sushi\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":5973}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":11186406,\"moneyMax\":11250000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-969154-TianDiHui.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[5,1,-10,-1,4,10,1,-4,-7,4,2,0,6,-7,5,4,6,8,4,-8,10,-1,7,7,-2,-10,-8,-3,-6,-9,-1,6,-1,-3],\"reward\":{\"name\":\"Tian Di Hui\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"87.6.0.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":30.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[183525792,3672,4500,8424]},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":89759.39896649508,\"onlineMoneyMade\":183525792,\"onlineRunningTime\":89855.60999925341,\"pid\":44,\"ramUsage\":2.55,\"server\":\"phantasy\",\"threads\":12,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///d5b361fc-4a2f-43fe-bfe8-d3b7869ecc7e\"}],\"ramUsage\":2.55,\"server\":\"phantasy\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":6261}}],\"serversOnNetwork\":[\"zer0\",\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7.024,\"minDifficulty\":7,\"moneyAvailable\":67500000,\"moneyMax\":67500000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"7.6.6.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":30.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[133083564,5832,6780,12804]},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":110721.55000597733,\"onlineMoneyMade\":133083564,\"onlineRunningTime\":93156.00999920539,\"pid\":15,\"ramUsage\":2.55,\"server\":\"max-hardware\",\"threads\":12,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///d5b361fc-4a2f-43fe-bfe8-d3b7869ecc7e\"}],\"ramUsage\":2.55,\"server\":\"max-hardware\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":5985}}],\"serversOnNetwork\":[\"hong-fang-tea\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5.024,\"minDifficulty\":5,\"moneyAvailable\":27842640,\"moneyMax\":28125000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"97.8.5.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":30.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[61153704,732,1776,2916]},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":43150.815249820276,\"onlineMoneyMade\":61153704,\"onlineRunningTime\":89825.60999925385,\"pid\":45,\"ramUsage\":2.55,\"server\":\"omega-net\",\"threads\":12,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///d5b361fc-4a2f-43fe-bfe8-d3b7869ecc7e\"}],\"ramUsage\":2.55,\"server\":\"omega-net\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":6264}}],\"serversOnNetwork\":[\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":32,\"hackDifficulty\":11.024,\"minDifficulty\":11,\"moneyAvailable\":173386092.5625,\"moneyMax\":174426336.5625,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":196,\"serverGrowth\":35}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"51.6.0.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":42,\"hackDifficulty\":42,\"minDifficulty\":14,\"moneyAvailable\":37183325.25,\"moneyMax\":139437469.6875,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":272,\"serverGrowth\":30}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-271066.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":70483375,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"81.5.0.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":30.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[82539756,2016,3684,6096]},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":88620.32753152281,\"onlineMoneyMade\":82539756,\"onlineRunningTime\":93156.00999920539,\"pid\":12,\"ramUsage\":2.55,\"server\":\"iron-gym\",\"threads\":12,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///d5b361fc-4a2f-43fe-bfe8-d3b7869ecc7e\"}],\"ramUsage\":2.55,\"server\":\"iron-gym\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":5976}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10.024,\"minDifficulty\":10,\"moneyAvailable\":55748748,\"moneyMax\":56250000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"18.3.8.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":127.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":86765.20999929839,\"pid\":77,\"ramUsage\":2.55,\"server\":\"millenium-fitness\",\"threads\":50,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///d5b361fc-4a2f-43fe-bfe8-d3b7869ecc7e\"}],\"ramUsage\":2.55,\"server\":\"millenium-fitness\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":6496}}],\"serversOnNetwork\":[\"catalyst\",\"galactic-cyber\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":52,\"minDifficulty\":17,\"moneyAvailable\":187500000,\"moneyMax\":703125000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":483,\"serverGrowth\":33}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-330233.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"1304\",7],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-257673.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[78,26,188,81,89,20,145,66,50,198,120,77,161,174,158,65,79,143,170,197,126,104,81,157,122,9,81,26,179,29,127,60,33,152,4,119,163,111,62,179,129,88,33,122,74,43,11,32,187,149],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"20.3.0.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":30.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{},\"filename\":\"/bin/hack-self.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47849.409999864685,\"pid\":250,\"ramUsage\":2.55,\"server\":\"powerhouse-fitness\",\"threads\":12,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hack-self.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hack-self.js\",\"url\":\"blob:file:///d5b361fc-4a2f-43fe-bfe8-d3b7869ecc7e\"}],\"ramUsage\":2.55,\"server\":\"powerhouse-fitness\",\"_hash\":\"27eb0c601714cb9bb13b224dc6b9b459faa517c2cb4956be9ca6012b74979f80\",\"moduleSequenceNumber\":10164}}],\"serversOnNetwork\":[\"omnitek\",\"megacorp\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":675000000,\"moneyMax\":2531250000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":953,\"serverGrowth\":51}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"45.2.4.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"millenium-fitness\",\"omnia\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":53,\"minDifficulty\":18,\"moneyAvailable\":337500000,\"moneyMax\":1265625000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":763,\"serverGrowth\":41}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-258999.cct\",\"type\":\"Array Jumping Game\",\"data\":[4,1,8,2,8,4,0,1,7,2,7,0,9,7,10,0,4,9,2,0,1,1,0,0],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"27.6.1.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":541,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-151039.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[5,[70,77,14,107,51,64,143,136,173,59]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"38.4.1.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"comptek\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":350,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":true,\"ip\":\"66.5.6.5\",\"isConnectedTo\":true,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":215,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"53.4.0.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":550,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"7.0.2.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"iron-gym\",\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":54,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-257253.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[26,5],[29,8],[36,26],[39,44],[37,48],[26,32],[6,40],[24,44],[13,22],[23,50]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"98.3.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"76.0.4.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":9000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"44.3.1.2\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":4,\"rolloverRep\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":0.0004,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":25.3547,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":123871.0702295986}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":4.8257,\"isBanned\":false,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"New Tokyo\",\"playerReputation\":4212.005461170705}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":48.0816,\"isBanned\":true,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":3.2978,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":7.2749,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":11870.771504248843}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":101.2253,\"isBanned\":false,\"isMember\":false,\"name\":\"CyberSec\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{\"own\":\"run /hack/own.js\",\"drain\":\"run /hack/drain.js -t 256\",\"buyTools\":\"buy BruteSSH.exe; buy FTPCrack.exe; buy relaySMTP.exe; buy HTTPWorm.exe; buy SQLInject.exe; buy ServerProfiler.exe; buy DeepscanV1.exe; buy DeepscanV2.exe; buy AutoLink.exe\"}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":20,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":600,\"CodeInstructionRunTime\":10,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":100,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":2,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":true,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":true,\"UseIEC60027_2\":false,\"MonacoTheme\":\"vs-dark\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#FFFFFF\",\"primary\":\"#C3C7CC\",\"primarydark\":\"#72767D\",\"successlight\":\"#858C23\",\"success\":\"#59731F\",\"successdark\":\"#2F5B1C\",\"errorlight\":\"#FF5258\",\"error\":\"#ED4245\",\"errordark\":\"#E12B31\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#FFBA52\",\"warning\":\"#EAA741\",\"warningdark\":\"#D59022\",\"infolight\":\"#99A1F7\",\"info\":\"#848DED\",\"infodark\":\"#6A75E8\",\"welllight\":\"#202225\",\"well\":\"#36393F\",\"white\":\"#fff\",\"black\":\"#202225\",\"hp\":\"#ED4245\",\"money\":\"#F1C40F\",\"hack\":\"#2ECC71\",\"combat\":\"#faffdf\",\"cha\":\"#9B59B6\",\"int\":\"#5865F2\",\"rep\":\"#faffdf\",\"disabled\":\"#1ABC9C\",\"backgroundprimary\":\"#36393F\",\"backgroundsecondary\":\"#2F3136\",\"button\":\"#2F3136\"}}","VersionSave":"9","AllGangsSave":"","LastExportBonus":"1641527558624","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}