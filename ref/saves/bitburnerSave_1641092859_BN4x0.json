{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":67,\"hp\":15,\"max_hp\":15,\"strength\":53,\"defense\":53,\"dexterity\":53,\"agility\":53,\"charisma\":74,\"intelligence\":0,\"hacking_chance_mult\":1.16,\"hacking_speed_mult\":1.16,\"hacking_money_mult\":1.16,\"hacking_grow_mult\":1.16,\"hacking_exp\":2693.77328475482,\"strength_exp\":1670.3999999999999,\"defense_exp\":1670.3999999999999,\"dexterity_exp\":1670.3999999999999,\"agility_exp\":1670.3999999999999,\"charisma_exp\":3340.7999999999997,\"intelligence_exp\":0,\"hacking_mult\":1.16,\"strength_mult\":1.16,\"defense_mult\":1.16,\"dexterity_mult\":1.16,\"agility_mult\":1.16,\"charisma_mult\":1.16,\"hacking_exp_mult\":1.16,\"strength_exp_mult\":1.16,\"defense_exp_mult\":1.16,\"dexterity_exp_mult\":1.16,\"agility_exp_mult\":1.16,\"charisma_exp_mult\":1.16,\"company_rep_mult\":1.16,\"faction_rep_mult\":1.16,\"money\":124136.93766882579,\"city\":\"Sector-12\",\"location\":\"Carmichael Security\",\"jobs\":{\"Joe's Guns\":\"Employee\"},\"companyName\":\"Joe's Guns\",\"currentServer\":\"home\",\"purchasedServers\":[],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":0.087,\"onlineTimeSeconds\":34243.7999999798,\"ram\":1,\"totalMoneyGenerated\":2979.2106000015715,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":0.087,\"onlineTimeSeconds\":1739.6000000002584,\"ram\":1,\"totalMoneyGenerated\":151.3451999999965,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":0.087,\"onlineTimeSeconds\":1739.6000000002584,\"ram\":1,\"totalMoneyGenerated\":151.3451999999965,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":0.087,\"onlineTimeSeconds\":1739.6000000002584,\"ram\":1,\"totalMoneyGenerated\":151.3451999999965,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":0.087,\"onlineTimeSeconds\":1739.6000000002584,\"ram\":1,\"totalMoneyGenerated\":151.3451999999965,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":0.087,\"onlineTimeSeconds\":1739.6000000002584,\"ram\":1,\"totalMoneyGenerated\":151.3451999999965,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":0.087,\"onlineTimeSeconds\":1739.6000000002584,\"ram\":1,\"totalMoneyGenerated\":151.3451999999965,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":0.087,\"onlineTimeSeconds\":1739.6000000002584,\"ram\":1,\"totalMoneyGenerated\":151.3451999999965,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":0.087,\"onlineTimeSeconds\":1739.6000000002584,\"ram\":1,\"totalMoneyGenerated\":151.3451999999965,\"name\":\"hacknet-node-8\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"CyberSec\"],\"factionInvitations\":[],\"queuedAugmentations\":[],\"augmentations\":[],\"sourceFiles\":[{\"lvl\":1,\"n\":1}],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":1.16,\"crime_success_mult\":1.16,\"isWorking\":true,\"focus\":false,\"workType\":\"Working for Faction\",\"workCostMult\":3,\"workExpMult\":2,\"currentWorkFactionName\":\"CyberSec\",\"currentWorkFactionDescription\":\"carrying out hacking contracts\",\"workHackExpGainRate\":0.087,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0.04483846153846153,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":60.16920000000072,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":30.67887692307681,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":50,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":172600,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.16,\"hacknet_node_money_mult\":1.16,\"hacknet_node_purchase_cost_mult\":0.84,\"hacknet_node_ram_cost_mult\":0.84,\"hacknet_node_core_cost_mult\":0.84,\"hacknet_node_level_cost_mult\":0.84,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":4,\"lastUpdate\":1641092859156,\"totalPlaytime\":779510000,\"playtimeSinceLastAug\":34358200,\"playtimeSinceLastBitnode\":34618400,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":1316,\"hacknet\":4189.972200011621,\"hacknet_expenses\":-249857.03453093916,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":123136.93766882521,\"work\":367488,\"servers\":0,\"other\":0,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":1316,\"hacknet\":4206.7806000111905,\"hacknet_expenses\":-250697.03453093916,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":122313.74606882519,\"work\":367488,\"servers\":0,\"other\":0,\"augmentations\":0}},\"scriptProdSinceLastAug\":1316,\"exploits\":[],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":true,\"ip\":\"57.1.5.1\",\"isConnectedTo\":true,\"maxRam\":32,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"fl1ght.exe\",\"BruteSSH.exe\"],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// Defines the \\\"target server\\\", which is the server\\r\\nvar target = \\\"joesguns\\\";\\r\\n\\r\\n// Defines how much money a server should have before we hack it\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\r\\n\\r\\n// Defines the maximum security level the target server can have. \\r\\n// If the target's security level is higher than this, we'll weaken it before doing anything else\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\n// If we have the BruteSSH.exe program, use it to open the SSH Port on the target server\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n    brutessh(target);\\r\\n}\\r\\n\\r\\n// Get root access to target server\\r\\nnuke(target);\\r\\n\\r\\n// Infinite loop that continously hacks/grows/weakens the target server\\r\\nwhile(true) {\\r\\n    if (getServerSecurityLevel(target) > securityThresh) {\\r\\n        // If the server's security level is above our threshold, weaken it\\r\\n        weaken(target);\\r\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n        // If the server's money is less than our threshold, grow it\\r\\n        grow(target);\\r\\n    } else {\\r\\n        // Otherwise, hack it\\r\\n        hack(target);\\r\\n    }\\r\\n}\",\"filename\":\"/postAug/old/early-hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"home\",\"_hash\":\"94da2d43bcabcb9018d05a248c5509c0d7e01c288b056c17c41930f61b9674f3\",\"moduleSequenceNumber\":128}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// How much RAM each purchased server will have. In this case, it'll be 8GB.\\r\\nvar ram = 8;\\r\\n\\r\\n// Iterator we'll use for our loop\\r\\nvar i = 0;\\r\\n\\r\\n// Continuously try to purchase servers until we've reached the maximum amount of servers\\r\\nwhile (i < getPurchasedServerLimit()) {\\r\\n    // Check if we have enough money to purchase a server\\r\\n    if (getServerMoneyAvailable(\\\"home\\\") > getPurchasedServerCost(ram)) {\\r\\n        // If we have enough money, then:\\r\\n        //  1. Purchase the server\\r\\n        //  2. Copy our hacking script onto the newly-purchased server\\r\\n        //  3. Run our hacking script on the newly-purchased server with 3 threads\\r\\n        //  4. Increment our iterator to indicate that we've bought a new server\\r\\n        var hostname = purchaseServer(\\\"pserv-\\\" + i, ram);\\r\\n        scp(\\\"/postAug/early-hack.script\\\", hostname);\\r\\n        exec(\\\"/postAug/early-hack.script\\\", hostname, 3);\\r\\n        ++i;\\r\\n    }\\r\\n}\",\"filename\":\"/postAug/old/purchase-8gb.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.15,\"server\":\"home\",\"_hash\":\"3e3568a4692b5e137d3b7931994b26c9e2b832763e21a26f9146fe33e17de9de\",\"moduleSequenceNumber\":129}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Array of all servers that don't need any ports opened to gain root access. These have 16 GB of RAM\\r\\nvar servers0Port = [\\\"n00dles\\\",\\r\\n                    \\\"sigma-cosmetics\\\",\\r\\n                    \\\"joesguns\\\",\\r\\n                    \\\"nectar-net\\\",\\r\\n                    \\\"hong-fang-tea\\\",\\r\\n                    \\\"harakiri-sushi\\\"];\\r\\n\\r\\n// Array of all servers that only need 1 port opened to gain root access. These have 32 GB of RAM\\r\\nvar servers1Port = [\\\"neo-net\\\",\\r\\n                    \\\"zer0\\\",\\r\\n                    \\\"max-hardware\\\",\\r\\n                    \\\"iron-gym\\\"];\\r\\n\\r\\n// Copy our scripts onto each server that requires 0 ports to gain root access. Then use nuke() to gain admin access and run the scripts.\\r\\nfor (var i = 0; i < servers0Port.length; ++i) {\\r\\n    var serv = servers0Port[i];\\r\\n\\r\\n    scp(\\\"/postAug/early-hack.script\\\", serv);\\r\\n    nuke(serv);\\r\\n    exec(\\\"/postAug/early-hack.script\\\", serv, 6);\\r\\n}\\r\\n\\r\\n// Setup purchase of 8GB servers to fill out avaliable servers. These also run the early-hack script.\\r\\nexec(\\\"purchase-8gb.script\\\", \\\"home\\\", 1);\\r\\n\\r\\n// Wait until we acquire the \\\"BruteSSH.exe\\\" program\\r\\nwhile (!fileExists(\\\"BruteSSH.exe\\\")) {\\r\\n    sleep(60000);\\r\\n}\\r\\n\\r\\n// Copy our scripts onto each server that requires 1 port to gain root access. Then use brutessh() and nuke() to gain admin access and run the scripts.\\r\\nfor (var i = 0; i < servers1Port.length; ++i) {\\r\\n    var serv = servers1Port[i];\\r\\n\\r\\n    scp(\\\"/postAug/early-hack.script\\\", serv);\\r\\n    brutessh(serv);\\r\\n    nuke(serv);\\r\\n    exec(\\\"/postAug/early-hack.script\\\", serv, 12);\\r\\n}\",\"filename\":\"/postAug/old/postAug.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.7,\"server\":\"home\",\"_hash\":\"cd12014c024ca1ee66dfc4e44a77b333fd298edf51229ca0cd4530ea50149431\",\"moduleSequenceNumber\":130}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let targetHack = ns.args[0];\\n    let hostServer = ns.getHostname();\\n\\n    // Call own.ns to get root on the server if needed\\n    if (ns.hasRootAccess(targetHack)==false) {\\n        ns.exec(\\\"/hack/own.ns\\\", \\\"home\\\", 1, targetHack);\\n    };\\n\\n    let currentRam = ns.getServerMaxRam(hostServer) - ns.getServerUsedRam(hostServer);\\n    let processNum = Math.floor( currentRam / ns.getScriptRam(\\\"/hack/selfHack.js\\\"));\\n    \\n    ns.exec(\\\"/hack/selfHack.js\\\", hostServer, processNum, targetHack);\\n}\",\"filename\":\"/hack/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/hack/hack.js\",\"url\":\"blob:file:///3fe70f7f-3c75-43c9-aea3-1305fc3864f7\"}],\"ramUsage\":3.2,\"server\":\"home\",\"_hash\":\"46679fa3bc25d2ce3869197998232120d0f063399cc1baeced2da5628dcef9e5\",\"moduleSequenceNumber\":131}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n// Creates a global variable for who's being targeted to allow for updated targeting after upgrades are aquired.\\nexport async function main(ns) {\\n\\tvar targetHack = \\\"harakiri-sushi\\\";\\n\\tvar scriptHack = \\\"/hack/start-hack.ns\\\";\\n\\n\\t// Array of all servers that don't need any ports opened to gain root access. These have 16 GB of RAM\\n\\tvar servers0Port = [\\\"foodnstuff\\\",\\n\\t\\t\\t\\t\\t\\t\\\"sigma-cosmetics\\\",\\n\\t\\t\\t\\t\\t\\t\\\"joesguns\\\",\\n\\t\\t\\t\\t\\t\\t\\\"nectar-net\\\",\\n\\t\\t\\t\\t\\t\\t\\\"hong-fang-tea\\\",\\n\\t\\t\\t\\t\\t\\t\\\"harakiri-sushi\\\"];\\n\\n\\t// Array of all servers that only need 1 port opened to gain root access. These have 32 GB of RAM\\n\\tvar servers1Port = [\\\"neo-net\\\",\\n\\t\\t\\t\\t\\t\\t\\\"zer0\\\",\\n\\t\\t\\t\\t\\t\\t\\\"max-hardware\\\",\\n\\t\\t\\t\\t\\t\\t\\\"iron-gym\\\"];\\n\\n\\tns.exec(scriptHack, \\\"home\\\", 12, targetHack);\\n\\n\\t// Copy our scripts onto each server that requires 0 ports to gain root access. Then use nuke() to gain admin access and run the scripts.\\n\\tfor (var i = 0; i < servers0Port.length; ++i) {\\n\\t\\tvar serv = servers0Port[i];\\n\\n\\t\\tawait ns.scp(scriptHack, serv);\\n\\t\\tns.nuke(serv);\\n\\t\\tns.exec(scriptHack, serv, 6, targetHack);\\n\\t}\\n\\tns.toast(\\\"All 0 Port Servers Hacked\\\");\\n\\n\\t// Setup purchase of 8GB servers to fill out avaliable servers.\\n\\tns.exec(\\\"/serv/pserv.ns\\\", \\\"home\\\", 1, 8);\\n\\n\\t// Wait until we acquire the \\\"BruteSSH.exe\\\" program\\n\\twhile (!ns.fileExists(\\\"BruteSSH.exe\\\")) {\\n\\t\\tns.toast(\\\"Waiting on BruteSSH.exe\\\");\\n\\t\\tawait ns.sleep(6000000);\\n\\t}\\n\\n\\t// Copy our scripts onto each server that requires 1 port to gain root access. Then use brutessh() and nuke() to gain admin access and run the scripts.\\n\\tfor (var i = 0; i < servers1Port.length; ++i) {\\n\\t\\tvar serv = servers1Port[i];\\n\\n\\t\\tawait ns.scp(scriptHack, serv);\\n\\t\\tns.brutessh(serv);\\n\\t\\tns.nuke(serv);\\n\\t\\tns.exec(scriptHack, serv, 12, targetHack);\\n\\t}\\n\\tns.toast(\\\"All 1 Port Servers Hacked\\\");\\n}\",\"filename\":\"/postAug/old/setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/postAug/setup.ns\",\"url\":\"blob:file:///4a407ed3-007e-4f0d-8c0a-3c2f55596d5e\"}],\"ramUsage\":3.7,\"server\":\"home\",\"_hash\":\"5b5eb7b16db7806af5ae9e20f7bb0d277dc4c27ea6a4b8dd4f68583f3ec5f279\",\"moduleSequenceNumber\":132}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t// Will puchase servers up to the limit with the requested RAM value\\n\\tvar ram = ns.args[0];\\n\\tvar i = 0;\\n\\t\\n\\tvar targetHack = \\\"harakiri-sushi\\\";\\n\\tvar scriptHack = \\\"/hack/start-hack.ns\\\";\\n\\n\\tns.tprint(\\\"Per-Server Cost Estimate: \\\" + ns.getPurchasedServerCost(ram));\\n\\n\\twhile (i < ns.getPurchasedServerLimit()) {\\n\\t\\tif (ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tvar hostname = ns.purchaseServer(\\\"pserv-\\\" + i, ram);\\n\\t\\t\\tawait ns.scp(scriptHack, hostname);\\n\\t\\t\\tns.exec(scriptHack, hostname, 3, targetHack);\\n            i++;\\n\\t\\t\\tns.toast(hostname + \\\" Purchased!\\\");\\n\\t\\t}\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n\\n\\tns.toast(\\\"Purchased Servers at Limit\\\");\\n}\",\"filename\":\"/serv/old/pserv.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/serv/pserv.ns\",\"url\":\"blob:file:///5ddbd2cb-cfee-4160-b4c9-85025a681ba2\"}],\"ramUsage\":6.15,\"server\":\"home\",\"_hash\":\"397ce68b9a449a83b85645fd155d365ae9f39fe68090bbf8e5f7f8e60f425b6c\",\"moduleSequenceNumber\":133}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet check = ns.args[0];\\n    ns.tprint(\\\"Server: \\\" + check + \\\" | Max Money: \\\" + ns.getServerMaxMoney(check));\\n}\",\"filename\":\"/hack/tools/getServerMaxMoney.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/hack/tools/getServerMaxMoney.ns\",\"url\":\"blob:file:///d1f5cdce-064c-4c7c-84b7-3ac6f15aab46\"}],\"ramUsage\":1.7,\"server\":\"home\",\"_hash\":\"36e32590559abc3741fb2500ed1a95dc054124f69b4a9e2a163c2cf251691635\",\"moduleSequenceNumber\":134}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar serv = ns.getPurchasedServers();\\n\\n\\t// Remove all the servers in the list after killing any scripts\\n\\tfor (var i = 0; i < serv.length; i++) {\\n\\t\\tns.killall(serv[i]);\\n\\t\\tns.deleteServer(serv[i]);\\n\\t}\\n\\tns.tprint(\\\"RSERV COMPLETE\\\");\\n}\",\"filename\":\"/serv/old/rserv.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/serv/old/rserv.js\",\"url\":\"blob:file:///6aba77d8-b4a2-4993-9a3f-007d1d14dd34\"}],\"ramUsage\":6.6,\"server\":\"home\",\"_hash\":\"2ff6e6cd5fc98038fb9ce1fbaaeae8e65846e68cde3b6c49efafa5d1f71aa7c7\",\"moduleSequenceNumber\":135}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var targetHack = ns.args[0];\\n    var moneyThresh = ns.getServerMaxMoney(targetHack) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(targetHack) + 5;\\n\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n  \\t\\tns.brutessh(targetHack);\\n    }\\n    ns.nuke(targetHack);\\n\\n    while(true) {\\n        if (ns.getServerSecurityLevel(targetHack) > securityThresh) {\\n            await ns.weaken(targetHack);\\n        } else if (ns.getServerMoneyAvailable(targetHack) < moneyThresh) {\\n            await ns.grow(targetHack);\\n        } else {\\n            await ns.hack(targetHack);\\n        }\\n    }\\n}\",\"filename\":\"/hack/old/start-hack.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/hack/start-hack.ns\",\"url\":\"blob:file:///310e5dc4-e7ef-4d97-9f2f-92ab15a5e42b\"}],\"ramUsage\":2.6,\"server\":\"home\",\"_hash\":\"3043862007d3b4b8212ab8bbe3669838ce4101f4e66341ad0109ab8da1960165\",\"moduleSequenceNumber\":136}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t// Will puchase servers up to the limit with the requested RAM value\\n\\tvar ram = 16;\\n\\tvar i = 0;\\n\\t\\n\\tvar targetHack = \\\"phantasy\\\";\\n\\tvar scriptHack = \\\"/hack/setup-hack.js\\\";\\n\\n\\tns.tprint(\\\"per Server Cost Estimate: \\\" + ns.getPurchasedServerCost(ram));\\n\\n\\twhile (i < ns.getPurchasedServerLimit()) {\\n\\t\\tif (ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tvar hostname = ns.purchaseServer(\\\"pserv-\\\" + i, ram);\\n\\t\\t\\tawait ns.scp(\\\"/hack/tools/hack-lib.js\\\", hostname);\\n\\t\\t\\tawait ns.scp(scriptHack, hostname);\\n\\t\\t\\tns.exec(scriptHack, hostname, 6, targetHack);\\n            i++;\\n\\t\\t\\tns.toast(hostname + \\\" Purchased!\\\");\\n\\t\\t}\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n\\n\\tns.toast(\\\"Purchased Servers at Limit\\\");\\n}\",\"filename\":\"/serv/old/start-pserv.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/serv/old/start-pserv.ns\",\"url\":\"blob:file:///3c2dfdfc-faa4-48fe-9630-8a4ecc3a4ec3\"}],\"ramUsage\":6.15,\"server\":\"home\",\"_hash\":\"d8ca63394fe20b6e0b17002d3979b806eb1059d40282f9c7966c9db676114edd\",\"moduleSequenceNumber\":137}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var targetHack = ns.args[0];\\n    var moneyThresh = ns.getServerMaxMoney(targetHack) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(targetHack) + 5;\\n\\n    while (ns.getServerRequiredHackingLevel(ns.getHostname()) > ns.getHackingLevel()) {\\n        await ns.sleep(60000);\\n    }\\n\\n     while(true) {\\n        if (ns.getServerSecurityLevel(targetHack) > securityThresh) {\\n            await ns.weaken(targetHack);\\n        } else if (ns.getServerMoneyAvailable(targetHack) < moneyThresh) {\\n            await ns.grow(targetHack);\\n        } else {\\n            await ns.hack(targetHack);\\n        }\\n    }\\n}\",\"filename\":\"/hack/maxMoney.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/hack/maxMoney.js\",\"url\":\"blob:file:///656d2fba-97ed-43f0-8ca1-81c2da29fb5e\"}],\"ramUsage\":2.6,\"server\":\"home\",\"_hash\":\"9e301651d6beed88e38646561d39cae1ee17f8a4e3c582b4fcde1cb996473d3d\",\"moduleSequenceNumber\":138}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar exponent = ns.args[0];\\n    ns.tprint(\\\"RAM: \\\" + 2**exponent + \\\" | Purchase Cost: \\\" + ns.getPurchasedServerCost(2**exponent));\\n}\",\"filename\":\"/serv/tools/getPurchasedServerPrice.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/serv/tools/getPurchasedServerPrice.ns\",\"url\":\"blob:file:///adbd392b-94fc-4621-8ac4-993aa95b91b7\"}],\"ramUsage\":1.85,\"server\":\"home\",\"_hash\":\"bf281826cb5b93b694067776d9a6a8795f5df398f73e52183003658f09c7707d\",\"moduleSequenceNumber\":139}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"sleep\\\");\\n\\tvar targetHack = ns.args[0];\\n\\n\\twhile (ns.getServerMoneyAvailable(targetHack) > 0) {\\n\\t\\twhile (ns.getHackingLevel() < ns.getServerMinSecurityLevel(targetHack)){ \\n\\t\\t\\tawait ns.sleep(60000);\\n\\t\\t}\\n\\t\\tawait ns.hack(targetHack);\\n\\t}\\n\\t\\n\\tns.tprint(\\\"REPORT: Drained \\\" + targetHack);\\n}\",\"filename\":\"/hack/drain.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/hack/drain.js\",\"url\":\"blob:file:///c75e573a-d5e1-47bf-87ff-593ff3f83abc\"}],\"ramUsage\":1.95,\"server\":\"home\",\"_hash\":\"b1ff3eb7eba2bd00e5a48c465f2e5e03e5edd8084f70375b65e4382b3ce9b26c\",\"moduleSequenceNumber\":140}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n   var targetHack = ns.args[0];\\n\\n   if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n      ns.brutessh(targetHack);\\n   }\\n   if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n      ns.ftpcrack(targetHack);\\n   }\\n   if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n      ns.relaysmtp(targetHack);\\n   }\\n   if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n      ns.httpworm(targetHack);\\n   }\\n   if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n      ns.sqlinject(targetHack);\\n   }\\n\\n   ns.nuke(targetHack);\\n}\",\"filename\":\"/hack/own.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/hack/own.js\",\"url\":\"blob:file:///5b96510d-f299-4b3c-942e-0973e86305f4\"}],\"ramUsage\":2,\"server\":\"home\",\"_hash\":\"e04e1f7251ebb16d63dfcef995d4032a311ef47330fefd74fdf183cb0168c225\",\"moduleSequenceNumber\":141}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar targetServer = ns.args[0];\\n\\n\\tvar processNum = Math.floor(ns.getServerMaxRam(targetServer) / 2.4);\\n\\t\\n\\tns.tprint(processNum);\\n}\",\"filename\":\"/hack/tools/getProcessCount.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/hack/tools/getProcessCount.ns\",\"url\":\"blob:file:///5845716f-c9b3-4f1a-b908-40b34d372c5b\"}],\"ramUsage\":1.65,\"server\":\"home\",\"_hash\":\"747f9a4ac12f61fd092c052fb6c3d4e0627555d1204dd28aa59f6886c1e78b28\",\"moduleSequenceNumber\":142}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tprint(ns.scan(\\\"home\\\"));\\n}\",\"filename\":\"/hack/tools/getServerList.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/hack/tools/getServerList.ns\",\"url\":\"blob:file:///cf4fa7c0-720c-4192-baaf-a833f0e2aeb4\"}],\"ramUsage\":1.8,\"server\":\"home\",\"_hash\":\"d79cb3e3869f4fcef5465f02bda16c24bddb461873660eeced75a8823682c5da\",\"moduleSequenceNumber\":143}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function maxNUKE(ns, targetHack) {\\n   // Function to run all the port openers and NUKE the server that you hand off.\\n   // One argument expected, string for the target of the NUKE\\n   // Returns true if you already have root, false if NUKE failed, and the number of ports that were opened if it was sucessful\\n\\n   var portsOpened = 0;\\n\\n   if (ns.hasRootAccess(targetHack) == true) {\\n      return true;\\n   }\\n   else {\\n      if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n         ns.brutessh(targetHack);\\n         portsOpened++;\\n      }\\n      if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n         ns.ftpcrack(targetHack);\\n         portsOpened++;\\n      }\\n      if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n         ns.relaysmtp(targetHack);\\n         portsOpened++;\\n      }\\n      if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n         ns.httpworm(targetHack);\\n         portsOpened++;\\n      }\\n      if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n         ns.sqlinject(targetHack);\\n         portsOpened++;\\n      }\\n      ns.nuke(targetHack);\\n\\n      //    If able to use terminal commands, un-comment the below lines to also backdoor the server\\n      //    ns.connect(targetHack);\\n      //    await ns.installBackdoor();\\n      //    ns.connect(\\\"home\\\");\\n\\n      if (ns.hasRootAccess(targetHack) == false) {\\n         return false;\\n      }\\n      else {\\n         return portsOpened;\\n      }\\n   }\\n}\\n\\nexport function maxThreads(ns, script, targetServer) {\\n   // Function to determine the maxiumum number of threads that can be ran on a server\\n   // Two arguments expected, the script to be ran and the target server they're going to be run on\\n   // Returns the number of threads, will return 0 if there is no space to run the script at all on the server\\n\\n   var threads = 1;\\n   var scriptRAM = ns.getScriptRam(script);\\n   var serverMaxRAM = ns.getServerMaxRam(targetServer);\\n   var serverUsedRAM = ns.getServerUsedRam(targetServer);\\n\\n   if (scriptRAM > serverMaxRAM) {\\n      return 0;\\n   }\\n   else {\\n      threads = Math.floor((serverMaxRAM - serverUsedRAM) / scriptRAM);\\n      return threads;\\n   }\\n}\\n\\nexport async function maxRun(ns, script, targetServer, scriptArgs) {\\n   // Function to copy the script to target server and run script with the passed through arguement the max number of threads\\n   // Three arguments expected, the script to be copied and executed, the server to copy the script to, and the argument for the script\\n   // Returns false if maxThreads() returns false, otherwise returns true\\n   var threads = maxThreads(script, targetServer);\\n\\n   if (threads = 0) {\\n      return false;\\n   }\\n   else {\\n      await ns.scp(script, \\\"home\\\", targetServer);\\n      ns.exec(script, targetServer, threads, scriptArgs);\\n\\n      return true;\\n   }\\n}\\n\\nexport async function maxGrow(ns, targetHack) {\\n   // Function to keep grow() a target until it reaches the threshold\\n   // One arguemnt expected, the target of the hack\\n   // Returns true when grow() loop has completed\\n\\n   var moneyThresh = ns.getServerMaxMoney(targetHack) * 0.75;\\n\\n   while (ns.getServerMoneyAvailable(targetHack) < moneyThresh) {\\n      await ns.weaken(targetHack);\\n      await ns.grow(targetHack);\\n   }\\n\\n   return true;\\n}\\n\\nexport async function maxWeaken(ns, targetHack) {\\n   // Function to keep weaken() a target until it reaches the threshold\\n   // One arguemnt expected, the target of the hack\\n   // Returns true when weaken() loop has completed\\n\\n   var securityThresh = ns.getServerMinSecurityLevel(targetHack) + 5;\\n\\n   while (ns.getServerSecurityLevel(targetHack) > securityThresh) {\\n      await ns.weaken(targetHack);\\n   }\\n\\n   return true;\\n}\\n\\nexport async function maxHack(ns, targetHack) {\\n   // Function to hack() after making sure the target is under the weaken and grow threshold, will wait until hacking level is high enough to effect the server\\n   // One arguemnt expected, the target of the hack\\n   // Infinite loop, not expected to return anything\\n\\n   while (ns.getServerRequiredHackingLevel(targetHack) > ns.getHackingLevel()) {\\n      await ns.sleep(60000);\\n   }\\n\\n   while (true) {\\n      await ns.weaken(targetHack);\\n      await ns.grow(targetHack);\\n      await ns.weaken(targetHack);\\n      await ns.hack(targetHack);\\n   }\\n}\\n\\nexport async function spider(ns) {\\n   const servers = ['home'];\\n\\n   for (const server of servers)\\n      ns.scan(server)\\n         .filter((x) => !servers.includes(x))\\n         .forEach((x) => servers.push(x));\\n\\n   return servers;\\n}\",\"filename\":\"/hack/tools/hack-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.3,\"server\":\"home\",\"_hash\":\"18f56982589d0db7c90eeda9aa36310259b2fa590e2f24ded82a55e71f90b702\",\"moduleSequenceNumber\":144}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {maxHack} from \\\"/hack/tools/hack-lib.js\\\"\\n\\nexport async function main(ns) {\\n\\tvar targetHack = ns.args[0];\\n    var moneyThresh = ns.getServerMaxMoney(targetHack) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(targetHack) + 5;\\n    \\n    while(ns.getServerMoneyAvailable(targetHack) < moneyThresh) {\\n        if (ns.getServerSecurityLevel(targetHack) > securityThresh) {\\n            await ns.weaken(targetHack);\\n        }\\n        else if(ns.getServerMoneyAvailable(targetHack) < moneyThresh) {\\n            await ns.grow(targetHack);\\n        }\\n    }\\n\\n    await maxHack(ns, targetHack);\\n}\",\"filename\":\"/hack/setup-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/hack/tools/hack-lib.ns\",\"url\":\"blob:file:///a283c44c-e521-4399-ba5a-60c37a8cb2c5\"},{\"filename\":\"/hack/setup-hack.ns\",\"url\":\"blob:file:///e9d2dbae-5882-4f19-b5d9-dc694f5a70f9\"}],\"ramUsage\":2.55,\"server\":\"home\",\"_hash\":\"3d559e4893cd1f23fb945a25287931758a43c34bf6d3d1eaad17f03fa9e7ca93\",\"moduleSequenceNumber\":145}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport { maxNUKE, maxThreads } from \\\"/hack/tools/hack-lib.js\\\"\\n\\nexport async function main(ns) {\\n\\tvar drainServers = [\\\"n00dles\\\",\\n\\t\\t\\t\\\"foodnstuff\\\",\\n\\t\\t\\t\\\"sigma-cosmetics\\\",\\n\\t\\t\\t\\\"joesguns\\\",\\n\\t\\t\\t\\\"nectar-net\\\",\\n\\t\\t\\t\\\"harakiri-sushi\\\",\\n\\t\\t\\t\\\"hong-fang-tea\\\"]\\n\\n\\t// Drains all the money from the start servers\\n\\tfor (var i = 0; i < drainServers.length; i++) {\\n\\t\\tawait maxNUKE(ns, drainServers[i]);\\n\\t\\tns.run(\\\"/hack/drain.js\\\", 256, drainServers[i]);\\n\\t\\tawait ns.sleep(60000);\\n\\t}\\n\\n\\t// Runs the setup to propagate selfHack\\n\\tns.run(\\\"/hack/setup-startHack.js\\\");\\n\\n\\t// Sets up starting purchasedServers\\n\\tns.run(\\\"/serv/buildBotnet.js\\\", 1, 8);\\n\\n\\t// Sets up Hacknet \\n\\tns.run(\\\"/net/buyNodes.js\\\");\\n}\",\"filename\":\"/postAug/setup-CashRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/hack/tools/hack-lib.js\",\"url\":\"blob:file:///378f6cf0-61be-4d71-b8a7-f97735df52aa\"},{\"filename\":\"/postAug/setup-CashRoot.js\",\"url\":\"blob:file:///acd7e00a-a3d7-4e12-bb94-f340b986c9fd\"}],\"ramUsage\":3.05,\"server\":\"home\",\"_hash\":\"be0a16ebc03c42a976ff2fefb9157e607b57b62ada98eab66450f967659cc042\",\"moduleSequenceNumber\":146}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {maxThreads} from \\\"/hack/tools/hack-lib.js\\\"\\n\\nexport function rServ(ns) {\\n\\t// This function iterates through all purchased servers and kill the scripts on them then deletes them\\n\\t// No arguments expected\\n\\t// Returns the number of purchased servers removed\\n\\n    // Get names for all existing purchased servers\\n\\tvar serv = ns.getPurchasedServers();\\n\\n\\t// Remove all the servers in the list after killing any scripts\\n\\tfor (var i = 0; i < serv.length; i++) {\\n\\t\\tns.killall(serv[i]);\\n\\t\\tns.deleteServer(serv[i]);\\n\\t}\\n\\n\\treturn i;\\n}\\n\\nexport async function pServ(ns, atRAM) {\\n\\t// This purchases a server at a given RAM value\\n\\t// One arguement expected, the ammount of RAM for the servers to be purchased at\\n\\t// Returns purchased server name if purchased, false if above server limit\\n\\n\\tif (ns.getPurchasedServerLimit() == 25) {\\n\\t\\treturn false;\\n\\t}\\n\\n\\tlet needPurchase = true;\\n\\twhile (needPurchase){\\n\\t\\tif (ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(atRAM)) {\\n\\t\\t\\tlet serverName = ns.purchaseServer(\\\"serv-\\\" + i, atRAM);\\n\\t\\t\\tneedPurchase = false;\\n\\t\\t}\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n\\n\\treturn serverName;\\n}\\n\\nexport async function uServ(ns, scriptArray, targetServer, argument) {\\n\\t// This function updates (or copies for the first time) the scripts that are passed to it in the array and executes the first one with the argument passed through\\n\\t// Two arguments expected, an array of all the scripts that needs to be copied, and where the scripts are going to be copied to, and the argument to run the first script with\\n\\t// Returns true if completed\\n\\n\\tfor (const s in scriptArray ) {\\n\\t\\tawait ns.scp(scriptArray[s], \\\"home\\\", targetServer);\\n\\t}\\n\\n\\tvar threads = maxThreads(ns, scriptArray[0], targetServer);\\n\\tawait ns.exec(scriptArray[0], targetServer, threads, argument);\\t\\n\\treturn true;\\n}\",\"filename\":\"/serv/old/serv-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":11.35,\"server\":\"home\",\"_hash\":\"777af0c86759bf74d0bbb4c11251e767bd0b2f19cb28247b1f1697a7e4e9364f\",\"moduleSequenceNumber\":147}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {pServ, uServ} from \\\"/serv/tools/serv-lib.js\\\"\\n\\nexport async function main(ns) {\\t\\n\\tlet s = 0;\\n\\twhile (s < ns.getPurchasedServerLimit()) {\\n\\t\\tawait uServ(ns, [\\\"/hack/setup-hack.js\\\",\\\"/hack/tools/hack-lib.js\\\"], await pServ(ns, 16), \\\"phantasy\\\");\\n\\t\\ts++;\\n\\t}\\n}\",\"filename\":\"/serv/old/setup-serv.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/hack/tools/hack-lib.js\",\"url\":\"blob:file:///afd812ce-ffda-4261-8fee-b034f2a215fd\"},{\"filename\":\"/serv/tools/serv-lib.js\",\"url\":\"blob:file:///8fcc0666-c3f9-491c-9377-739d34fe4a47\"},{\"filename\":\"/serv/setup-serv.js\",\"url\":\"blob:file:///f98abc66-be98-4cc7-a7d6-5665c8422127\"}],\"ramUsage\":6.35,\"server\":\"home\",\"_hash\":\"fabbc0ede7551b958600a85817dac1e9c0d44f5f2b5b98382a6b6c414378e44b\",\"moduleSequenceNumber\":148}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet list = ns.scan(ns.args[0]);\\n\\tlet name;\\n\\n\\tfor (let i in list) {\\n\\t\\tname = ns.scan(list[i]);\\n\\t\\tfor (let n in name) {\\n\\t\\t\\tif (name[n] != \\\"home\\\"){\\n\\t\\t\\t\\tns.tprint(name[n]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\\n//  still not getting the details and writing them to a file but this at least gets server name?\\n//\\t\\twant to seperate the server detail files by ports needed to unlock, one folder per level\",\"filename\":\"/data/spider.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/data/spider.js\",\"url\":\"blob:file:///ab98ec8b-9cc7-4c04-876c-135139c6c852\"}],\"ramUsage\":1.8,\"server\":\"home\",\"_hash\":\"6573541b2d37636105d839cf8424975943720a7b88261937bfbf72da28345ab1\",\"moduleSequenceNumber\":149}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\n\\t// Buy all the nodes I want\\n\\twhile (ns.hacknet.numNodes() < 8){\\n\\t\\tif (ns.getServerMoneyAvailable(\\\"home\\\") > ns.hacknet.getPurchaseNodeCost()){\\n\\t\\t\\tns.hacknet.purchaseNode();\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(60000);\\n\\t}\\n\\n\\tns.spawn(\\\"/net/upgradeNodes.js\\\");\\n}\",\"filename\":\"/net/buyNodes.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/net/buyNodes.js\",\"url\":\"blob:file:///6ad93ff3-cb81-4cd8-8899-2321795b1042\"}],\"ramUsage\":7.7,\"server\":\"home\",\"_hash\":\"5d0976c64dc1236da9875da2ea4ecb166d72375dcd491af11e5d3be150d9188f\",\"moduleSequenceNumber\":150}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet port = ns.getPortHandle(ns.args[0]);\\n\\tns.tprint(port.data);\\n}\",\"filename\":\"/data/tools/emptyPort.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/data/tools/emptyPort.js\",\"url\":\"blob:file:///20b14a94-0158-4c2d-8f8f-b82ec9d1d9c2\"}],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"81fb932a759c855f4e3a461f1bbb38a8407b9209f556f559631320abc097eba2\",\"moduleSequenceNumber\":151}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {maxThreads, maxNUKE} from \\\"/hack/tools/hack-lib.js\\\"\\nexport async function main(ns) {\\n\\tlet ram = ns.args[0];\\n\\n\\t// Gets the list of servers and removes all of them\\n\\tlet serverList = ns.getPurchasedServers();\\n\\tfor (let server in serverList) {\\n\\t\\tns.killall(serverList[server]);\\n\\t\\tns.deleteServer(serverList[server]);\\n\\t}\\n\\n\\t// Purchases all the server slots at the requested size and spits their name to port4\\n\\tlet i = 0;\\n\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\n\\t\\tif (ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tlet name = ns.purchaseServer(\\\"serv-\\\"+ ram + \\\"-\\\" + i, ram);\\n\\t\\t// here's the port write attempt....\\n\\t\\t//\\tawait ns.tryWritePort(4, name);\\n\\n\\t\\t// since I'm not getting the ports working atm, here's the manual process\\n\\t\\t\\tmaxNUKE(ns, \\\"joesguns\\\");\\n\\t\\t\\tawait ns.scp(\\\"/hack/grindXP.js\\\", \\\"home\\\", name);\\n\\t\\t\\tns.exec(\\\"/hack/grindXP.js\\\", name, maxThreads(ns, \\\"/hack/grindXP.js\\\", name), \\\"joesguns\\\");\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(6);\\n\\t}\\n\\n\\treturn ram;\\n}\",\"filename\":\"/serv/buildBotnet.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/hack/tools/hack-lib.js\",\"url\":\"blob:file:///caacce01-cd65-4ba4-8c54-56b0f676e6f6\"},{\"filename\":\"/serv/buildBotnet.js\",\"url\":\"blob:file:///af4b03f5-5817-472d-8d80-7c4dd5334a44\"}],\"ramUsage\":11.8,\"server\":\"home\",\"_hash\":\"000e46d698e99a6b8a59546f090827b125c294e3971a07edb21ad277373aac47\",\"moduleSequenceNumber\":152}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {maxThreads} from \\\"/hack/tools/hack-lib.js\\\"\\n\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"sleep\\\");\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// i don't care about sleep log messages\\n\\n\\tlet port1 = ns.getPortHandle(1);\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// this is supposed to be how you initialize ports?\\n\\tlet port2 = ns.getPortHandle(2);\\n\\tlet port3 = ns.getPortHandle(3);\\n\\tlet port4 = ns.getPortHandle(4);\\n\\n\\twhile (true) {\\n\\t\\t// Listen for port(1)\\n\\t\\tif (port1.empty() != true) { \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// this is supposed to check and see if the port has data to do something with\\n\\t\\t\\tlet host = port1.data.shift(); \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// this is supposed to grab that data from the port\\n\\t\\t\\tif (ns.hasRootAccess(host)) { \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// if we have root access\\n\\t\\t\\t\\tif (host != \\\"home\\\"){ \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// if the host isn't home\\n\\t\\t\\t\\t\\tns.writePort(2, host);\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// throw the host into port 2\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\telse {\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// if we don't have root\\n\\t\\t\\t\\tns.run(\\\"/hack/waitRoot.js\\\", 1, host);\\t\\t\\t\\t\\t\\t\\t// run the wiatRoot to wait until we can root and do so\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Listen for port(2)\\n\\t\\tif (port2.empty() != true) { \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// this is supposed to check and see if the port has data to do something with\\t\\n\\t\\t\\tlet host = port2.data.shift();\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// this is supposed to grab that data from the port\\n\\t\\t\\tif (ns.getServerMaxRam > 0 && ns.getServerMoneyAvailable > 0){\\t\\t// if the target host has ram and money\\n\\t\\t\\t\\tns.run(\\\"/hack/builder.js\\\", 128, host);\\t\\t\\t\\t\\t\\t\\t// runs the builder locally to set up for selfHack\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Listen for port(3)\\n\\t\\tif (port3.empty() != true) { \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// this is supposed to check and see if the port has data to do something with\\n\\t\\t\\tlet host = port3.data.shift();\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// this is supposed to grab that data from the port\\n\\t\\t\\tns.scp(\\\"/hack/selfHack.js\\\", \\\"home\\\", host);\\t\\t\\t\\t\\t\\t\\t// copies the selfHack script to the host\\n\\t\\t\\tns.exec(\\\"/hack/selfHack.js\\\", host, maxThreads(host));\\t\\t\\t\\t// runs the selfHack for all avaliable threads permitted by ram\\n\\t\\t}\\n\\n\\t\\t// Listen for port(4)\\n\\t\\tif (port4.empty() != true) { \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// this is supposed to check and see if the port has data to do something with\\n\\t\\t\\tlet host = port4.data.shift();\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// this is supposed to grab that data from the port\\n\\t\\t\\tns.scp(\\\"/hack/managedHack.js\\\", \\\"home\\\", host);\\t\\t\\t\\t\\t\\t// copies the managedHack script to the host\\n\\t\\t\\tns.exec(\\\"/hack/managedHack.js\\\", host);\\t\\t\\t\\t\\t\\t\\t\\t// runs the managedHack \\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(600);\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// required sleep function for while true loops\\n\\t}\\n}\",\"filename\":\"/hack/listner.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/hack/tools/hack-lib.js\",\"url\":\"blob:file:///d7611a96-10ea-4c12-9490-4ed4bf943569\"},{\"filename\":\"/hack/listner.js\",\"url\":\"blob:file:///e1a69284-91b4-42aa-8ac5-8988e1f7269f\"}],\"ramUsage\":4.85,\"server\":\"home\",\"_hash\":\"a33659bb454b39fb80ae5bd5ca6ce1a6c690aa5ed7d2156b3f50c2ffc819fca5\",\"moduleSequenceNumber\":153}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet node = 0;\\n\\twhile (node < ns.hacknet.numNodes()) {\\n\\n\\t\\tlet upgradedLevel = false;\\n\\t\\tlet upgradedRAM = false;\\n\\t\\tlet upgradedCore = false;\\n\\t\\tlet notUpgraded = true;\\n\\n\\t\\t// Loop through getting Levels, RAM, and Cores\\n\\t\\twhile (notUpgraded == true) {\\n\\t\\t\\tif (upgradedLevel == false) {\\n\\t\\t\\t\\tif (ns.getServerMoneyAvailable(\\\"home\\\") > ns.hacknet.getLevelUpgradeCost(node)) {\\n\\t\\t\\t\\t\\tns.hacknet.upgradeLevel(node);\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif (ns.hacknet.getNodeStats(node).level == 200) {\\n\\t\\t\\t\\t\\tupgradedLevel = true;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (upgradedRAM == false) {\\n\\t\\t\\t\\tif (ns.getServerMoneyAvailable(\\\"home\\\") > ns.hacknet.getRamUpgradeCost(node)) {\\n\\t\\t\\t\\t\\tns.hacknet.upgradeRam(node);\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif (ns.hacknet.getNodeStats(node).ram == 64) {\\n\\t\\t\\t\\t\\tupgradedRAM = true;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (upgradedCore == false) {\\n\\t\\t\\t\\tif (ns.getServerMoneyAvailable(\\\"home\\\") > ns.hacknet.getCoreUpgradeCost(node)) {\\n\\t\\t\\t\\t\\tns.hacknet.upgradeCore(node);\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif (ns.hacknet.getNodeStats(node).cores == 16) {\\n\\t\\t\\t\\t\\tupgradedCore = true;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (upgradedLevel == true && upgradedRAM == true && upgradedCore == true) {\\n\\t\\t\\t\\tnotUpgraded == false;\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(6000);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(6000);\\n\\t\\tnode++;\\n\\t}\\n}\",\"filename\":\"/net/upgradeNodes.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/net/upgradeNodes.js\",\"url\":\"blob:file:///2fb5ff7f-c294-4daf-b942-e883a1e74974\"}],\"ramUsage\":5.7,\"server\":\"home\",\"_hash\":\"8c3af0f6116f56b018950957cf9e5b9e18eb007b697fd34f565196a110f699f0\",\"moduleSequenceNumber\":154}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"sleep\\\");\\n\\n\\tlet target = ns.getHostname();\\n\\tlet minSec = ns.getServerMinSecurityLevel(target) + 5;\\n\\tlet maxMon = ns.getServerMaxMoney(target) * 0.75;\\n\\n\\twhile (ns.getServerRequiredHackingLevel(ns.getHostname()) > ns.getHackingLevel()) {\\n\\t\\tawait ns.sleep(60000);\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > minSec) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < maxMon) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\",\"filename\":\"/hack/selfHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/hack/selfHack.js\",\"url\":\"blob:file:///058948fc-e470-4076-aa47-4fe9a33c5c0f\"}],\"ramUsage\":2.6,\"server\":\"home\",\"_hash\":\"c204f2981e46aea6b9a5b398e5ac4777c08bf2afc271ba7c112a4abee4864618\",\"moduleSequenceNumber\":155}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetHack = ns.getServer(ns.args[0]);\\n\\n\\twhile (targetHack.numOpenPortsRequired > targetHack.openPortCount) {\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && targetHack.sshPortOpen == false) {\\n\\t\\t\\tns.brutessh(targetHack.hostname);\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && targetHack.ftpPortOpen == false) {\\n\\t\\t\\tns.ftpcrack(targetHack.hostname);\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && targetHack.smtpPortOpen == false) {\\n\\t\\t\\tns.relaysmtp(targetHack.hostname);\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && targetHack.httpPortOpen == false) {\\n\\t\\t\\tns.httpworm(targetHack.hostname);\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && targetHack.sqlPortOpen == false) {\\n\\t\\t\\tns.sqlinject(targetHack.hostname);\\n\\t\\t}\\n\\n\\t\\tns.print(targetHack.openPortCount + \\\" / \\\" + targetHack.numOpenPortsRequired)\\n\\t\\tawait ns.sleep(60000);\\n\\t}\\n\\n\\tns.nuke(targetHack.hostname);\\n\\n\\tns.writePort(3, targetHack.hostname);\\n}\",\"filename\":\"/hack/waitRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/hack/waitRoot.js\",\"url\":\"blob:file:///64a57dc0-3f80-47a0-b0c2-fdb0010ac697\"}],\"ramUsage\":4,\"server\":\"home\",\"_hash\":\"9c4ad9409839b0385ff322977a1fee8b5fe5d885ea460b75f92c2426ec9c23a4\",\"moduleSequenceNumber\":156}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"sleep\\\");\\n\\n   \\tlet target = ns.args[0];\\n\\tlet minSec = ns.getServerMinSecurityLevel(target) + 5;\\n\\tlet maxMon = ns.getServerMaxMoney(target) * 0.90;\\n\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > minSec) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < maxMon) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\",\"filename\":\"/hack/managedHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/hack/managedHack.js\",\"url\":\"blob:file:///081e7385-b741-4395-b835-dc8f0fb4318d\"}],\"ramUsage\":2.4,\"server\":\"home\",\"_hash\":\"e328713af600be95ac633724529d1c8ec6fab1b881af8cda594c98bb8be414b7\",\"moduleSequenceNumber\":157}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet server = ns.getServer(ns.args[0]);\\n\\n\\tawait ns.write(\\\"/data/report/\\\" + server.hostname + \\\".txt\\\", \\\"hostname:\\\" + server.hostname + \\\",\\\", \\\"a\\\");\\n\\tawait ns.write(\\\"/data/report/\\\" + server.hostname + \\\".txt\\\", \\\"maxRam:\\\" + server.maxRam + \\\",\\\", \\\"a\\\");\\n\\tawait ns.write(\\\"/data/report/\\\" + server.hostname + \\\".txt\\\", \\\"numOpenPortsRequired:\\\" + server.numOpenPortsRequired + \\\",\\\", \\\"a\\\");\\n\\tawait ns.write(\\\"/data/report/\\\" + server.hostname + \\\".txt\\\", \\\"requiredHackingSkill:\\\" + server.requiredHackingSkill + \\\",\\\", \\\"a\\\");\\n\\tawait ns.write(\\\"/data/report/\\\" + server.hostname + \\\".txt\\\", \\\"minDifficulty:\\\" + server.minDifficulty + \\\",\\\", \\\"a\\\");\\n\\tawait ns.write(\\\"/data/report/\\\" + server.hostname + \\\".txt\\\", \\\"moneyAvaliable:\\\" + server.moneyAvailable + \\\",\\\", \\\"a\\\");\\n\\tawait ns.write(\\\"/data/report/\\\" + server.hostname + \\\".txt\\\", \\\"moneyMax:\\\" + server.moneyMax + \\\",\\\", \\\"a\\\");\\n\\tawait ns.write(\\\"/data/report/\\\" + server.hostname + \\\".txt\\\", \\\"serverGrowth:\\\" + server.serverGrowth, \\\"a\\\");\\n}\",\"filename\":\"/hack/tools/getReport.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/hack/tools/getReport.js\",\"url\":\"blob:file:///a88aabac-4ee0-4cd3-bf26-e174c0ce4912\"}],\"ramUsage\":3.6,\"server\":\"home\",\"_hash\":\"12327049c7fda31d13ae6e57a7bcb7d9ac8bd1c678d0c71d4be22a47b71f6c4e\",\"moduleSequenceNumber\":158}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {maxThreads, ignoreHost} from \\\"/hack/tools/hack-lib.js\\\"\\nexport async function main(ns) {\\n\\tconst servers = ns.scan(\\\"home\\\");\\n\\n\\tfor (const target of servers) {\\n\\t\\tif (target != \\\"home\\\" && target != \\\"darkweb\\\") {\\n\\t\\t\\tawait ns.exec(\\\"/hack/waitRoot.js\\\", \\\"home\\\", 1, target);\\n\\t\\t\\tawait ns.scp(\\\"/hack/selfHack.js\\\", \\\"home\\\", target);\\n\\t\\t\\tawait ns.exec(\\\"/hack/selfHack.js\\\", target, maxThreads(ns, \\\"/hack/selfHack.js\\\", target), target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/hack/setup-selfHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/hack/tools/hack-lib.js\",\"url\":\"blob:file:///98e5331e-caf2-4963-8050-c2439676336a\"},{\"filename\":\"/hack/setup-selfHack.js\",\"url\":\"blob:file:///76835934-6d74-4628-9191-637dcd0aee2b\"}],\"ramUsage\":3.9,\"server\":\"home\",\"_hash\":\"a5ecf07c71f217580b1fb49881f8d4e21a8313c5d55ef19bc964d893f68d10c8\",\"moduleSequenceNumber\":159}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport const port0 = [\\\"n00dles\\\",\\n\\t\\\"foodnstuff\\\",\\n\\t\\\"sigma-cosmetics\\\",\\n\\t\\\"joesguns\\\",\\n\\t\\\"nectar-net\\\",\\n\\t\\\"harakiri-sushi\\\",\\n\\t\\\"hong-fang-tea\\\"];\\n\\nexport const managedTargets = { \\n\\t0: \\\"harakiri-sushi\\\", \\n\\t1: \\\"iron-gym\\\", \\n\\t2: \\\"phantasy\\\", \\n\\t3: \\\"rho-construction\\\" };\\n\\nexport function statServer(ns, host) {\\n\\treturn sever = {\\n\\t\\t\\\"hostname\\\": \\\"\\\",\\n\\t\\t\\\"maxRAM\\\": ns.getServerMaxRam(host),\\n\\t\\t\\\"baseSecurity\\\": ns.getServerBaseSecurityLevel(host),\\n\\t\\t\\\"minSecurity\\\": ns.getServerMinSecurityLevel(host),\\n\\t\\t\\\"growthRate\\\": ns.getServerGrowth(host)\\n}\\n\\nexport function spider(ns){\\n\\tlet servers = [\\\"home\\\"];\\n\\tconst purchasedServer = '';\\n\\n\\tfor (let serv of servers) {\\n\\t\\tserver.every()\\n\\t\\t\\tservers.append(serv);\\n\\t\\t}\\n}\",\"filename\":\"/data/var/list-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":0,\"server\":\"home\",\"_hash\":\"62f996d2e31169ef246732b3a27dbac1a47fe1f2801e4469b3ba206ffdb86a4d\",\"moduleSequenceNumber\":160}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// portWatcher.js\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.tail();\\n  while (true) {\\n    ns.print(ns.readPort(1));\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"/data/portWatcher.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/data/portWatcher.js\",\"url\":\"blob:file:///24a28156-321f-4e4b-a87e-0aab7306d80d\"}],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"350f11a6924807d91f7fe90a524765412057871f315e3bb9857438dc410dd537\",\"moduleSequenceNumber\":161}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// portPusher.js\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  let i = 0;\\n  while (true) {\\n    await ns.writePort(1, `hello${i++}`);\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"/data/portPusher.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/data/portPusher.js\",\"url\":\"blob:file:///2e5ccf7c-9652-47a5-a2d3-0595f5efe40e\"}],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"29481b57175e8ee3e7909ee3fc517d1eecc7fbbd96614bc30e9e9cfc685875d9\",\"moduleSequenceNumber\":162}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile (true) {await ns.grow(ns.args[0]); await ns.sleep(1)}\\n}\",\"filename\":\"/hack/grindXP.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/hack/grindXP.js\",\"url\":\"blob:file:///24e65542-48a2-45ef-bfb4-513cdd7b5a8d\"}],\"ramUsage\":1.75,\"server\":\"home\",\"_hash\":\"1e063fda4894973c80c792a8a042e16eff64a0a2099f1a122e4cc56a948f9603\",\"moduleSequenceNumber\":163}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([[\\\"help\\\", false]])\\r\\n    const server = ns.args[0]\\r\\n    if (args.help || !server) {\\r\\n        ns.tprint(\\\"This script does a more detailed analysis of a server.\\\")\\r\\n        ns.tprint(`Usage: run ${ns.getScriptName()} SERVER`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n    const ram = ns.getServerRam(server)\\r\\n    const money = ns.getServerMoneyAvailable(server)\\r\\n    const maxMoney = ns.getServerMaxMoney(server)\\r\\n    const minSec = ns.getServerMinSecurityLevel(server)\\r\\n    const sec = ns.getServerSecurityLevel(server)\\r\\n    ns.tprint(`\\r\\n\\r\\n${server}:\\r\\n    RAM        : ${ram[1]} / ${ram[0]} (${ram[1] / ram[0] * 100}%)\\r\\n    $          : ${ns.nFormat(money, \\\"$0.000a\\\")} / ${ns.nFormat(maxMoney, \\\"$0.000a\\\")} (${(money / maxMoney * 100).toFixed(2)}%)\\r\\n    security   : ${minSec.toFixed(2)} / ${sec.toFixed(2)}\\r\\n    growth     : ${ns.getServerGrowth(server)}\\r\\n    hack time  : ${ns.tFormat(ns.getHackTime(server))}\\r\\n    grow time  : ${ns.tFormat(ns.getGrowTime(server))}\\r\\n    weaken time: ${ns.tFormat(ns.getWeakenTime(server))}\\r\\n    grow x2    : ${(ns.growthAnalyze(server, 2)).toFixed(2)} threads\\r\\n    grow x3    : ${(ns.growthAnalyze(server, 3)).toFixed(2)} threads\\r\\n    grow x4    : ${(ns.growthAnalyze(server, 4)).toFixed(2)} threads\\r\\n    hack 10%   : ${(.10 / ns.hackAnalyze(server)).toFixed(2)} threads\\r\\n    hack 25%   : ${(.25 / ns.hackAnalyze(server)).toFixed(2)} threads\\r\\n    hack 50%   : ${(.50 / ns.hackAnalyze(server)).toFixed(2)} threads\\r\\n    hackChance : ${(ns.hackAnalyzeChance(server) * 100).toFixed(2)}%\\r\\n`)\\r\\n}\",\"filename\":\"//src/bin/official-scripts/analyze_server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.35,\"server\":\"home\",\"_hash\":\"be71e668b9d842787d9f66bfcab61192c8fb92eda694233231ab56790bb7dd4d\",\"moduleSequenceNumber\":164}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hashes = {};\\r\\n    const files = ns.ls('home', '.js');\\r\\n    for (const file of files) {\\r\\n        const contents = ns.read(file);\\r\\n        hashes[file] = getHash(contents);\\r\\n    }\\r\\n    while (true) {\\r\\n        const files = ns.ls('home', '.js');\\r\\n        for (const file of files) {\\r\\n            const contents = ns.read(file);\\r\\n            const hash = getHash(contents);\\r\\n            if (hash != hashes[file]) {\\r\\n                ns.tprint(`INFO: Detected change in ${file}`);\\r\\n                const processes = ns.ps().filter((p) => {\\r\\n                    return p.filename == file;\\r\\n                });\\r\\n                for (const process of processes) {\\r\\n                    ns.tprint(`INFO: Restarting ${process.filename} ${process.args} -t ${process.threads}`);\\r\\n                    if (process.filename != ns.getScriptName()) {\\r\\n                        ns.kill(process.pid, ns.getHostname());\\r\\n                        ns.run(process.filename, process.threads, ...process.args);\\r\\n                    }\\r\\n                    else {\\r\\n                        ns.spawn(process.filename, process.threads, ...process.args);\\r\\n                    }\\r\\n                }\\r\\n                hashes[file] = hash;\\r\\n            }\\r\\n        }\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n}\\r\\nconst getHash = (input) => {\\r\\n    let hash = 0, i, chr;\\r\\n    if (input.length === 0)\\r\\n        return hash;\\r\\n    for (i = 0; i < input.length; i++) {\\r\\n        chr = input.charCodeAt(i);\\r\\n        hash = ((hash << 5) - hash) + chr;\\r\\n        hash |= 0; // Convert to 32bit integer\\r\\n    }\\r\\n    return hash;\\r\\n};\",\"filename\":\"watcher.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"watcher.js\",\"url\":\"blob:file:///30b75ecc-fdac-4bc2-a2ea-e9b88fa42509\"}],\"ramUsage\":5.55,\"server\":\"home\",\"_hash\":\"a8593bbd317187fe7996762fd39b7ddf48a9c7b0d49bdafea9426846c88a3f80\",\"moduleSequenceNumber\":165}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { NS } from '../../../NetscriptDefinitions'\\r\\nexport async function main(ns : NS) {\\r\\n    const args = ns.flags([[\\\"help\\\", false]])\\r\\n    const server = ns.args[0]\\r\\n    if (args.help || !server) {\\r\\n        ns.tprint(\\\"This script does a more detailed analysis of a server.\\\")\\r\\n        ns.tprint(`Usage: run ${ns.getScriptName()} SERVER`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n    const ram = ns.getServerRam(server)\\r\\n    const money = ns.getServerMoneyAvailable(server)\\r\\n    const maxMoney = ns.getServerMaxMoney(server)\\r\\n    const minSec = ns.getServerMinSecurityLevel(server)\\r\\n    const sec = ns.getServerSecurityLevel(server)\\r\\n    ns.tprint(`\\r\\n\\r\\n${server}:\\r\\n    RAM        : ${ram[1]} / ${ram[0]} (${ram[1] / ram[0] * 100}%)\\r\\n    $          : ${ns.nFormat(money, \\\"$0.000a\\\")} / ${ns.nFormat(maxMoney, \\\"$0.000a\\\")} (${(money / maxMoney * 100).toFixed(2)}%)\\r\\n    security   : ${minSec.toFixed(2)} / ${sec.toFixed(2)}\\r\\n    growth     : ${ns.getServerGrowth(server)}\\r\\n    hack time  : ${ns.tFormat(ns.getHackTime(server))}\\r\\n    grow time  : ${ns.tFormat(ns.getGrowTime(server))}\\r\\n    weaken time: ${ns.tFormat(ns.getWeakenTime(server))}\\r\\n    grow x2    : ${(ns.growthAnalyze(server, 2)).toFixed(2)} threads\\r\\n    grow x3    : ${(ns.growthAnalyze(server, 3)).toFixed(2)} threads\\r\\n    grow x4    : ${(ns.growthAnalyze(server, 4)).toFixed(2)} threads\\r\\n    hack 10%   : ${(.10 / ns.hackAnalyze(server)).toFixed(2)} threads\\r\\n    hack 25%   : ${(.25 / ns.hackAnalyze(server)).toFixed(2)} threads\\r\\n    hack 50%   : ${(.50 / ns.hackAnalyze(server)).toFixed(2)} threads\\r\\n    hackChance : ${(ns.hackAnalyzeChance(server) * 100).toFixed(2)}%\\r\\n`)\\r\\n}\",\"filename\":\"/bin/official-scripts/analyze_server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/bin/official-scripts/analyze_server.js\",\"url\":\"blob:file:///3dbf07ec-7322-438d-9674-d881dbdac00f\"}],\"ramUsage\":5.35,\"server\":\"home\",\"_hash\":\"77cb1b8e95c820176a64b09265b46c74196b80ec47d3c968d93b230a00b0cdd3\",\"moduleSequenceNumber\":166}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will generate money by hacking a target server.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else {\\r\\n            await ns.hack(hostname)\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"/bin/official-scripts/basic_hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"home\",\"_hash\":\"b0cacb28e68c860ccb8433ea3f99a6f15304d1f1cef1eca5e3e62b792002f7e3\",\"moduleSequenceNumber\":167}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const args = ns.flags([[\\\"help\\\", false]])\\r\\n    if (args.help) {\\r\\n        ns.tprint(\\\"This script will enhance your HUD (Heads up Display) with custom statistics.\\\")\\r\\n        ns.tprint(`Usage: run ${ns.getScriptName()}`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()}`)\\r\\n        return\\r\\n    }\\r\\n    \\r\\n    const doc = document // This is expensive! (25GB RAM) Perhaps there's a way around it? ;)\\r\\n    const hook0 = doc.getElementById('overview-extra-hook-0')\\r\\n    const hook1 = doc.getElementById('overview-extra-hook-1')\\r\\n    while (true) {\\r\\n        try {\\r\\n            const headers = []\\r\\n            const values = []\\r\\n            // Add script income per second\\r\\n            headers.push(\\\"ScrInc\\\")\\r\\n            values.push(ns.getScriptIncome()[0].toPrecision(5) + '/sec')\\r\\n            // Add script exp gain rate per second\\r\\n            headers.push(\\\"ScrExp\\\")\\r\\n            values.push(ns.getScriptExpGain().toPrecision(5) + '/sec')\\r\\n            // TODO: Add more neat stuff\\r\\n\\r\\n            // Now drop it into the placeholder elements\\r\\n            hook0.innerText = headers.join(\\\" \\\\n\\\")\\r\\n            hook1.innerText = values.join(\\\"\\\\n\\\")\\r\\n        } catch (err) { // This might come in handy later\\r\\n            ns.print(\\\"ERROR: Update Skipped: \\\" + String(err))\\r\\n        }\\r\\n        await ns.sleep(1000)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/official-scripts/custom_stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":26.8,\"server\":\"home\",\"_hash\":\"3bebc4642e62d6f30ac6097eb92d5283fb3fba44ca03e7cd3143814adafd82ad\",\"moduleSequenceNumber\":168}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function scan(ns, parent, server, list) {\\r\\n    const children = ns.scan(server)\\r\\n    for (let child of children) {\\r\\n        if (parent == child) {\\r\\n            continue\\r\\n        }\\r\\n        list.push(child)\\r\\n        \\r\\n        scan(ns, server, child, list)\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function list_servers(ns) {\\r\\n    const list = []\\r\\n    scan(ns, '', 'home', list)\\r\\n    return list\\r\\n}\\r\\n\\r\\nexport async function main(ns) {\\r\\n    const args = ns.flags([[\\\"help\\\", false]])\\r\\n    if (args.help) {\\r\\n        ns.tprint(\\\"This script helps you find an unsolved coding contract.\\\")\\r\\n        ns.tprint(`Usage: run ${ns.getScriptName()}`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()}`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    let servers = list_servers(ns)\\r\\n    const boughtServers = ns.getPurchasedServers(ns)\\r\\n    servers = servers.filter(s => !boughtServers.includes(s))\\r\\n    const hostname = servers.find(s => ns.ls(s).find(f => f.endsWith(\\\".cct\\\")))\\r\\n    if(!hostname) {\\r\\n        ns.tprint(\\\"No coding contract found.\\\")\\r\\n        return\\r\\n    }\\r\\n\\r\\n    ns.tprint(`Found coding contract on '${hostname}'.`)\\r\\n}\",\"filename\":\"/bin/official-scripts/find_coding_contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":4.25,\"server\":\"home\",\"_hash\":\"63df5b1bd7607c7de7595766dc781c0b114b8bf526b5a1d477cde3db78e1ae93\",\"moduleSequenceNumber\":169}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function recursiveScan(ns, parent, server, target, route) {\\r\\n    const children = ns.scan(server)\\r\\n    for (let child of children) {\\r\\n        if (parent == child) {\\r\\n            continue\\r\\n        }\\r\\n        if (child == target) {\\r\\n            route.unshift(child)\\r\\n            route.unshift(server)\\r\\n            return true\\r\\n        }\\r\\n\\r\\n        if (recursiveScan(ns, server, child, target, route)) {\\r\\n            route.unshift(server)\\r\\n            return true\\r\\n        }\\r\\n    }\\r\\n    return false\\r\\n}\\r\\n\\r\\nexport async function main(ns) {\\r\\n    const args = ns.flags([[\\\"help\\\", false]])\\r\\n    let route = []\\r\\n    let server = args._[0]\\r\\n    if (!server || args.help) {\\r\\n        ns.tprint(\\\"This script helps you find a server on the network and shows you the path to get to it.\\\")\\r\\n        ns.tprint(`Usage: run ${ns.getScriptName()} SERVER`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    recursiveScan(ns, '', 'home', server, route)\\r\\n    for (const i in route) {\\r\\n        await ns.sleep(500)\\r\\n        const extra = i > 0 ? \\\"└ \\\" : \\\"\\\"\\r\\n        ns.tprint(`${\\\" \\\".repeat(i)}${extra}${route[i]}`)\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function autocomplete(data, args) {\\r\\n    return data.servers\\r\\n}\",\"filename\":\"/bin/official-scripts/find_server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.8,\"server\":\"home\",\"_hash\":\"7157a97ac88639e46c4756157efe60bcaef4e7af29f93b2282d578a971d71622\",\"moduleSequenceNumber\":170}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        ['refreshrate', 200],\\r\\n        ['help', false],\\r\\n    ])\\r\\n    if (flags._.length === 0 || flags.help) {\\r\\n        ns.tprint(\\\"This script helps visualize the money and security of a server.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n    ns.tail()\\r\\n    ns.disableLog('ALL')\\r\\n    while (true) {\\r\\n        const server = flags._[0]\\r\\n        let money = ns.getServerMoneyAvailable(server)\\r\\n        if (money === 0) money = 1\\r\\n        const maxMoney = ns.getServerMaxMoney(server)\\r\\n        const minSec = ns.getServerMinSecurityLevel(server)\\r\\n        const sec = ns.getServerSecurityLevel(server)\\r\\n        ns.clearLog(server)\\r\\n        ns.print(`${server}:`)\\r\\n        ns.print(` $_______: ${ns.nFormat(money, \\\"$0.000a\\\")} / ${ns.nFormat(maxMoney, \\\"$0.000a\\\")} (${(money / maxMoney * 100).toFixed(2)}%)`)\\r\\n        ns.print(` security: +${(sec - minSec).toFixed(2)}`)\\r\\n        ns.print(` hack____: ${ns.tFormat(ns.getHackTime(server))} (t=${Math.ceil(ns.hackAnalyzeThreads(server, money))})`)\\r\\n        ns.print(` grow____: ${ns.tFormat(ns.getGrowTime(server))} (t=${Math.ceil(ns.growthAnalyze(server, maxMoney / money))})`)\\r\\n        ns.print(` weaken__: ${ns.tFormat(ns.getWeakenTime(server))} (t=${Math.ceil((sec - minSec) * 20)})`)\\r\\n        await ns.sleep(flags.refreshrate)\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function autocomplete(data, args) {\\r\\n    return data.servers\\r\\n}\",\"filename\":\"/bin/official-scripts/monitor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":4.15,\"server\":\"home\",\"_hash\":\"64f7c04e1ae9b3759c2824aa249f4faede8b16b2de54428c752addf0541c4d1e\",\"moduleSequenceNumber\":171}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function scan(ns, parent, server, list) {\\r\\n    const children = ns.scan(server)\\r\\n    for (let child of children) {\\r\\n        if (parent == child) {\\r\\n            continue\\r\\n        }\\r\\n        list.push(child)\\r\\n        \\r\\n        scan(ns, server, child, list)\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function list_servers(ns) {\\r\\n    const list = []\\r\\n    scan(ns, '', 'home', list)\\r\\n    return list\\r\\n}\\r\\n\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst args = ns.flags([[\\\"help\\\", false]])\\r\\n    if (args.help) {\\r\\n        ns.tprint(\\\"This script lists all servers on which you can run scripts.\\\")\\r\\n        ns.tprint(`Usage: run ${ns.getScriptName()}`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()}`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n\\tconst servers = list_servers(ns).filter(s => ns.hasRootAccess(s)).concat(['home'])\\r\\n    for(const server of servers) {\\r\\n        const used = ns.getServerUsedRam(server)\\r\\n        const max = ns.getServerMaxRam(server)\\r\\n        ns.tprint(`${server} is opened. ${used} GB / ${max} GB (${(100*used/max).toFixed(2)}%)`)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/official-scripts/opened_servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.95,\"server\":\"home\",\"_hash\":\"19ca27a80a951473d94facb83a7854560f412bc490735f89e592611d9fa3df23\",\"moduleSequenceNumber\":172}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\",\"filename\":\"/bin/official-scripts/test.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\",\"moduleSequenceNumber\":173}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    //\\r\\n}\",\"filename\":\"//dist/bin/test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"b7b3414b0c61341f0c54f09a3570ce8b1bf3484fcba3300cf3f5d477765345ae\",\"moduleSequenceNumber\":174}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const args = ns.flags([[\\\"help\\\", false]])\\r\\n    if (args.help) {\\r\\n        ns.tprint(\\\"This script will enhance your HUD (Heads up Display) with custom statistics.\\\")\\r\\n        ns.tprint(`Usage: run ${ns.getScriptName()}`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()}`)\\r\\n        return\\r\\n    }\\r\\n    \\r\\n    const doc = document // This is expensive! (25GB RAM) Perhaps there's a way around it? ;)\\r\\n    const hook0 = doc.getElementById('overview-extra-hook-0')\\r\\n    const hook1 = doc.getElementById('overview-extra-hook-1')\\r\\n    while (true) {\\r\\n        try {\\r\\n            const headers = []\\r\\n            const values = []\\r\\n            // Add script income per second\\r\\n            headers.push(\\\"ScrInc\\\")\\r\\n            values.push(ns.getScriptIncome()[0].toPrecision(5) + '/sec')\\r\\n            // Add script exp gain rate per second\\r\\n            headers.push(\\\"ScrExp\\\")\\r\\n            values.push(ns.getScriptExpGain().toPrecision(5) + '/sec')\\r\\n            // TODO: Add more neat stuff\\r\\n\\r\\n            // Now drop it into the placeholder elements\\r\\n            hook0.innerText = headers.join(\\\" \\\\n\\\")\\r\\n            hook1.innerText = values.join(\\\"\\\\n\\\")\\r\\n        } catch (err) { // This might come in handy later\\r\\n            ns.print(\\\"ERROR: Update Skipped: \\\" + String(err))\\r\\n        }\\r\\n        await ns.sleep(1000)\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/custom_stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":26.8,\"server\":\"home\",\"_hash\":\"2d8712883619b967dfbe973bc58befeb0d0520bb2cbe3dfd3f7e22960852658e\",\"moduleSequenceNumber\":175}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { NS } from '../../NetscriptDefinitions'\\r\\nexport async function main(ns : NS) {\\r\\n    const args = ns.flags([[\\\"help\\\", false]])\\r\\n    const server = ns.args[0]\\r\\n    if (args.help || !server) {\\r\\n        ns.tprint(\\\"This script does a more detailed analysis of a server.\\\")\\r\\n        ns.tprint(`Usage: run ${ns.getScriptName()} SERVER`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n    const ram = ns.getServerRam(server)\\r\\n    const money = ns.getServerMoneyAvailable(server)\\r\\n    const maxMoney = ns.getServerMaxMoney(server)\\r\\n    const minSec = ns.getServerMinSecurityLevel(server)\\r\\n    const sec = ns.getServerSecurityLevel(server)\\r\\n    ns.tprint(`\\r\\n\\r\\n${server}:\\r\\n    RAM        : ${ram[1]} / ${ram[0]} (${ram[1] / ram[0] * 100}%)\\r\\n    $          : ${ns.nFormat(money, \\\"$0.000a\\\")} / ${ns.nFormat(maxMoney, \\\"$0.000a\\\")} (${(money / maxMoney * 100).toFixed(2)}%)\\r\\n    security   : ${minSec.toFixed(2)} / ${sec.toFixed(2)}\\r\\n    growth     : ${ns.getServerGrowth(server)}\\r\\n    hack time  : ${ns.tFormat(ns.getHackTime(server))}\\r\\n    grow time  : ${ns.tFormat(ns.getGrowTime(server))}\\r\\n    weaken time: ${ns.tFormat(ns.getWeakenTime(server))}\\r\\n    grow x2    : ${(ns.growthAnalyze(server, 2)).toFixed(2)} threads\\r\\n    grow x3    : ${(ns.growthAnalyze(server, 3)).toFixed(2)} threads\\r\\n    grow x4    : ${(ns.growthAnalyze(server, 4)).toFixed(2)} threads\\r\\n    hack 10%   : ${(.10 / ns.hackAnalyze(server)).toFixed(2)} threads\\r\\n    hack 25%   : ${(.25 / ns.hackAnalyze(server)).toFixed(2)} threads\\r\\n    hack 50%   : ${(.50 / ns.hackAnalyze(server)).toFixed(2)} threads\\r\\n    hackChance : ${(ns.hackAnalyzeChance(server) * 100).toFixed(2)}%\\r\\n`)\\r\\n}\",\"filename\":\"/scripts/analyze_server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":0,\"server\":\"home\",\"_hash\":\"e4c7c3c47c94f399b222b14271a8d28004054e8f8e7575747f502cc8491a5179\",\"moduleSequenceNumber\":176}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function scan(ns, parent, server, list) {\\r\\n    const children = ns.scan(server)\\r\\n    for (let child of children) {\\r\\n        if (parent == child) {\\r\\n            continue\\r\\n        }\\r\\n        list.push(child)\\r\\n        \\r\\n        scan(ns, server, child, list)\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function list_servers(ns) {\\r\\n    const list = []\\r\\n    scan(ns, '', 'home', list)\\r\\n    return list\\r\\n}\\r\\n\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const args = ns.flags([[\\\"help\\\", false]])\\r\\n    if (args.help) {\\r\\n        ns.tprint(\\\"This script lists all servers on which you can run scripts.\\\")\\r\\n        ns.tprint(`Usage: run ${ns.getScriptName()}`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()}`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    const servers = list_servers(ns).filter(s => ns.hasRootAccess(s)).concat(['home'])\\r\\n    for(const server of servers) {\\r\\n        const used = ns.getServerUsedRam(server)\\r\\n        const max = ns.getServerMaxRam(server)\\r\\n        ns.tprint(`${server} is opened. ${used} GB / ${max} GB (${(100*used/max).toFixed(2)}%)`)\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/opened_servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.95,\"server\":\"home\",\"_hash\":\"4062ad76a68216defb5723bfb93034ebe58b30c2094640821db5ca5e19b35d79\",\"moduleSequenceNumber\":177}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        ['refreshrate', 200],\\r\\n        ['help', false],\\r\\n    ])\\r\\n    if (flags._.length === 0 || flags.help) {\\r\\n        ns.tprint(\\\"This script helps visualize the money and security of a server.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n    ns.tail()\\r\\n    ns.disableLog('ALL')\\r\\n    while (true) {\\r\\n        const server = flags._[0]\\r\\n        let money = ns.getServerMoneyAvailable(server)\\r\\n        if (money === 0) money = 1\\r\\n        const maxMoney = ns.getServerMaxMoney(server)\\r\\n        const minSec = ns.getServerMinSecurityLevel(server)\\r\\n        const sec = ns.getServerSecurityLevel(server)\\r\\n        ns.clearLog(server)\\r\\n        ns.print(`${server}:`)\\r\\n        ns.print(` $_______: ${ns.nFormat(money, \\\"$0.000a\\\")} / ${ns.nFormat(maxMoney, \\\"$0.000a\\\")} (${(money / maxMoney * 100).toFixed(2)}%)`)\\r\\n        ns.print(` security: +${(sec - minSec).toFixed(2)}`)\\r\\n        ns.print(` hack____: ${ns.tFormat(ns.getHackTime(server))} (t=${Math.ceil(ns.hackAnalyzeThreads(server, money))})`)\\r\\n        ns.print(` grow____: ${ns.tFormat(ns.getGrowTime(server))} (t=${Math.ceil(ns.growthAnalyze(server, maxMoney / money))})`)\\r\\n        ns.print(` weaken__: ${ns.tFormat(ns.getWeakenTime(server))} (t=${Math.ceil((sec - minSec) * 20)})`)\\r\\n        await ns.sleep(flags.refreshrate)\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function autocomplete(data, args) {\\r\\n    return data.servers\\r\\n}\",\"filename\":\"/scripts/monitor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":4.15,\"server\":\"home\",\"_hash\":\"64f7c04e1ae9b3759c2824aa249f4faede8b16b2de54428c752addf0541c4d1e\",\"moduleSequenceNumber\":178}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// portPusher.js\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  let i = 0;\\n  while (true) {\\n    await ns.writePort(1, `hello${i++}`);\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"/old/data/portPusher.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"29481b57175e8ee3e7909ee3fc517d1eecc7fbbd96614bc30e9e9cfc685875d9\",\"moduleSequenceNumber\":179}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// portWatcher.js\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.tail();\\n  while (true) {\\n    ns.print(ns.readPort(1));\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"/old/data/portWatcher.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"350f11a6924807d91f7fe90a524765412057871f315e3bb9857438dc410dd537\",\"moduleSequenceNumber\":180}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet list = ns.scan(ns.args[0]);\\n\\tlet name;\\n\\n\\tfor (let i in list) {\\n\\t\\tname = ns.scan(list[i]);\\n\\t\\tfor (let n in name) {\\n\\t\\t\\tif (name[n] != \\\"home\\\"){\\n\\t\\t\\t\\tns.tprint(name[n]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\\n//  still not getting the details and writing them to a file but this at least gets server name?\\n//\\t\\twant to seperate the server detail files by ports needed to unlock, one folder per level\",\"filename\":\"/old/data/spider.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.8,\"server\":\"home\",\"_hash\":\"6573541b2d37636105d839cf8424975943720a7b88261937bfbf72da28345ab1\",\"moduleSequenceNumber\":181}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet port = ns.getPortHandle(ns.args[0]);\\n\\tns.tprint(port.data);\\n}\",\"filename\":\"/old/data/tools/emptyPort.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"81fb932a759c855f4e3a461f1bbb38a8407b9209f556f559631320abc097eba2\",\"moduleSequenceNumber\":182}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport const port0 = [\\\"n00dles\\\",\\n\\t\\\"foodnstuff\\\",\\n\\t\\\"sigma-cosmetics\\\",\\n\\t\\\"joesguns\\\",\\n\\t\\\"nectar-net\\\",\\n\\t\\\"harakiri-sushi\\\",\\n\\t\\\"hong-fang-tea\\\"];\\n\\nexport const managedTargets = { \\n\\t0: \\\"harakiri-sushi\\\", \\n\\t1: \\\"iron-gym\\\", \\n\\t2: \\\"phantasy\\\", \\n\\t3: \\\"rho-construction\\\" };\\n\\nexport function statServer(ns, host) {\\n\\treturn sever = {\\n\\t\\t\\\"hostname\\\": \\\"\\\",\\n\\t\\t\\\"maxRAM\\\": ns.getServerMaxRam(host),\\n\\t\\t\\\"baseSecurity\\\": ns.getServerBaseSecurityLevel(host),\\n\\t\\t\\\"minSecurity\\\": ns.getServerMinSecurityLevel(host),\\n\\t\\t\\\"growthRate\\\": ns.getServerGrowth(host)\\n}\\n\\nexport function spider(ns){\\n\\tlet servers = [\\\"home\\\"];\\n\\tconst purchasedServer = '';\\n\\n\\tfor (let serv of servers) {\\n\\t\\tserver.every()\\n\\t\\t\\tservers.append(serv);\\n\\t\\t}\\n}\",\"filename\":\"/old/data/var/list-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":0,\"server\":\"home\",\"_hash\":\"62f996d2e31169ef246732b3a27dbac1a47fe1f2801e4469b3ba206ffdb86a4d\",\"moduleSequenceNumber\":183}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"sleep\\\");\\n\\tvar targetHack = ns.args[0];\\n\\n\\twhile (ns.getServerMoneyAvailable(targetHack) > 0) {\\n\\t\\twhile (ns.getHackingLevel() < ns.getServerMinSecurityLevel(targetHack)){ \\n\\t\\t\\tawait ns.sleep(60000);\\n\\t\\t}\\n\\t\\tawait ns.hack(targetHack);\\n\\t}\\n\\t\\n\\tns.tprint(\\\"REPORT: Drained \\\" + targetHack);\\n}\",\"filename\":\"/old/hack/drain.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.95,\"server\":\"home\",\"_hash\":\"b1ff3eb7eba2bd00e5a48c465f2e5e03e5edd8084f70375b65e4382b3ce9b26c\",\"moduleSequenceNumber\":184}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile (true) {await ns.grow(ns.args[0]); await ns.sleep(1)}\\n}\",\"filename\":\"/old/hack/grindXP.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"home\",\"_hash\":\"1e063fda4894973c80c792a8a042e16eff64a0a2099f1a122e4cc56a948f9603\",\"moduleSequenceNumber\":185}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let targetHack = ns.args[0];\\n    let hostServer = ns.getHostname();\\n\\n    // Call own.ns to get root on the server if needed\\n    if (ns.hasRootAccess(targetHack)==false) {\\n        ns.exec(\\\"/hack/own.ns\\\", \\\"home\\\", 1, targetHack);\\n    };\\n\\n    let currentRam = ns.getServerMaxRam(hostServer) - ns.getServerUsedRam(hostServer);\\n    let processNum = Math.floor( currentRam / ns.getScriptRam(\\\"/hack/selfHack.js\\\"));\\n    \\n    ns.exec(\\\"/hack/selfHack.js\\\", hostServer, processNum, targetHack);\\n}\",\"filename\":\"/old/hack/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.2,\"server\":\"home\",\"_hash\":\"46679fa3bc25d2ce3869197998232120d0f063399cc1baeced2da5628dcef9e5\",\"moduleSequenceNumber\":186}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {maxThreads} from \\\"/hack/tools/hack-lib.js\\\"\\n\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"sleep\\\");\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// i don't care about sleep log messages\\n\\n\\tlet port1 = ns.getPortHandle(1);\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// this is supposed to be how you initialize ports?\\n\\tlet port2 = ns.getPortHandle(2);\\n\\tlet port3 = ns.getPortHandle(3);\\n\\tlet port4 = ns.getPortHandle(4);\\n\\n\\twhile (true) {\\n\\t\\t// Listen for port(1)\\n\\t\\tif (port1.empty() != true) { \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// this is supposed to check and see if the port has data to do something with\\n\\t\\t\\tlet host = port1.data.shift(); \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// this is supposed to grab that data from the port\\n\\t\\t\\tif (ns.hasRootAccess(host)) { \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// if we have root access\\n\\t\\t\\t\\tif (host != \\\"home\\\"){ \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// if the host isn't home\\n\\t\\t\\t\\t\\tns.writePort(2, host);\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// throw the host into port 2\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\telse {\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// if we don't have root\\n\\t\\t\\t\\tns.run(\\\"/hack/waitRoot.js\\\", 1, host);\\t\\t\\t\\t\\t\\t\\t// run the wiatRoot to wait until we can root and do so\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Listen for port(2)\\n\\t\\tif (port2.empty() != true) { \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// this is supposed to check and see if the port has data to do something with\\t\\n\\t\\t\\tlet host = port2.data.shift();\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// this is supposed to grab that data from the port\\n\\t\\t\\tif (ns.getServerMaxRam > 0 && ns.getServerMoneyAvailable > 0){\\t\\t// if the target host has ram and money\\n\\t\\t\\t\\tns.run(\\\"/hack/builder.js\\\", 128, host);\\t\\t\\t\\t\\t\\t\\t// runs the builder locally to set up for selfHack\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Listen for port(3)\\n\\t\\tif (port3.empty() != true) { \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// this is supposed to check and see if the port has data to do something with\\n\\t\\t\\tlet host = port3.data.shift();\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// this is supposed to grab that data from the port\\n\\t\\t\\tns.scp(\\\"/hack/selfHack.js\\\", \\\"home\\\", host);\\t\\t\\t\\t\\t\\t\\t// copies the selfHack script to the host\\n\\t\\t\\tns.exec(\\\"/hack/selfHack.js\\\", host, maxThreads(host));\\t\\t\\t\\t// runs the selfHack for all avaliable threads permitted by ram\\n\\t\\t}\\n\\n\\t\\t// Listen for port(4)\\n\\t\\tif (port4.empty() != true) { \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// this is supposed to check and see if the port has data to do something with\\n\\t\\t\\tlet host = port4.data.shift();\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// this is supposed to grab that data from the port\\n\\t\\t\\tns.scp(\\\"/hack/managedHack.js\\\", \\\"home\\\", host);\\t\\t\\t\\t\\t\\t// copies the managedHack script to the host\\n\\t\\t\\tns.exec(\\\"/hack/managedHack.js\\\", host);\\t\\t\\t\\t\\t\\t\\t\\t// runs the managedHack \\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(600);\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// required sleep function for while true loops\\n\\t}\\n}\",\"filename\":\"/old/hack/listner.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":4.85,\"server\":\"home\",\"_hash\":\"a33659bb454b39fb80ae5bd5ca6ce1a6c690aa5ed7d2156b3f50c2ffc819fca5\",\"moduleSequenceNumber\":187}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"sleep\\\");\\n\\n   \\tlet target = ns.args[0];\\n\\tlet minSec = ns.getServerMinSecurityLevel(target) + 5;\\n\\tlet maxMon = ns.getServerMaxMoney(target) * 0.90;\\n\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > minSec) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < maxMon) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\",\"filename\":\"/old/hack/managedHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"home\",\"_hash\":\"e328713af600be95ac633724529d1c8ec6fab1b881af8cda594c98bb8be414b7\",\"moduleSequenceNumber\":188}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var targetHack = ns.args[0];\\n    var moneyThresh = ns.getServerMaxMoney(targetHack) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(targetHack) + 5;\\n\\n    while (ns.getServerRequiredHackingLevel(ns.getHostname()) > ns.getHackingLevel()) {\\n        await ns.sleep(60000);\\n    }\\n\\n     while(true) {\\n        if (ns.getServerSecurityLevel(targetHack) > securityThresh) {\\n            await ns.weaken(targetHack);\\n        } else if (ns.getServerMoneyAvailable(targetHack) < moneyThresh) {\\n            await ns.grow(targetHack);\\n        } else {\\n            await ns.hack(targetHack);\\n        }\\n    }\\n}\",\"filename\":\"/old/hack/maxMoney.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"home\",\"_hash\":\"9e301651d6beed88e38646561d39cae1ee17f8a4e3c582b4fcde1cb996473d3d\",\"moduleSequenceNumber\":189}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var targetHack = ns.args[0];\\n    var moneyThresh = ns.getServerMaxMoney(targetHack) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(targetHack) + 5;\\n\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n  \\t\\tns.brutessh(targetHack);\\n    }\\n    ns.nuke(targetHack);\\n\\n    while(true) {\\n        if (ns.getServerSecurityLevel(targetHack) > securityThresh) {\\n            await ns.weaken(targetHack);\\n        } else if (ns.getServerMoneyAvailable(targetHack) < moneyThresh) {\\n            await ns.grow(targetHack);\\n        } else {\\n            await ns.hack(targetHack);\\n        }\\n    }\\n}\",\"filename\":\"/old/hack/old/start-hack.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"home\",\"_hash\":\"3043862007d3b4b8212ab8bbe3669838ce4101f4e66341ad0109ab8da1960165\",\"moduleSequenceNumber\":190}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n   var targetHack = ns.args[0];\\n\\n   if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n      ns.brutessh(targetHack);\\n   }\\n   if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n      ns.ftpcrack(targetHack);\\n   }\\n   if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n      ns.relaysmtp(targetHack);\\n   }\\n   if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n      ns.httpworm(targetHack);\\n   }\\n   if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n      ns.sqlinject(targetHack);\\n   }\\n\\n   ns.nuke(targetHack);\\n}\",\"filename\":\"/old/hack/own.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2,\"server\":\"home\",\"_hash\":\"e04e1f7251ebb16d63dfcef995d4032a311ef47330fefd74fdf183cb0168c225\",\"moduleSequenceNumber\":191}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"sleep\\\");\\n\\n\\tlet target = ns.getHostname();\\n\\tlet minSec = ns.getServerMinSecurityLevel(target) + 5;\\n\\tlet maxMon = ns.getServerMaxMoney(target) * 0.75;\\n\\n\\twhile (ns.getServerRequiredHackingLevel(ns.getHostname()) > ns.getHackingLevel()) {\\n\\t\\tawait ns.sleep(60000);\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > minSec) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t}\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < maxMon) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\",\"filename\":\"/old/hack/selfHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"home\",\"_hash\":\"c204f2981e46aea6b9a5b398e5ac4777c08bf2afc271ba7c112a4abee4864618\",\"moduleSequenceNumber\":192}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {maxHack} from \\\"/hack/tools/hack-lib.js\\\"\\n\\nexport async function main(ns) {\\n\\tvar targetHack = ns.args[0];\\n    var moneyThresh = ns.getServerMaxMoney(targetHack) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(targetHack) + 5;\\n    \\n    while(ns.getServerMoneyAvailable(targetHack) < moneyThresh) {\\n        if (ns.getServerSecurityLevel(targetHack) > securityThresh) {\\n            await ns.weaken(targetHack);\\n        }\\n        else if(ns.getServerMoneyAvailable(targetHack) < moneyThresh) {\\n            await ns.grow(targetHack);\\n        }\\n    }\\n\\n    await maxHack(ns, targetHack);\\n}\",\"filename\":\"/old/hack/setup-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.55,\"server\":\"home\",\"_hash\":\"3d559e4893cd1f23fb945a25287931758a43c34bf6d3d1eaad17f03fa9e7ca93\",\"moduleSequenceNumber\":193}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {maxThreads, ignoreHost} from \\\"/hack/tools/hack-lib.js\\\"\\nexport async function main(ns) {\\n\\tconst servers = ns.scan(\\\"home\\\");\\n\\n\\tfor (const target of servers) {\\n\\t\\tif (target != \\\"home\\\" && target != \\\"darkweb\\\") {\\n\\t\\t\\tawait ns.exec(\\\"/hack/waitRoot.js\\\", \\\"home\\\", 1, target);\\n\\t\\t\\tawait ns.scp(\\\"/hack/selfHack.js\\\", \\\"home\\\", target);\\n\\t\\t\\tawait ns.exec(\\\"/hack/selfHack.js\\\", target, maxThreads(ns, \\\"/hack/selfHack.js\\\", target), target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/old/hack/setup-selfHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.9,\"server\":\"home\",\"_hash\":\"a5ecf07c71f217580b1fb49881f8d4e21a8313c5d55ef19bc964d893f68d10c8\",\"moduleSequenceNumber\":194}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar targetServer = ns.args[0];\\n\\n\\tvar processNum = Math.floor(ns.getServerMaxRam(targetServer) / 2.4);\\n\\t\\n\\tns.tprint(processNum);\\n}\",\"filename\":\"/old/hack/tools/getProcessCount.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.65,\"server\":\"home\",\"_hash\":\"747f9a4ac12f61fd092c052fb6c3d4e0627555d1204dd28aa59f6886c1e78b28\",\"moduleSequenceNumber\":195}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet server = ns.getServer(ns.args[0]);\\n\\n\\tawait ns.write(\\\"/data/report/\\\" + server.hostname + \\\".txt\\\", \\\"hostname:\\\" + server.hostname + \\\",\\\", \\\"a\\\");\\n\\tawait ns.write(\\\"/data/report/\\\" + server.hostname + \\\".txt\\\", \\\"maxRam:\\\" + server.maxRam + \\\",\\\", \\\"a\\\");\\n\\tawait ns.write(\\\"/data/report/\\\" + server.hostname + \\\".txt\\\", \\\"numOpenPortsRequired:\\\" + server.numOpenPortsRequired + \\\",\\\", \\\"a\\\");\\n\\tawait ns.write(\\\"/data/report/\\\" + server.hostname + \\\".txt\\\", \\\"requiredHackingSkill:\\\" + server.requiredHackingSkill + \\\",\\\", \\\"a\\\");\\n\\tawait ns.write(\\\"/data/report/\\\" + server.hostname + \\\".txt\\\", \\\"minDifficulty:\\\" + server.minDifficulty + \\\",\\\", \\\"a\\\");\\n\\tawait ns.write(\\\"/data/report/\\\" + server.hostname + \\\".txt\\\", \\\"moneyAvaliable:\\\" + server.moneyAvailable + \\\",\\\", \\\"a\\\");\\n\\tawait ns.write(\\\"/data/report/\\\" + server.hostname + \\\".txt\\\", \\\"moneyMax:\\\" + server.moneyMax + \\\",\\\", \\\"a\\\");\\n\\tawait ns.write(\\\"/data/report/\\\" + server.hostname + \\\".txt\\\", \\\"serverGrowth:\\\" + server.serverGrowth, \\\"a\\\");\\n}\",\"filename\":\"/old/hack/tools/getReport.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.6,\"server\":\"home\",\"_hash\":\"12327049c7fda31d13ae6e57a7bcb7d9ac8bd1c678d0c71d4be22a47b71f6c4e\",\"moduleSequenceNumber\":196}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tprint(ns.scan(\\\"home\\\"));\\n}\",\"filename\":\"/old/hack/tools/getServerList.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.8,\"server\":\"home\",\"_hash\":\"d79cb3e3869f4fcef5465f02bda16c24bddb461873660eeced75a8823682c5da\",\"moduleSequenceNumber\":197}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet check = ns.args[0];\\n    ns.tprint(\\\"Server: \\\" + check + \\\" | Max Money: \\\" + ns.getServerMaxMoney(check));\\n}\",\"filename\":\"/old/hack/tools/getServerMaxMoney.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"home\",\"_hash\":\"36e32590559abc3741fb2500ed1a95dc054124f69b4a9e2a163c2cf251691635\",\"moduleSequenceNumber\":198}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function maxNUKE(ns, targetHack) {\\n   // Function to run all the port openers and NUKE the server that you hand off.\\n   // One argument expected, string for the target of the NUKE\\n   // Returns true if you already have root, false if NUKE failed, and the number of ports that were opened if it was sucessful\\n\\n   var portsOpened = 0;\\n\\n   if (ns.hasRootAccess(targetHack) == true) {\\n      return true;\\n   }\\n   else {\\n      if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n         ns.brutessh(targetHack);\\n         portsOpened++;\\n      }\\n      if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n         ns.ftpcrack(targetHack);\\n         portsOpened++;\\n      }\\n      if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n         ns.relaysmtp(targetHack);\\n         portsOpened++;\\n      }\\n      if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n         ns.httpworm(targetHack);\\n         portsOpened++;\\n      }\\n      if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n         ns.sqlinject(targetHack);\\n         portsOpened++;\\n      }\\n      ns.nuke(targetHack);\\n\\n      //    If able to use terminal commands, un-comment the below lines to also backdoor the server\\n      //    ns.connect(targetHack);\\n      //    await ns.installBackdoor();\\n      //    ns.connect(\\\"home\\\");\\n\\n      if (ns.hasRootAccess(targetHack) == false) {\\n         return false;\\n      }\\n      else {\\n         return portsOpened;\\n      }\\n   }\\n}\\n\\nexport function maxThreads(ns, script, targetServer) {\\n   // Function to determine the maxiumum number of threads that can be ran on a server\\n   // Two arguments expected, the script to be ran and the target server they're going to be run on\\n   // Returns the number of threads, will return 0 if there is no space to run the script at all on the server\\n\\n   var threads = 1;\\n   var scriptRAM = ns.getScriptRam(script);\\n   var serverMaxRAM = ns.getServerMaxRam(targetServer);\\n   var serverUsedRAM = ns.getServerUsedRam(targetServer);\\n\\n   if (scriptRAM > serverMaxRAM) {\\n      return 0;\\n   }\\n   else {\\n      threads = Math.floor((serverMaxRAM - serverUsedRAM) / scriptRAM);\\n      return threads;\\n   }\\n}\\n\\nexport async function maxRun(ns, script, targetServer, scriptArgs) {\\n   // Function to copy the script to target server and run script with the passed through arguement the max number of threads\\n   // Three arguments expected, the script to be copied and executed, the server to copy the script to, and the argument for the script\\n   // Returns false if maxThreads() returns false, otherwise returns true\\n   var threads = maxThreads(script, targetServer);\\n\\n   if (threads = 0) {\\n      return false;\\n   }\\n   else {\\n      await ns.scp(script, \\\"home\\\", targetServer);\\n      ns.exec(script, targetServer, threads, scriptArgs);\\n\\n      return true;\\n   }\\n}\\n\\nexport async function maxGrow(ns, targetHack) {\\n   // Function to keep grow() a target until it reaches the threshold\\n   // One arguemnt expected, the target of the hack\\n   // Returns true when grow() loop has completed\\n\\n   var moneyThresh = ns.getServerMaxMoney(targetHack) * 0.75;\\n\\n   while (ns.getServerMoneyAvailable(targetHack) < moneyThresh) {\\n      await ns.weaken(targetHack);\\n      await ns.grow(targetHack);\\n   }\\n\\n   return true;\\n}\\n\\nexport async function maxWeaken(ns, targetHack) {\\n   // Function to keep weaken() a target until it reaches the threshold\\n   // One arguemnt expected, the target of the hack\\n   // Returns true when weaken() loop has completed\\n\\n   var securityThresh = ns.getServerMinSecurityLevel(targetHack) + 5;\\n\\n   while (ns.getServerSecurityLevel(targetHack) > securityThresh) {\\n      await ns.weaken(targetHack);\\n   }\\n\\n   return true;\\n}\\n\\nexport async function maxHack(ns, targetHack) {\\n   // Function to hack() after making sure the target is under the weaken and grow threshold, will wait until hacking level is high enough to effect the server\\n   // One arguemnt expected, the target of the hack\\n   // Infinite loop, not expected to return anything\\n\\n   while (ns.getServerRequiredHackingLevel(targetHack) > ns.getHackingLevel()) {\\n      await ns.sleep(60000);\\n   }\\n\\n   while (true) {\\n      await ns.weaken(targetHack);\\n      await ns.grow(targetHack);\\n      await ns.weaken(targetHack);\\n      await ns.hack(targetHack);\\n   }\\n}\\n\\nexport async function spider(ns) {\\n   const servers = ['home'];\\n\\n   for (const server of servers)\\n      ns.scan(server)\\n         .filter((x) => !servers.includes(x))\\n         .forEach((x) => servers.push(x));\\n\\n   return servers;\\n}\",\"filename\":\"/old/hack/tools/hack-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.3,\"server\":\"home\",\"_hash\":\"18f56982589d0db7c90eeda9aa36310259b2fa590e2f24ded82a55e71f90b702\",\"moduleSequenceNumber\":199}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetHack = ns.getServer(ns.args[0]);\\n\\n\\twhile (targetHack.numOpenPortsRequired > targetHack.openPortCount) {\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && targetHack.sshPortOpen == false) {\\n\\t\\t\\tns.brutessh(targetHack.hostname);\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && targetHack.ftpPortOpen == false) {\\n\\t\\t\\tns.ftpcrack(targetHack.hostname);\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && targetHack.smtpPortOpen == false) {\\n\\t\\t\\tns.relaysmtp(targetHack.hostname);\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && targetHack.httpPortOpen == false) {\\n\\t\\t\\tns.httpworm(targetHack.hostname);\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && targetHack.sqlPortOpen == false) {\\n\\t\\t\\tns.sqlinject(targetHack.hostname);\\n\\t\\t}\\n\\n\\t\\tns.print(targetHack.openPortCount + \\\" / \\\" + targetHack.numOpenPortsRequired)\\n\\t\\tawait ns.sleep(60000);\\n\\t}\\n\\n\\tns.nuke(targetHack.hostname);\\n\\n\\tns.writePort(3, targetHack.hostname);\\n}\",\"filename\":\"/old/hack/waitRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":4,\"server\":\"home\",\"_hash\":\"9c4ad9409839b0385ff322977a1fee8b5fe5d885ea460b75f92c2426ec9c23a4\",\"moduleSequenceNumber\":200}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\n\\t// Buy all the nodes I want\\n\\twhile (ns.hacknet.numNodes() < 8){\\n\\t\\tif (ns.getServerMoneyAvailable(\\\"home\\\") > ns.hacknet.getPurchaseNodeCost()){\\n\\t\\t\\tns.hacknet.purchaseNode();\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(60000);\\n\\t}\\n\\n\\tns.spawn(\\\"/net/upgradeNodes.js\\\");\\n}\",\"filename\":\"/old/net/buyNodes.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":7.7,\"server\":\"home\",\"_hash\":\"5d0976c64dc1236da9875da2ea4ecb166d72375dcd491af11e5d3be150d9188f\",\"moduleSequenceNumber\":201}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet node = 0;\\n\\twhile (node < ns.hacknet.numNodes()) {\\n\\n\\t\\tlet upgradedLevel = false;\\n\\t\\tlet upgradedRAM = false;\\n\\t\\tlet upgradedCore = false;\\n\\t\\tlet notUpgraded = true;\\n\\n\\t\\t// Loop through getting Levels, RAM, and Cores\\n\\t\\twhile (notUpgraded == true) {\\n\\t\\t\\tif (upgradedLevel == false) {\\n\\t\\t\\t\\tif (ns.getServerMoneyAvailable(\\\"home\\\") > ns.hacknet.getLevelUpgradeCost(node)) {\\n\\t\\t\\t\\t\\tns.hacknet.upgradeLevel(node);\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif (ns.hacknet.getNodeStats(node).level == 200) {\\n\\t\\t\\t\\t\\tupgradedLevel = true;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (upgradedRAM == false) {\\n\\t\\t\\t\\tif (ns.getServerMoneyAvailable(\\\"home\\\") > ns.hacknet.getRamUpgradeCost(node)) {\\n\\t\\t\\t\\t\\tns.hacknet.upgradeRam(node);\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif (ns.hacknet.getNodeStats(node).ram == 64) {\\n\\t\\t\\t\\t\\tupgradedRAM = true;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (upgradedCore == false) {\\n\\t\\t\\t\\tif (ns.getServerMoneyAvailable(\\\"home\\\") > ns.hacknet.getCoreUpgradeCost(node)) {\\n\\t\\t\\t\\t\\tns.hacknet.upgradeCore(node);\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif (ns.hacknet.getNodeStats(node).cores == 16) {\\n\\t\\t\\t\\t\\tupgradedCore = true;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (upgradedLevel == true && upgradedRAM == true && upgradedCore == true) {\\n\\t\\t\\t\\tnotUpgraded == false;\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(6000);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(6000);\\n\\t\\tnode++;\\n\\t}\\n}\",\"filename\":\"/old/net/upgradeNodes.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.7,\"server\":\"home\",\"_hash\":\"8c3af0f6116f56b018950957cf9e5b9e18eb007b697fd34f565196a110f699f0\",\"moduleSequenceNumber\":202}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Array of all servers that don't need any ports opened to gain root access. These have 16 GB of RAM\\r\\nvar servers0Port = [\\\"n00dles\\\",\\r\\n                    \\\"sigma-cosmetics\\\",\\r\\n                    \\\"joesguns\\\",\\r\\n                    \\\"nectar-net\\\",\\r\\n                    \\\"hong-fang-tea\\\",\\r\\n                    \\\"harakiri-sushi\\\"];\\r\\n\\r\\n// Array of all servers that only need 1 port opened to gain root access. These have 32 GB of RAM\\r\\nvar servers1Port = [\\\"neo-net\\\",\\r\\n                    \\\"zer0\\\",\\r\\n                    \\\"max-hardware\\\",\\r\\n                    \\\"iron-gym\\\"];\\r\\n\\r\\n// Copy our scripts onto each server that requires 0 ports to gain root access. Then use nuke() to gain admin access and run the scripts.\\r\\nfor (var i = 0; i < servers0Port.length; ++i) {\\r\\n    var serv = servers0Port[i];\\r\\n\\r\\n    scp(\\\"/postAug/early-hack.script\\\", serv);\\r\\n    nuke(serv);\\r\\n    exec(\\\"/postAug/early-hack.script\\\", serv, 6);\\r\\n}\\r\\n\\r\\n// Setup purchase of 8GB servers to fill out avaliable servers. These also run the early-hack script.\\r\\nexec(\\\"purchase-8gb.script\\\", \\\"home\\\", 1);\\r\\n\\r\\n// Wait until we acquire the \\\"BruteSSH.exe\\\" program\\r\\nwhile (!fileExists(\\\"BruteSSH.exe\\\")) {\\r\\n    sleep(60000);\\r\\n}\\r\\n\\r\\n// Copy our scripts onto each server that requires 1 port to gain root access. Then use brutessh() and nuke() to gain admin access and run the scripts.\\r\\nfor (var i = 0; i < servers1Port.length; ++i) {\\r\\n    var serv = servers1Port[i];\\r\\n\\r\\n    scp(\\\"/postAug/early-hack.script\\\", serv);\\r\\n    brutessh(serv);\\r\\n    nuke(serv);\\r\\n    exec(\\\"/postAug/early-hack.script\\\", serv, 12);\\r\\n}\",\"filename\":\"/old/postAug/old/postAug.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.7,\"server\":\"home\",\"_hash\":\"cd12014c024ca1ee66dfc4e44a77b333fd298edf51229ca0cd4530ea50149431\",\"moduleSequenceNumber\":203}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Defines the \\\"target server\\\", which is the server\\r\\nvar target = \\\"joesguns\\\";\\r\\n\\r\\n// Defines how much money a server should have before we hack it\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\r\\n\\r\\n// Defines the maximum security level the target server can have. \\r\\n// If the target's security level is higher than this, we'll weaken it before doing anything else\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\n// If we have the BruteSSH.exe program, use it to open the SSH Port on the target server\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n    brutessh(target);\\r\\n}\\r\\n\\r\\n// Get root access to target server\\r\\nnuke(target);\\r\\n\\r\\n// Infinite loop that continously hacks/grows/weakens the target server\\r\\nwhile(true) {\\r\\n    if (getServerSecurityLevel(target) > securityThresh) {\\r\\n        // If the server's security level is above our threshold, weaken it\\r\\n        weaken(target);\\r\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n        // If the server's money is less than our threshold, grow it\\r\\n        grow(target);\\r\\n    } else {\\r\\n        // Otherwise, hack it\\r\\n        hack(target);\\r\\n    }\\r\\n}\",\"filename\":\"/old/postAug/old/early-hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"home\",\"_hash\":\"94da2d43bcabcb9018d05a248c5509c0d7e01c288b056c17c41930f61b9674f3\",\"moduleSequenceNumber\":204}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n// Creates a global variable for who's being targeted to allow for updated targeting after upgrades are aquired.\\nexport async function main(ns) {\\n\\tvar targetHack = \\\"harakiri-sushi\\\";\\n\\tvar scriptHack = \\\"/hack/start-hack.ns\\\";\\n\\n\\t// Array of all servers that don't need any ports opened to gain root access. These have 16 GB of RAM\\n\\tvar servers0Port = [\\\"foodnstuff\\\",\\n\\t\\t\\t\\t\\t\\t\\\"sigma-cosmetics\\\",\\n\\t\\t\\t\\t\\t\\t\\\"joesguns\\\",\\n\\t\\t\\t\\t\\t\\t\\\"nectar-net\\\",\\n\\t\\t\\t\\t\\t\\t\\\"hong-fang-tea\\\",\\n\\t\\t\\t\\t\\t\\t\\\"harakiri-sushi\\\"];\\n\\n\\t// Array of all servers that only need 1 port opened to gain root access. These have 32 GB of RAM\\n\\tvar servers1Port = [\\\"neo-net\\\",\\n\\t\\t\\t\\t\\t\\t\\\"zer0\\\",\\n\\t\\t\\t\\t\\t\\t\\\"max-hardware\\\",\\n\\t\\t\\t\\t\\t\\t\\\"iron-gym\\\"];\\n\\n\\tns.exec(scriptHack, \\\"home\\\", 12, targetHack);\\n\\n\\t// Copy our scripts onto each server that requires 0 ports to gain root access. Then use nuke() to gain admin access and run the scripts.\\n\\tfor (var i = 0; i < servers0Port.length; ++i) {\\n\\t\\tvar serv = servers0Port[i];\\n\\n\\t\\tawait ns.scp(scriptHack, serv);\\n\\t\\tns.nuke(serv);\\n\\t\\tns.exec(scriptHack, serv, 6, targetHack);\\n\\t}\\n\\tns.toast(\\\"All 0 Port Servers Hacked\\\");\\n\\n\\t// Setup purchase of 8GB servers to fill out avaliable servers.\\n\\tns.exec(\\\"/serv/pserv.ns\\\", \\\"home\\\", 1, 8);\\n\\n\\t// Wait until we acquire the \\\"BruteSSH.exe\\\" program\\n\\twhile (!ns.fileExists(\\\"BruteSSH.exe\\\")) {\\n\\t\\tns.toast(\\\"Waiting on BruteSSH.exe\\\");\\n\\t\\tawait ns.sleep(6000000);\\n\\t}\\n\\n\\t// Copy our scripts onto each server that requires 1 port to gain root access. Then use brutessh() and nuke() to gain admin access and run the scripts.\\n\\tfor (var i = 0; i < servers1Port.length; ++i) {\\n\\t\\tvar serv = servers1Port[i];\\n\\n\\t\\tawait ns.scp(scriptHack, serv);\\n\\t\\tns.brutessh(serv);\\n\\t\\tns.nuke(serv);\\n\\t\\tns.exec(scriptHack, serv, 12, targetHack);\\n\\t}\\n\\tns.toast(\\\"All 1 Port Servers Hacked\\\");\\n}\",\"filename\":\"/old/postAug/old/setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.7,\"server\":\"home\",\"_hash\":\"5b5eb7b16db7806af5ae9e20f7bb0d277dc4c27ea6a4b8dd4f68583f3ec5f279\",\"moduleSequenceNumber\":205}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// How much RAM each purchased server will have. In this case, it'll be 8GB.\\r\\nvar ram = 8;\\r\\n\\r\\n// Iterator we'll use for our loop\\r\\nvar i = 0;\\r\\n\\r\\n// Continuously try to purchase servers until we've reached the maximum amount of servers\\r\\nwhile (i < getPurchasedServerLimit()) {\\r\\n    // Check if we have enough money to purchase a server\\r\\n    if (getServerMoneyAvailable(\\\"home\\\") > getPurchasedServerCost(ram)) {\\r\\n        // If we have enough money, then:\\r\\n        //  1. Purchase the server\\r\\n        //  2. Copy our hacking script onto the newly-purchased server\\r\\n        //  3. Run our hacking script on the newly-purchased server with 3 threads\\r\\n        //  4. Increment our iterator to indicate that we've bought a new server\\r\\n        var hostname = purchaseServer(\\\"pserv-\\\" + i, ram);\\r\\n        scp(\\\"/postAug/early-hack.script\\\", hostname);\\r\\n        exec(\\\"/postAug/early-hack.script\\\", hostname, 3);\\r\\n        ++i;\\r\\n    }\\r\\n}\",\"filename\":\"/old/postAug/old/purchase-8gb.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.15,\"server\":\"home\",\"_hash\":\"3e3568a4692b5e137d3b7931994b26c9e2b832763e21a26f9146fe33e17de9de\",\"moduleSequenceNumber\":206}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport { maxNUKE, maxThreads } from \\\"/hack/tools/hack-lib.js\\\"\\n\\nexport async function main(ns) {\\n\\tvar drainServers = [\\\"n00dles\\\",\\n\\t\\t\\t\\\"foodnstuff\\\",\\n\\t\\t\\t\\\"sigma-cosmetics\\\",\\n\\t\\t\\t\\\"joesguns\\\",\\n\\t\\t\\t\\\"nectar-net\\\",\\n\\t\\t\\t\\\"harakiri-sushi\\\",\\n\\t\\t\\t\\\"hong-fang-tea\\\"]\\n\\n\\t// Drains all the money from the start servers\\n\\tfor (var i = 0; i < drainServers.length; i++) {\\n\\t\\tawait maxNUKE(ns, drainServers[i]);\\n\\t\\tns.run(\\\"/hack/drain.js\\\", 256, drainServers[i]);\\n\\t\\tawait ns.sleep(60000);\\n\\t}\\n\\n\\t// Runs the setup to propagate selfHack\\n\\tns.run(\\\"/hack/setup-startHack.js\\\");\\n\\n\\t// Sets up starting purchasedServers\\n\\tns.run(\\\"/serv/buildBotnet.js\\\", 1, 8);\\n\\n\\t// Sets up Hacknet \\n\\tns.run(\\\"/net/buyNodes.js\\\");\\n}\",\"filename\":\"/old/postAug/setup-CashRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.05,\"server\":\"home\",\"_hash\":\"be0a16ebc03c42a976ff2fefb9157e607b57b62ada98eab66450f967659cc042\",\"moduleSequenceNumber\":207}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {maxThreads, maxNUKE} from \\\"/hack/tools/hack-lib.js\\\"\\nexport async function main(ns) {\\n\\tlet ram = ns.args[0];\\n\\n\\t// Gets the list of servers and removes all of them\\n\\tlet serverList = ns.getPurchasedServers();\\n\\tfor (let server in serverList) {\\n\\t\\tns.killall(serverList[server]);\\n\\t\\tns.deleteServer(serverList[server]);\\n\\t}\\n\\n\\t// Purchases all the server slots at the requested size and spits their name to port4\\n\\tlet i = 0;\\n\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\n\\t\\tif (ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tlet name = ns.purchaseServer(\\\"serv-\\\"+ ram + \\\"-\\\" + i, ram);\\n\\t\\t// here's the port write attempt....\\n\\t\\t//\\tawait ns.tryWritePort(4, name);\\n\\n\\t\\t// since I'm not getting the ports working atm, here's the manual process\\n\\t\\t\\tmaxNUKE(ns, \\\"joesguns\\\");\\n\\t\\t\\tawait ns.scp(\\\"/hack/grindXP.js\\\", \\\"home\\\", name);\\n\\t\\t\\tns.exec(\\\"/hack/grindXP.js\\\", name, maxThreads(ns, \\\"/hack/grindXP.js\\\", name), \\\"joesguns\\\");\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(6);\\n\\t}\\n\\n\\treturn ram;\\n}\",\"filename\":\"/old/serv/buildBotnet.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":11.8,\"server\":\"home\",\"_hash\":\"000e46d698e99a6b8a59546f090827b125c294e3971a07edb21ad277373aac47\",\"moduleSequenceNumber\":208}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t// Will puchase servers up to the limit with the requested RAM value\\n\\tvar ram = ns.args[0];\\n\\tvar i = 0;\\n\\t\\n\\tvar targetHack = \\\"harakiri-sushi\\\";\\n\\tvar scriptHack = \\\"/hack/start-hack.ns\\\";\\n\\n\\tns.tprint(\\\"Per-Server Cost Estimate: \\\" + ns.getPurchasedServerCost(ram));\\n\\n\\twhile (i < ns.getPurchasedServerLimit()) {\\n\\t\\tif (ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tvar hostname = ns.purchaseServer(\\\"pserv-\\\" + i, ram);\\n\\t\\t\\tawait ns.scp(scriptHack, hostname);\\n\\t\\t\\tns.exec(scriptHack, hostname, 3, targetHack);\\n            i++;\\n\\t\\t\\tns.toast(hostname + \\\" Purchased!\\\");\\n\\t\\t}\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n\\n\\tns.toast(\\\"Purchased Servers at Limit\\\");\\n}\",\"filename\":\"/old/serv/old/pserv.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.15,\"server\":\"home\",\"_hash\":\"397ce68b9a449a83b85645fd155d365ae9f39fe68090bbf8e5f7f8e60f425b6c\",\"moduleSequenceNumber\":209}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar serv = ns.getPurchasedServers();\\n\\n\\t// Remove all the servers in the list after killing any scripts\\n\\tfor (var i = 0; i < serv.length; i++) {\\n\\t\\tns.killall(serv[i]);\\n\\t\\tns.deleteServer(serv[i]);\\n\\t}\\n\\tns.tprint(\\\"RSERV COMPLETE\\\");\\n}\",\"filename\":\"/old/serv/old/rserv.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.6,\"server\":\"home\",\"_hash\":\"2ff6e6cd5fc98038fb9ce1fbaaeae8e65846e68cde3b6c49efafa5d1f71aa7c7\",\"moduleSequenceNumber\":210}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {maxThreads} from \\\"/hack/tools/hack-lib.js\\\"\\n\\nexport function rServ(ns) {\\n\\t// This function iterates through all purchased servers and kill the scripts on them then deletes them\\n\\t// No arguments expected\\n\\t// Returns the number of purchased servers removed\\n\\n    // Get names for all existing purchased servers\\n\\tvar serv = ns.getPurchasedServers();\\n\\n\\t// Remove all the servers in the list after killing any scripts\\n\\tfor (var i = 0; i < serv.length; i++) {\\n\\t\\tns.killall(serv[i]);\\n\\t\\tns.deleteServer(serv[i]);\\n\\t}\\n\\n\\treturn i;\\n}\\n\\nexport async function pServ(ns, atRAM) {\\n\\t// This purchases a server at a given RAM value\\n\\t// One arguement expected, the ammount of RAM for the servers to be purchased at\\n\\t// Returns purchased server name if purchased, false if above server limit\\n\\n\\tif (ns.getPurchasedServerLimit() == 25) {\\n\\t\\treturn false;\\n\\t}\\n\\n\\tlet needPurchase = true;\\n\\twhile (needPurchase){\\n\\t\\tif (ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(atRAM)) {\\n\\t\\t\\tlet serverName = ns.purchaseServer(\\\"serv-\\\" + i, atRAM);\\n\\t\\t\\tneedPurchase = false;\\n\\t\\t}\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n\\n\\treturn serverName;\\n}\\n\\nexport async function uServ(ns, scriptArray, targetServer, argument) {\\n\\t// This function updates (or copies for the first time) the scripts that are passed to it in the array and executes the first one with the argument passed through\\n\\t// Two arguments expected, an array of all the scripts that needs to be copied, and where the scripts are going to be copied to, and the argument to run the first script with\\n\\t// Returns true if completed\\n\\n\\tfor (const s in scriptArray ) {\\n\\t\\tawait ns.scp(scriptArray[s], \\\"home\\\", targetServer);\\n\\t}\\n\\n\\tvar threads = maxThreads(ns, scriptArray[0], targetServer);\\n\\tawait ns.exec(scriptArray[0], targetServer, threads, argument);\\t\\n\\treturn true;\\n}\",\"filename\":\"/old/serv/old/serv-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":11.35,\"server\":\"home\",\"_hash\":\"777af0c86759bf74d0bbb4c11251e767bd0b2f19cb28247b1f1697a7e4e9364f\",\"moduleSequenceNumber\":211}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {pServ, uServ} from \\\"/serv/tools/serv-lib.js\\\"\\n\\nexport async function main(ns) {\\t\\n\\tlet s = 0;\\n\\twhile (s < ns.getPurchasedServerLimit()) {\\n\\t\\tawait uServ(ns, [\\\"/hack/setup-hack.js\\\",\\\"/hack/tools/hack-lib.js\\\"], await pServ(ns, 16), \\\"phantasy\\\");\\n\\t\\ts++;\\n\\t}\\n}\",\"filename\":\"/old/serv/old/setup-serv.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":0,\"server\":\"home\",\"_hash\":\"fabbc0ede7551b958600a85817dac1e9c0d44f5f2b5b98382a6b6c414378e44b\",\"moduleSequenceNumber\":212}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t// Will puchase servers up to the limit with the requested RAM value\\n\\tvar ram = 16;\\n\\tvar i = 0;\\n\\t\\n\\tvar targetHack = \\\"phantasy\\\";\\n\\tvar scriptHack = \\\"/hack/setup-hack.js\\\";\\n\\n\\tns.tprint(\\\"per Server Cost Estimate: \\\" + ns.getPurchasedServerCost(ram));\\n\\n\\twhile (i < ns.getPurchasedServerLimit()) {\\n\\t\\tif (ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tvar hostname = ns.purchaseServer(\\\"pserv-\\\" + i, ram);\\n\\t\\t\\tawait ns.scp(\\\"/hack/tools/hack-lib.js\\\", hostname);\\n\\t\\t\\tawait ns.scp(scriptHack, hostname);\\n\\t\\t\\tns.exec(scriptHack, hostname, 6, targetHack);\\n            i++;\\n\\t\\t\\tns.toast(hostname + \\\" Purchased!\\\");\\n\\t\\t}\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n\\n\\tns.toast(\\\"Purchased Servers at Limit\\\");\\n}\",\"filename\":\"/old/serv/old/start-pserv.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.15,\"server\":\"home\",\"_hash\":\"d8ca63394fe20b6e0b17002d3979b806eb1059d40282f9c7966c9db676114edd\",\"moduleSequenceNumber\":213}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar exponent = ns.args[0];\\n    ns.tprint(\\\"RAM: \\\" + 2**exponent + \\\" | Purchase Cost: \\\" + ns.getPurchasedServerCost(2**exponent));\\n}\",\"filename\":\"/old/serv/tools/getPurchasedServerPrice.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.85,\"server\":\"home\",\"_hash\":\"bf281826cb5b93b694067776d9a6a8795f5df398f73e52183003658f09c7707d\",\"moduleSequenceNumber\":214}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var targetHack = ns.args[0];\\n    var moneyThresh = ns.getServerMaxMoney(targetHack) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(targetHack) + 5;\\n\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n  \\t\\tns.brutessh(targetHack);\\n    }\\n    ns.nuke(targetHack);\\n\\n    while(true) {\\n        if (ns.getServerSecurityLevel(targetHack) > securityThresh) {\\n            await ns.weaken(targetHack);\\n        } else if (ns.getServerMoneyAvailable(targetHack) < moneyThresh) {\\n            await ns.grow(targetHack);\\n        } else {\\n            await ns.hack(targetHack);\\n        }\\n    }\\n}\",\"filename\":\"/old/hack/start-hack.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"home\",\"_hash\":\"3043862007d3b4b8212ab8bbe3669838ce4101f4e66341ad0109ab8da1960165\",\"moduleSequenceNumber\":215}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Defines the \\\"target server\\\", which is the server\\r\\nvar target = \\\"joesguns\\\";\\r\\n\\r\\n// Defines how much money a server should have before we hack it\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\r\\n\\r\\n// Defines the maximum security level the target server can have. \\r\\n// If the target's security level is higher than this, we'll weaken it before doing anything else\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\n// If we have the BruteSSH.exe program, use it to open the SSH Port on the target server\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n    brutessh(target);\\r\\n}\\r\\n\\r\\n// Get root access to target server\\r\\nnuke(target);\\r\\n\\r\\n// Infinite loop that continously hacks/grows/weakens the target server\\r\\nwhile(true) {\\r\\n    if (getServerSecurityLevel(target) > securityThresh) {\\r\\n        // If the server's security level is above our threshold, weaken it\\r\\n        weaken(target);\\r\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n        // If the server's money is less than our threshold, grow it\\r\\n        grow(target);\\r\\n    } else {\\r\\n        // Otherwise, hack it\\r\\n        hack(target);\\r\\n    }\\r\\n}\",\"filename\":\"/old/postAug/early-hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"home\",\"_hash\":\"94da2d43bcabcb9018d05a248c5509c0d7e01c288b056c17c41930f61b9674f3\",\"moduleSequenceNumber\":216}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Array of all servers that don't need any ports opened to gain root access. These have 16 GB of RAM\\r\\nvar servers0Port = [\\\"n00dles\\\",\\r\\n                    \\\"sigma-cosmetics\\\",\\r\\n                    \\\"joesguns\\\",\\r\\n                    \\\"nectar-net\\\",\\r\\n                    \\\"hong-fang-tea\\\",\\r\\n                    \\\"harakiri-sushi\\\"];\\r\\n\\r\\n// Array of all servers that only need 1 port opened to gain root access. These have 32 GB of RAM\\r\\nvar servers1Port = [\\\"neo-net\\\",\\r\\n                    \\\"zer0\\\",\\r\\n                    \\\"max-hardware\\\",\\r\\n                    \\\"iron-gym\\\"];\\r\\n\\r\\n// Copy our scripts onto each server that requires 0 ports to gain root access. Then use nuke() to gain admin access and run the scripts.\\r\\nfor (var i = 0; i < servers0Port.length; ++i) {\\r\\n    var serv = servers0Port[i];\\r\\n\\r\\n    scp(\\\"/postAug/early-hack.script\\\", serv);\\r\\n    nuke(serv);\\r\\n    exec(\\\"/postAug/early-hack.script\\\", serv, 6);\\r\\n}\\r\\n\\r\\n// Setup purchase of 8GB servers to fill out avaliable servers. These also run the early-hack script.\\r\\nexec(\\\"purchase-8gb.script\\\", \\\"home\\\", 1);\\r\\n\\r\\n// Wait until we acquire the \\\"BruteSSH.exe\\\" program\\r\\nwhile (!fileExists(\\\"BruteSSH.exe\\\")) {\\r\\n    sleep(60000);\\r\\n}\\r\\n\\r\\n// Copy our scripts onto each server that requires 1 port to gain root access. Then use brutessh() and nuke() to gain admin access and run the scripts.\\r\\nfor (var i = 0; i < servers1Port.length; ++i) {\\r\\n    var serv = servers1Port[i];\\r\\n\\r\\n    scp(\\\"/postAug/early-hack.script\\\", serv);\\r\\n    brutessh(serv);\\r\\n    nuke(serv);\\r\\n    exec(\\\"/postAug/early-hack.script\\\", serv, 12);\\r\\n}\",\"filename\":\"/old/postAug/postAug.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.7,\"server\":\"home\",\"_hash\":\"cd12014c024ca1ee66dfc4e44a77b333fd298edf51229ca0cd4530ea50149431\",\"moduleSequenceNumber\":217}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// How much RAM each purchased server will have. In this case, it'll be 8GB.\\r\\nvar ram = 8;\\r\\n\\r\\n// Iterator we'll use for our loop\\r\\nvar i = 0;\\r\\n\\r\\n// Continuously try to purchase servers until we've reached the maximum amount of servers\\r\\nwhile (i < getPurchasedServerLimit()) {\\r\\n    // Check if we have enough money to purchase a server\\r\\n    if (getServerMoneyAvailable(\\\"home\\\") > getPurchasedServerCost(ram)) {\\r\\n        // If we have enough money, then:\\r\\n        //  1. Purchase the server\\r\\n        //  2. Copy our hacking script onto the newly-purchased server\\r\\n        //  3. Run our hacking script on the newly-purchased server with 3 threads\\r\\n        //  4. Increment our iterator to indicate that we've bought a new server\\r\\n        var hostname = purchaseServer(\\\"pserv-\\\" + i, ram);\\r\\n        scp(\\\"/postAug/early-hack.script\\\", hostname);\\r\\n        exec(\\\"/postAug/early-hack.script\\\", hostname, 3);\\r\\n        ++i;\\r\\n    }\\r\\n}\",\"filename\":\"/old/postAug/purchase-8gb.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.15,\"server\":\"home\",\"_hash\":\"3e3568a4692b5e137d3b7931994b26c9e2b832763e21a26f9146fe33e17de9de\",\"moduleSequenceNumber\":218}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n// Creates a global variable for who's being targeted to allow for updated targeting after upgrades are aquired.\\nexport async function main(ns) {\\n\\tvar targetHack = \\\"harakiri-sushi\\\";\\n\\tvar scriptHack = \\\"/hack/start-hack.ns\\\";\\n\\n\\t// Array of all servers that don't need any ports opened to gain root access. These have 16 GB of RAM\\n\\tvar servers0Port = [\\\"foodnstuff\\\",\\n\\t\\t\\t\\t\\t\\t\\\"sigma-cosmetics\\\",\\n\\t\\t\\t\\t\\t\\t\\\"joesguns\\\",\\n\\t\\t\\t\\t\\t\\t\\\"nectar-net\\\",\\n\\t\\t\\t\\t\\t\\t\\\"hong-fang-tea\\\",\\n\\t\\t\\t\\t\\t\\t\\\"harakiri-sushi\\\"];\\n\\n\\t// Array of all servers that only need 1 port opened to gain root access. These have 32 GB of RAM\\n\\tvar servers1Port = [\\\"neo-net\\\",\\n\\t\\t\\t\\t\\t\\t\\\"zer0\\\",\\n\\t\\t\\t\\t\\t\\t\\\"max-hardware\\\",\\n\\t\\t\\t\\t\\t\\t\\\"iron-gym\\\"];\\n\\n\\tns.exec(scriptHack, \\\"home\\\", 12, targetHack);\\n\\n\\t// Copy our scripts onto each server that requires 0 ports to gain root access. Then use nuke() to gain admin access and run the scripts.\\n\\tfor (var i = 0; i < servers0Port.length; ++i) {\\n\\t\\tvar serv = servers0Port[i];\\n\\n\\t\\tawait ns.scp(scriptHack, serv);\\n\\t\\tns.nuke(serv);\\n\\t\\tns.exec(scriptHack, serv, 6, targetHack);\\n\\t}\\n\\tns.toast(\\\"All 0 Port Servers Hacked\\\");\\n\\n\\t// Setup purchase of 8GB servers to fill out avaliable servers.\\n\\tns.exec(\\\"/serv/pserv.ns\\\", \\\"home\\\", 1, 8);\\n\\n\\t// Wait until we acquire the \\\"BruteSSH.exe\\\" program\\n\\twhile (!ns.fileExists(\\\"BruteSSH.exe\\\")) {\\n\\t\\tns.toast(\\\"Waiting on BruteSSH.exe\\\");\\n\\t\\tawait ns.sleep(6000000);\\n\\t}\\n\\n\\t// Copy our scripts onto each server that requires 1 port to gain root access. Then use brutessh() and nuke() to gain admin access and run the scripts.\\n\\tfor (var i = 0; i < servers1Port.length; ++i) {\\n\\t\\tvar serv = servers1Port[i];\\n\\n\\t\\tawait ns.scp(scriptHack, serv);\\n\\t\\tns.brutessh(serv);\\n\\t\\tns.nuke(serv);\\n\\t\\tns.exec(scriptHack, serv, 12, targetHack);\\n\\t}\\n\\tns.toast(\\\"All 1 Port Servers Hacked\\\");\\n}\",\"filename\":\"/old/postAug/setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.7,\"server\":\"home\",\"_hash\":\"5b5eb7b16db7806af5ae9e20f7bb0d277dc4c27ea6a4b8dd4f68583f3ec5f279\",\"moduleSequenceNumber\":219}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t// Will puchase servers up to the limit with the requested RAM value\\n\\tvar ram = ns.args[0];\\n\\tvar i = 0;\\n\\t\\n\\tvar targetHack = \\\"harakiri-sushi\\\";\\n\\tvar scriptHack = \\\"/hack/start-hack.ns\\\";\\n\\n\\tns.tprint(\\\"Per-Server Cost Estimate: \\\" + ns.getPurchasedServerCost(ram));\\n\\n\\twhile (i < ns.getPurchasedServerLimit()) {\\n\\t\\tif (ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tvar hostname = ns.purchaseServer(\\\"pserv-\\\" + i, ram);\\n\\t\\t\\tawait ns.scp(scriptHack, hostname);\\n\\t\\t\\tns.exec(scriptHack, hostname, 3, targetHack);\\n            i++;\\n\\t\\t\\tns.toast(hostname + \\\" Purchased!\\\");\\n\\t\\t}\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n\\n\\tns.toast(\\\"Purchased Servers at Limit\\\");\\n}\",\"filename\":\"/old/serv/pserv.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.15,\"server\":\"home\",\"_hash\":\"397ce68b9a449a83b85645fd155d365ae9f39fe68090bbf8e5f7f8e60f425b6c\",\"moduleSequenceNumber\":220}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar serv = ns.getPurchasedServers();\\n\\n\\t// Remove all the servers in the list after killing any scripts\\n\\tfor (var i = 0; i < serv.length; i++) {\\n\\t\\tns.killall(serv[i]);\\n\\t\\tns.deleteServer(serv[i]);\\n\\t}\\n\\tns.tprint(\\\"RSERV COMPLETE\\\");\\n}\",\"filename\":\"/old/serv/rserv.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.6,\"server\":\"home\",\"_hash\":\"2ff6e6cd5fc98038fb9ce1fbaaeae8e65846e68cde3b6c49efafa5d1f71aa7c7\",\"moduleSequenceNumber\":221}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {maxThreads} from \\\"/hack/tools/hack-lib.js\\\"\\n\\nexport function rServ(ns) {\\n\\t// This function iterates through all purchased servers and kill the scripts on them then deletes them\\n\\t// No arguments expected\\n\\t// Returns the number of purchased servers removed\\n\\n    // Get names for all existing purchased servers\\n\\tvar serv = ns.getPurchasedServers();\\n\\n\\t// Remove all the servers in the list after killing any scripts\\n\\tfor (var i = 0; i < serv.length; i++) {\\n\\t\\tns.killall(serv[i]);\\n\\t\\tns.deleteServer(serv[i]);\\n\\t}\\n\\n\\treturn i;\\n}\\n\\nexport async function pServ(ns, atRAM) {\\n\\t// This purchases a server at a given RAM value\\n\\t// One arguement expected, the ammount of RAM for the servers to be purchased at\\n\\t// Returns purchased server name if purchased, false if above server limit\\n\\n\\tif (ns.getPurchasedServerLimit() == 25) {\\n\\t\\treturn false;\\n\\t}\\n\\n\\tlet needPurchase = true;\\n\\twhile (needPurchase){\\n\\t\\tif (ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(atRAM)) {\\n\\t\\t\\tlet serverName = ns.purchaseServer(\\\"serv-\\\" + i, atRAM);\\n\\t\\t\\tneedPurchase = false;\\n\\t\\t}\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n\\n\\treturn serverName;\\n}\\n\\nexport async function uServ(ns, scriptArray, targetServer, argument) {\\n\\t// This function updates (or copies for the first time) the scripts that are passed to it in the array and executes the first one with the argument passed through\\n\\t// Two arguments expected, an array of all the scripts that needs to be copied, and where the scripts are going to be copied to, and the argument to run the first script with\\n\\t// Returns true if completed\\n\\n\\tfor (const s in scriptArray ) {\\n\\t\\tawait ns.scp(scriptArray[s], \\\"home\\\", targetServer);\\n\\t}\\n\\n\\tvar threads = maxThreads(ns, scriptArray[0], targetServer);\\n\\tawait ns.exec(scriptArray[0], targetServer, threads, argument);\\t\\n\\treturn true;\\n}\",\"filename\":\"/old/serv/serv-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":11.35,\"server\":\"home\",\"_hash\":\"777af0c86759bf74d0bbb4c11251e767bd0b2f19cb28247b1f1697a7e4e9364f\",\"moduleSequenceNumber\":222}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t// Will puchase servers up to the limit with the requested RAM value\\n\\tvar ram = 16;\\n\\tvar i = 0;\\n\\t\\n\\tvar targetHack = \\\"phantasy\\\";\\n\\tvar scriptHack = \\\"/hack/setup-hack.js\\\";\\n\\n\\tns.tprint(\\\"per Server Cost Estimate: \\\" + ns.getPurchasedServerCost(ram));\\n\\n\\twhile (i < ns.getPurchasedServerLimit()) {\\n\\t\\tif (ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tvar hostname = ns.purchaseServer(\\\"pserv-\\\" + i, ram);\\n\\t\\t\\tawait ns.scp(\\\"/hack/tools/hack-lib.js\\\", hostname);\\n\\t\\t\\tawait ns.scp(scriptHack, hostname);\\n\\t\\t\\tns.exec(scriptHack, hostname, 6, targetHack);\\n            i++;\\n\\t\\t\\tns.toast(hostname + \\\" Purchased!\\\");\\n\\t\\t}\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n\\n\\tns.toast(\\\"Purchased Servers at Limit\\\");\\n}\",\"filename\":\"/old/serv/start-pserv.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.15,\"server\":\"home\",\"_hash\":\"d8ca63394fe20b6e0b17002d3979b806eb1059d40282f9c7966c9db676114edd\",\"moduleSequenceNumber\":223}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {pServ, uServ} from \\\"/serv/tools/serv-lib.js\\\"\\n\\nexport async function main(ns) {\\t\\n\\tlet s = 0;\\n\\twhile (s < ns.getPurchasedServerLimit()) {\\n\\t\\tawait uServ(ns, [\\\"/hack/setup-hack.js\\\",\\\"/hack/tools/hack-lib.js\\\"], await pServ(ns, 16), \\\"phantasy\\\");\\n\\t\\ts++;\\n\\t}\\n}\",\"filename\":\"/old/serv/setup-serv.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":0,\"server\":\"home\",\"_hash\":\"fabbc0ede7551b958600a85817dac1e9c0d44f5f2b5b98382a6b6c414378e44b\",\"moduleSequenceNumber\":224}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\",\"filename\":\"/bin/test1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\",\"moduleSequenceNumber\":225}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) { await ns.hack(ns.args[0]) }\",\"filename\":\"/bin/host-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"home\",\"_hash\":\"1052225647a03802366f7025ca51646156e73e82e42d4739b49798d1aa6a8b37\",\"moduleSequenceNumber\":226}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) { await ns.grow(ns.args[0]) }\",\"filename\":\"/bin/host-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"home\",\"_hash\":\"e12cfb3f76a216b1845e41387d5c170e4bf737edd0e3c87618a2068985a980e1\",\"moduleSequenceNumber\":227}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) { await ns.weaken(ns.args[0]) }\",\"filename\":\"/bin/host-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"home\",\"_hash\":\"d1ac44ec1cf505a20c27b2d846cea5c4a5f863ad1ae4fd0484911edaf7c818c2\",\"moduleSequenceNumber\":228}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { NS } from '../../NetscriptDefinitions'\\r\\nexport async function main(ns : NS) {\\r\\n    ns.disableLog('sleep')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/self-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"e8caaf926dae601f31a0ddea9344741762b25e576dc350fea0e9f3204962dae7\",\"moduleSequenceNumber\":229}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n\\r\\n    let servers = ns.scan(\\\"home\\\")\\r\\n    let targets = []\\r\\n\\r\\n    for (let server of servers){\\r\\n        // filters scan of servers from home and adds them to targets\\r\\n        if (server != \\\"home\\\" && server != servers.includes(server) && server != \\\"darkweb\\\"){\\r\\n            targets.push(server)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // for debugging, logs the list of targets\\r\\n    ns.print(\\\"\\\\n\\\" + \\\"TARGETS ---- \\\\n\\\" + targets + \\\"\\\\n\\\\n\\\")\\r\\n    \\r\\n    for (let target of targets){\\r\\n        // run waitRoot to get root on the server (waitRoot loops until all port openers have been aquired)\\r\\n        if (ns.hasRootAccess(target) == false) {\\r\\n            ns.run(\\\"/bin/wait-root.js\\\", 1, target)\\r\\n\\r\\n            // for debugging, logs who we've run wiatRoot on\\r\\n            ns.print(\\\"\\\\n waitRoot:\\\" + target)\\r\\n        }\\r\\n\\r\\n        // copies self-hack and runs it as much as it can be on the target server, for debugging logs the self-hack target and it's returned PID\\r\\n        await ns.scp(\\\"/bin/self-hack.js\\\", \\\"home\\\", target)\\r\\n        let threads = Math.floor(ns.getServerMaxRam(target) - ns.getServerUsedRam(target)) / ns.getScriptRam(\\\"/bin/self-hack.js\\\", \\\"home\\\")\\r\\n        let PID = ns.exec(\\\"/bin/self-hack.js\\\", target, threads, target)\\r\\n        ns.print(\\\"\\\\n self-hack: \\\" + target +\\\" | t\\\" + threads + \\\" | PID: \\\" + PID)\\r\\n    }\\r\\n\\r\\n    // hook for build-hacknet\\r\\n//    ns.run(\\\"/scripts/build-hacknet.js\\\")\\r\\n\\r\\n    // hook for starting DAEMON\\r\\n//    ns.run(\\\"/scripts/DAEMON.js\\\")\\r\\n}\",\"filename\":\"/scripts/setup-stage1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/setup-stage1.js\",\"url\":\"blob:file:///bb3deb61-a553-4536-86e4-d40b3b321ca7\"}],\"ramUsage\":4.95,\"server\":\"home\",\"_hash\":\"486d1655f5b295284c07690e7221580c8e47cf15a0e0e6fdd628d168feb01639\",\"moduleSequenceNumber\":230}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('sleep')\\r\\n\\r\\n    while (ns.hacknet.numNodes() < 12) {\\r\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") > (ns.hacknet.getPurchaseNodeCost(1) * .75)){\\r\\n            ns.hacknet.purchaseNode(1)\\r\\n            ns.run(\\\"/bin/hacknet-upgrade.js\\\", 1, ns.hacknet.numNodes() - 1)\\r\\n        }\\r\\n        else {await ns.sleep(60000)}\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/build-hacknet.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/build-hacknet.js\",\"url\":\"blob:file:///d33613ff-b82b-48b6-b410-7cbc10173ff0\"}],\"ramUsage\":6.7,\"server\":\"home\",\"_hash\":\"a53dae3137612bae8c28948a58b5709f8821f9b4141c879ca1f4beecc5b9a34a\",\"moduleSequenceNumber\":256}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\nexport async function main(ns) {\\r\\n    ns.tprint(\\\"TODO - got to find a good solution for purchasing upgradse with the cheapest cost first\\\")\\r\\n    const n = ns.args[0]\\r\\n    ns.print(\\\"NODE: \\\" + n)\\r\\n\\r\\n    while (ns.hacknet.getNodeStats(n).cores != 16 || ns.hacknet.getNodeStats(n).ram != 64 || ns.hacknet.getNodeStats(n).level != 200){\\r\\n        ns.print(\\\"NODE STILL NEEDS UPGRADES\\\")\\r\\n        break\\r\\n    }\\r\\n}\",\"filename\":\"/bin/hacknet-upgrade.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hacknet-upgrade.js\",\"url\":\"blob:file:///fc198be3-17bb-4fe3-90c0-8c0f4e74bb8d\"}],\"ramUsage\":5.6,\"server\":\"home\",\"_hash\":\"aa61cc76c63120ac11d5559dd58c063b8ffb271d9b521f264a78569f2619d804\",\"moduleSequenceNumber\":265}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will generate money by hacking a target server.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else {\\r\\n            await ns.hack(hostname)\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/basic_hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"home\",\"_hash\":\"b0cacb28e68c860ccb8433ea3f99a6f15304d1f1cef1eca5e3e62b792002f7e3\",\"moduleSequenceNumber\":233}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function scan(ns, parent, server, list) {\\r\\n    const children = ns.scan(server)\\r\\n    for (let child of children) {\\r\\n        if (parent == child) {\\r\\n            continue\\r\\n        }\\r\\n        list.push(child)\\r\\n        \\r\\n        scan(ns, server, child, list)\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function list_servers(ns) {\\r\\n    const list = []\\r\\n    scan(ns, '', 'home', list)\\r\\n    return list\\r\\n}\\r\\n\\r\\nexport async function main(ns) {\\r\\n    const args = ns.flags([[\\\"help\\\", false]])\\r\\n    if (args.help) {\\r\\n        ns.tprint(\\\"This script helps you find an unsolved coding contract.\\\")\\r\\n        ns.tprint(`Usage: run ${ns.getScriptName()}`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()}`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    let servers = list_servers(ns)\\r\\n    const boughtServers = ns.getPurchasedServers(ns)\\r\\n    servers = servers.filter(s => !boughtServers.includes(s))\\r\\n    const hostname = servers.find(s => ns.ls(s).find(f => f.endsWith(\\\".cct\\\")))\\r\\n    if(!hostname) {\\r\\n        ns.tprint(\\\"No coding contract found.\\\")\\r\\n        return\\r\\n    }\\r\\n\\r\\n    ns.tprint(`Found coding contract on '${hostname}'.`)\\r\\n}\",\"filename\":\"/scripts/find_coding_contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":4.25,\"server\":\"home\",\"_hash\":\"63df5b1bd7607c7de7595766dc781c0b114b8bf526b5a1d477cde3db78e1ae93\",\"moduleSequenceNumber\":234}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function recursiveScan(ns, parent, server, target, route) {\\r\\n    const children = ns.scan(server)\\r\\n    for (let child of children) {\\r\\n        if (parent == child) {\\r\\n            continue\\r\\n        }\\r\\n        if (child == target) {\\r\\n            route.unshift(child)\\r\\n            route.unshift(server)\\r\\n            return true\\r\\n        }\\r\\n\\r\\n        if (recursiveScan(ns, server, child, target, route)) {\\r\\n            route.unshift(server)\\r\\n            return true\\r\\n        }\\r\\n    }\\r\\n    return false\\r\\n}\\r\\n\\r\\nexport async function main(ns) {\\r\\n    const args = ns.flags([[\\\"help\\\", false]])\\r\\n    let route = []\\r\\n    let server = args._[0]\\r\\n    if (!server || args.help) {\\r\\n        ns.tprint(\\\"This script helps you find a server on the network and shows you the path to get to it.\\\")\\r\\n        ns.tprint(`Usage: run ${ns.getScriptName()} SERVER`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    recursiveScan(ns, '', 'home', server, route)\\r\\n    for (const i in route) {\\r\\n        await ns.sleep(500)\\r\\n        const extra = i > 0 ? \\\"└ \\\" : \\\"\\\"\\r\\n        ns.tprint(`${\\\" \\\".repeat(i)}${extra}${route[i]}`)\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function autocomplete(data, args) {\\r\\n    return data.servers\\r\\n}\",\"filename\":\"/scripts/find_server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.8,\"server\":\"home\",\"_hash\":\"7157a97ac88639e46c4756157efe60bcaef4e7af29f93b2282d578a971d71622\",\"moduleSequenceNumber\":235}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('sleep')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/self-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/bin/self-hack.js\",\"url\":\"blob:file:///fbb827c9-078e-4f36-8581-ec55289a1d12\"}],\"ramUsage\":2.55,\"server\":\"home\",\"_hash\":\"ae62c7ddf6b59648255a03ee24448407777cfe3ea5d8e783a30036b6ea36125c\",\"moduleSequenceNumber\":236}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('sleep')\\r\\n    const target = ns.args[0]\\r\\n    let targetHack = ns.getServer(target)\\r\\n\\r\\n    while (targetHack.numOpenPortsRequired > targetHack.openPortCount) {\\r\\n        if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && targetHack.sshPortOpen == false)   {ns.brutessh(targetHack.hostname)}\\r\\n        if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && targetHack.ftpPortOpen == false)   {ns.ftpcrack(targetHack.hostname)}\\r\\n        if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && targetHack.smtpPortOpen == false) {ns.relaysmtp(targetHack.hostname)}\\r\\n        if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && targetHack.httpPortOpen == false)  {ns.httpworm(targetHack.hostname)}\\r\\n        if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && targetHack.sqlPortOpen == false)  {ns.sqlinject(targetHack.hostname)}\\r\\n        \\r\\n        ns.print(targetHack.hostname + \\\": \\\" + targetHack.openPortCount + \\\" / \\\" + targetHack.numOpenPortsRequired)\\r\\n        await ns.sleep(10e3)\\r\\n    }\\r\\n    ns.nuke(targetHack.hostname)\\r\\n}\",\"filename\":\"/bin/wait-root.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/wait-root.js\",\"url\":\"blob:file:///d133d7c2-1fb7-4d93-87e4-4b0c6a691fba\"}],\"ramUsage\":4,\"server\":\"home\",\"_hash\":\"f6e61a41084e8607a0a79733f79bde70a246eee273e5fc33f46cb015d1023d51\",\"moduleSequenceNumber\":654}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function scan(ns, parent, server, list) {\\r\\n    const children = ns.scan(server)\\r\\n    for (let child of children) {\\r\\n        if (parent == child) {\\r\\n            continue\\r\\n        }\\r\\n        list.push(child)\\r\\n        \\r\\n        scan(ns, server, child, list)\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function list_servers(ns) {\\r\\n    const list = []\\r\\n    scan(ns, '', 'home', list)\\r\\n    return list\\r\\n}\\r\\n\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const args = ns.flags([[\\\"help\\\", false]])\\r\\n    if (args.help) {\\r\\n        ns.tprint(\\\"This script lists all servers on which you can run scripts.\\\")\\r\\n        ns.tprint(`Usage: run ${ns.getScriptName()}`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()}`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    const servers = list_servers(ns).filter(s => ns.hasRootAccess(s)).concat(['home'])\\r\\n    for(const server of servers) {\\r\\n        const used = ns.getServerUsedRam(server)\\r\\n        const max = ns.getServerMaxRam(server)\\r\\n        ns.tprint(`${server} is opened. ${used} GB / ${max} GB (${(100*used/max).toFixed(2)}%)`)\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/EX_opened_servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.95,\"server\":\"home\",\"_hash\":\"4062ad76a68216defb5723bfb93034ebe58b30c2094640821db5ca5e19b35d79\",\"moduleSequenceNumber\":238}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function scan(ns, parent, server, list) {\\r\\n    const children = ns.scan(server)\\r\\n    for (let child of children) {\\r\\n        if (parent == child) {\\r\\n            continue\\r\\n        }\\r\\n        list.push(child)\\r\\n        \\r\\n        scan(ns, server, child, list)\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function list_servers(ns) {\\r\\n    const list = []\\r\\n    scan(ns, '', 'home', list)\\r\\n    return list\\r\\n}\\r\\n\\r\\nexport async function main(ns) {\\r\\n    const args = ns.flags([[\\\"help\\\", false]])\\r\\n    if (args.help) {\\r\\n        ns.tprint(\\\"This script helps you find an unsolved coding contract.\\\")\\r\\n        ns.tprint(`Usage: run ${ns.getScriptName()}`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()}`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    let servers = list_servers(ns)\\r\\n    const boughtServers = ns.getPurchasedServers(ns)\\r\\n    servers = servers.filter(s => !boughtServers.includes(s))\\r\\n    const hostname = servers.find(s => ns.ls(s).find(f => f.endsWith(\\\".cct\\\")))\\r\\n    if(!hostname) {\\r\\n        ns.tprint(\\\"No coding contract found.\\\")\\r\\n        return\\r\\n    }\\r\\n\\r\\n    ns.tprint(`Found coding contract on '${hostname}'.`)\\r\\n}\",\"filename\":\"/scripts/EX_find_coding_contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":4.25,\"server\":\"home\",\"_hash\":\"63df5b1bd7607c7de7595766dc781c0b114b8bf526b5a1d477cde3db78e1ae93\",\"moduleSequenceNumber\":239}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const args = ns.flags([[\\\"help\\\", false]])\\r\\n    if (args.help) {\\r\\n        ns.tprint(\\\"This script will enhance your HUD (Heads up Display) with custom statistics.\\\")\\r\\n        ns.tprint(`Usage: run ${ns.getScriptName()}`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()}`)\\r\\n        return\\r\\n    }\\r\\n    \\r\\n    const doc = document // This is expensive! (25GB RAM) Perhaps there's a way around it? ;)\\r\\n    const hook0 = doc.getElementById('overview-extra-hook-0')\\r\\n    const hook1 = doc.getElementById('overview-extra-hook-1')\\r\\n    while (true) {\\r\\n        try {\\r\\n            const headers = []\\r\\n            const values = []\\r\\n            // Add script income per second\\r\\n            headers.push(\\\"ScrInc\\\")\\r\\n            values.push(ns.getScriptIncome()[0].toPrecision(5) + '/sec')\\r\\n            // Add script exp gain rate per second\\r\\n            headers.push(\\\"ScrExp\\\")\\r\\n            values.push(ns.getScriptExpGain().toPrecision(5) + '/sec')\\r\\n            // TODO: Add more neat stuff\\r\\n\\r\\n            // Now drop it into the placeholder elements\\r\\n            hook0.innerText = headers.join(\\\" \\\\n\\\")\\r\\n            hook1.innerText = values.join(\\\"\\\\n\\\")\\r\\n        } catch (err) { // This might come in handy later\\r\\n            ns.print(\\\"ERROR: Update Skipped: \\\" + String(err))\\r\\n        }\\r\\n        await ns.sleep(1000)\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/EX_custom_stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":26.8,\"server\":\"home\",\"_hash\":\"2d8712883619b967dfbe973bc58befeb0d0520bb2cbe3dfd3f7e22960852658e\",\"moduleSequenceNumber\":240}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will generate money by hacking a target server.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else {\\r\\n            await ns.hack(hostname)\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/EX_basic_hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"home\",\"_hash\":\"b0cacb28e68c860ccb8433ea3f99a6f15304d1f1cef1eca5e3e62b792002f7e3\",\"moduleSequenceNumber\":241}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { NS } from '../../NetscriptDefinitions'\\r\\nexport async function main(ns : NS) {\\r\\n    const args = ns.flags([[\\\"help\\\", false]])\\r\\n    const server = ns.args[0]\\r\\n    if (args.help || !server) {\\r\\n        ns.tprint(\\\"This script does a more detailed analysis of a server.\\\")\\r\\n        ns.tprint(`Usage: run ${ns.getScriptName()} SERVER`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n    const ram = ns.getServerRam(server)\\r\\n    const money = ns.getServerMoneyAvailable(server)\\r\\n    const maxMoney = ns.getServerMaxMoney(server)\\r\\n    const minSec = ns.getServerMinSecurityLevel(server)\\r\\n    const sec = ns.getServerSecurityLevel(server)\\r\\n    ns.tprint(`\\r\\n\\r\\n${server}:\\r\\n    RAM        : ${ram[1]} / ${ram[0]} (${ram[1] / ram[0] * 100}%)\\r\\n    $          : ${ns.nFormat(money, \\\"$0.000a\\\")} / ${ns.nFormat(maxMoney, \\\"$0.000a\\\")} (${(money / maxMoney * 100).toFixed(2)}%)\\r\\n    security   : ${minSec.toFixed(2)} / ${sec.toFixed(2)}\\r\\n    growth     : ${ns.getServerGrowth(server)}\\r\\n    hack time  : ${ns.tFormat(ns.getHackTime(server))}\\r\\n    grow time  : ${ns.tFormat(ns.getGrowTime(server))}\\r\\n    weaken time: ${ns.tFormat(ns.getWeakenTime(server))}\\r\\n    grow x2    : ${(ns.growthAnalyze(server, 2)).toFixed(2)} threads\\r\\n    grow x3    : ${(ns.growthAnalyze(server, 3)).toFixed(2)} threads\\r\\n    grow x4    : ${(ns.growthAnalyze(server, 4)).toFixed(2)} threads\\r\\n    hack 10%   : ${(.10 / ns.hackAnalyze(server)).toFixed(2)} threads\\r\\n    hack 25%   : ${(.25 / ns.hackAnalyze(server)).toFixed(2)} threads\\r\\n    hack 50%   : ${(.50 / ns.hackAnalyze(server)).toFixed(2)} threads\\r\\n    hackChance : ${(ns.hackAnalyzeChance(server) * 100).toFixed(2)}%\\r\\n`)\\r\\n}\",\"filename\":\"/scripts/EX_analyze_server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":0,\"server\":\"home\",\"_hash\":\"e4c7c3c47c94f399b222b14271a8d28004054e8f8e7575747f502cc8491a5179\",\"moduleSequenceNumber\":242}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function recursiveScan(ns, parent, server, target, route) {\\r\\n    const children = ns.scan(server)\\r\\n    for (let child of children) {\\r\\n        if (parent == child) {\\r\\n            continue\\r\\n        }\\r\\n        if (child == target) {\\r\\n            route.unshift(child)\\r\\n            route.unshift(server)\\r\\n            return true\\r\\n        }\\r\\n\\r\\n        if (recursiveScan(ns, server, child, target, route)) {\\r\\n            route.unshift(server)\\r\\n            return true\\r\\n        }\\r\\n    }\\r\\n    return false\\r\\n}\\r\\n\\r\\nexport async function main(ns) {\\r\\n    const args = ns.flags([[\\\"help\\\", false]])\\r\\n    let route = []\\r\\n    let server = args._[0]\\r\\n    if (!server || args.help) {\\r\\n        ns.tprint(\\\"This script helps you find a server on the network and shows you the path to get to it.\\\")\\r\\n        ns.tprint(`Usage: run ${ns.getScriptName()} SERVER`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    recursiveScan(ns, '', 'home', server, route)\\r\\n    for (const i in route) {\\r\\n        await ns.sleep(500)\\r\\n        const extra = i > 0 ? \\\"└ \\\" : \\\"\\\"\\r\\n        ns.tprint(`${\\\" \\\".repeat(i)}${extra}${route[i]}`)\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function autocomplete(data, args) {\\r\\n    return data.servers\\r\\n}\",\"filename\":\"/scripts/EX_find_server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.8,\"server\":\"home\",\"_hash\":\"7157a97ac88639e46c4756157efe60bcaef4e7af29f93b2282d578a971d71622\",\"moduleSequenceNumber\":243}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        ['refreshrate', 200],\\r\\n        ['help', false],\\r\\n    ])\\r\\n    if (flags._.length === 0 || flags.help) {\\r\\n        ns.tprint(\\\"This script helps visualize the money and security of a server.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n    ns.tail()\\r\\n    ns.disableLog('ALL')\\r\\n    while (true) {\\r\\n        const server = flags._[0]\\r\\n        let money = ns.getServerMoneyAvailable(server)\\r\\n        if (money === 0) money = 1\\r\\n        const maxMoney = ns.getServerMaxMoney(server)\\r\\n        const minSec = ns.getServerMinSecurityLevel(server)\\r\\n        const sec = ns.getServerSecurityLevel(server)\\r\\n        ns.clearLog(server)\\r\\n        ns.print(`${server}:`)\\r\\n        ns.print(` $_______: ${ns.nFormat(money, \\\"$0.000a\\\")} / ${ns.nFormat(maxMoney, \\\"$0.000a\\\")} (${(money / maxMoney * 100).toFixed(2)}%)`)\\r\\n        ns.print(` security: +${(sec - minSec).toFixed(2)}`)\\r\\n        ns.print(` hack____: ${ns.tFormat(ns.getHackTime(server))} (t=${Math.ceil(ns.hackAnalyzeThreads(server, money))})`)\\r\\n        ns.print(` grow____: ${ns.tFormat(ns.getGrowTime(server))} (t=${Math.ceil(ns.growthAnalyze(server, maxMoney / money))})`)\\r\\n        ns.print(` weaken__: ${ns.tFormat(ns.getWeakenTime(server))} (t=${Math.ceil((sec - minSec) * 20)})`)\\r\\n        await ns.sleep(flags.refreshrate)\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function autocomplete(data, args) {\\r\\n    return data.servers\\r\\n}\",\"filename\":\"/scripts/EX_monitor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":4.15,\"server\":\"home\",\"_hash\":\"64f7c04e1ae9b3759c2824aa249f4faede8b16b2de54428c752addf0541c4d1e\",\"moduleSequenceNumber\":244}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL')\\r\\n    ns.print(\\\"RUNNING DEAMON ENGINE\\\")\\r\\n\\r\\n    const portOpeners = [\\\"BruteSSH.exe\\\", \\\"FTPCrack.exe\\\", \\\"relaySMTP.exe\\\", \\\"HTTPWorm.exe\\\", \\\"SQLInject.exe\\\"]\\r\\n\\r\\n    while (true) {\\r\\n        \\r\\n        // - if not joined factions at appropriate hack levels => popup\\r\\n        for (let f of ns.getPlayer().factions){\\r\\n            ns.print(\\\"FACTIONS JOINED: \\\" + f)\\r\\n        }\\r\\n        \\r\\n        // - if not bought port openers at appropriate money || hack levels => toast\\r\\n        for (let open of portOpeners){ \\r\\n            if (ns.fileExists(open, \\\"home\\\") == false) {\\r\\n                ns.print(\\\"REMINDER - BUY \\\" + open)\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // sleep to make loop work\\r\\n        await ns.sleep(600000)\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/DAEMON.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/DAEMON.js\",\"url\":\"blob:file:///019f537f-3636-48e3-b479-f9c520a86c17\"}],\"ramUsage\":2.2,\"server\":\"home\",\"_hash\":\"517f001436587d7c7716e5d3f9f99cf034467f4cc635d25044fea76949bf6c77\",\"moduleSequenceNumber\":245}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\",\"filename\":\"/scripts/test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\",\"moduleSequenceNumber\":246}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nimport { NS } from '../../NetscriptDefinitions'\\r\\nexport async function main(ns:NS) {\\r\\n    ns.print(\\\"TESTING\\\")\\r\\n\\r\\n    \\r\\n}\",\"filename\":\"/bin/testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"09b1fcd1f5c3055a7d47e43fffef941b7e550f881a5dbbe371cd58b4a73bb71d\",\"moduleSequenceNumber\":247}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"TODO.txt\",\"text\":\"setup / buyTools / \\r\\n\\r\\n==== Current Task\\r\\n\\tCurrent Aug Target > BitRunners starting with Neurolink / (done [Sector-12, Avernum, Tian, Voldhaven, Ishima , New Tokyo, Chongqing])\\r\\n\\r\\n\\r\\n==== Faction Backdoors\\r\\n\\r\\n\\tCyberSec - CSEC | req hack 56\\r\\n\\tNiteSec - avmnite-02h | req hack 214\\r\\n\\tTheBlackHand - I.I.I.I | req hack 353\\r\\n\\tBitRunners - run4theh111z (is more than 10 deep from home, the-hub then nova-med) | req hack 545\\r\\n\\r\\n\\r\\n==== port() list\\r\\n\\tport 1 - for listner / exec waitRoot for getting root on hostname\\r\\n\\tport 2 - for listner / exec builder against hostname\\r\\n\\tport 3 - for listner / sets up selfHack against hostname\\r\\n\\tport 4 - for listner / sets up managedHack against hostname\\r\\n\\tport 5 - to be implemented / takes RAM return from buildBotnet, determines when we're ready for new target and builds a new botnet targeting that one\\r\\n\\r\\n\\r\\n\\tport 20 - spider passes hostnames to this, supposed to build a list of servers \\r\\n\\r\\n\\r\\n==== todo\\r\\n* botnet works to build servers\\r\\n\\tneed to rework removal to get rid of servers only when needed\\r\\n\\tneed to get ports working \\r\\n\\tlistner set up to do managedHack (listner not working)\\r\\n\\r\\n$ refactor all scripts to handle starting from 'new game'\\r\\n\\tstage1 > no existing hacking tools, no port openers\\r\\n\\t\\t\\t\\tautomate bitnodes\\r\\n\\tstage2 > CashRoot aug for one port opener and 1m\\r\\n\\t\\t\\t\\tsetup purchased servers\\r\\n\\tstage3 > \\r\\n\\r\\n>\\tneed to set up new postAug script that works....\\r\\n\\tfigure out the number of threads needed to not hack a server into not having money....\\r\\n\\tstart purchased servers on hacking \\r\\n\\t\\tports Needed 0 - \\\"harakiri-sushi\\\"\\r\\n\\t\\tports Needed 1 - \\\"iron-gym\\\"\\r\\n\\t\\tports Needed 2 - \\\"phantasy\\\" \\r\\n\\t\\tports Needed 3 - \\\"rho-construction\\\"\\r\\n\\r\\n-\\tcoding contracts, run on .cct\\r\\n\\r\\n+\\tfigure out the number and levels for hacknet to make it worth it?\\r\\n\\r\\n__________SCRATCH__________\\r\\n\\r\\n---- SPIDER\\r\\n# spider [startFrom]\\r\\n\\tscan startFrom\\r\\n\\t\\tfor every name in the scan\\t\\r\\n\\t\\t\\tscan that name\\r\\n\\t\\t\\t\\tif there isn't a file already with that name\\r\\n\\t\\t\\t\\t\\tget the server details and write it to a file with that hostname in /targets/port0/ (a folder for every level of port that needs to be unblocked)\\r\\n\\r\\n * not working right, need to figure out the ports evidently\\r\\n\\r\\n---- LISTNER\\r\\n# home listner\\r\\n\\tlistens for hostname on port(1)\\r\\n\\t\\tif root on server and hostname != home or serv-[0-24] \\r\\n\\t\\t\\twrite hostname to port(2)\\r\\n\\t\\tif not root\\r\\n\\t\\t\\texec waitRoot\\r\\n\\tlistens for hostname on port(2)\\r\\n\\t\\tif host has RAM && Money > 0\\r\\n\\t\\t\\texec builder\\r\\n\\t\\t\\t\\t// this takes the server to the max money and lowest security\\r\\n\\tlistens for hostname on port(3)\\r\\n\\t\\tscp selfHack to hostname\\r\\n\\t\\texec for max threads\\r\\n\\tlistens for hostname on port(4)\\r\\n\\t\\tscp managedHack to hostname\\r\\n\\t\\texec managedHack on hostname\\r\\n\\r\\n---- HACKING\\r\\n# builder [targetServer]\\r\\n\\truns as many threads as possible of weaken, grow, weaken at targetServer\\r\\n\\twrites hostname to port(3) when done\\r\\n\\r\\n# finding servers example \\r\\n\\t/** @param {NS} ns */\\r\\n\\texport function getServers(ns) {\\r\\n    \\tconst servers = ['home'];\\r\\n    \\tfor (const server of servers)\\r\\n        \\tns.scan(server)\\r\\n            \\t.filter((x) => !servers.includes(x))\\r\\n            \\t.forEach((x) => servers.push(x));\\r\\n    \\treturn servers;\\r\\n\\t}\\r\\n\\r\\n\\t/** @param {NS} ns */\\r\\n\\texport function getRootedServers(ns) {\\r\\n    \\tfor (const server of getServers(ns).filter((x) => !ns.hasRootAccess(x) && !ns.getPurchasedServers().includes(x) && x != 'home')) {\\r\\n        \\tfor (const tool of [ns.brutessh, ns.ftpcrack, ns.relaysmtp, ns.httpworm, ns.sqlinject, ns.nuke]) {\\r\\n            \\ttry {\\r\\n                \\ttool(server);\\r\\n            \\t}\\r\\n            \\tcatch (e) { }\\r\\n       \\t\\t}\\r\\n    \\t}\\r\\n    \\treturn getServers(ns).filter((x) => ns.hasRootAccess(x));\\r\\n\\t}\\r\\n\\r\\n\\r\\n#\\thackManager\\r\\n\\r\\n\\twhile don't have formulas\\r\\n\\t\\tdo basic maxThread if loop wgh\\r\\n\\t\\r\\n\\tfigure out the needed threads for getting a server to lowestSec and maxMoney and the number of hacks to not nuke it\\r\\n\\t\\texec those as individual scripts to maxamize thread count\\r\\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/data/spider-results.txt\",\"text\":\"n00dles,0,4,1,1750000,3000 / foodnstuff,0,16,1,50000000,5 / sigma-cosmetics,0,16,5,57500000,10 / joesguns,0,16,10,62500000,20 / hong-fang-tea,0,16,30,75000000,20 / harakiri-sushi,0,16,40,100000000,40 / iron-gym,1,32,100,500000000,20 / darkweb,5,1,1,0,1 / pserv-0,5,16,1,0,1 / pserv-1,5,16,1,0,1 / pserv-2,5,16,1,0,1 / pserv-3,5,16,1,0,1 / pserv-4,5,16,1,0,1 / pserv-5,5,16,1,0,1 / pserv-6,5,16,1,0,1 / pserv-7,5,16,1,0,1 / pserv-8,5,16,1,0,1 / pserv-9,5,16,1,0,1 / pserv-10,5,16,1,0,1 / pserv-11,5,16,1,0,1 / pserv-12,5,16,1,0,1 / pserv-13,5,16,1,0,1 / pserv-14,5,16,1,0,1 / pserv-15,5,16,1,0,1 / pserv-16,5,16,1,0,1 / pserv-17,5,16,1,0,1 / pserv-18,5,16,1,0,1 / pserv-19,5,16,1,0,1 / pserv-20,5,16,1,0,1 / pserv-21,5,16,1,0,1 / pserv-22,5,16,1,0,1 / pserv-23,5,16,1,0,1 / pserv-24,5,16,1,0,1 / \"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/data/results-spider.txt\",\"text\":\"max-hardware / zer0 / CSEC / nectar-net / \"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/data/report/iron-gym.txt\",\"text\":\"hostname:iron-gym,maxRam:32,numOpenPortsRequired:1,requiredHackingSkill:100,minDifficulty:10,moneyAvaliable:20000000,moneyMax:500000000,serverGrowth:20\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"71.1.7.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":38438381023.5,\"moneyMax\":144143928838.125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1348,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"9.4.3.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":43801319955,\"moneyMax\":164254949831.25,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1149,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"72.1.1.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":11292349039.5,\"moneyMax\":42346308898.125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1145,\"serverGrowth\":73}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"78.7.1.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\",\"ecorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":29956271655.75,\"moneyMax\":112336018709.0625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":934,\"serverGrowth\":79}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"1.3.2.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"megacorp\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":25345280196,\"moneyMax\":95044800735,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1032,\"serverGrowth\":84}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"24.2.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":47,\"minDifficulty\":16,\"moneyAvailable\":17860211095.5,\"moneyMax\":66975791608.125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1154,\"serverGrowth\":45}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"85.1.1.8\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":10630881738,\"moneyMax\":39865806517.5,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":961,\"serverGrowth\":97}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"82.6.1.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":13118982889.5,\"moneyMax\":49196185835.625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1172,\"serverGrowth\":89}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"16.2.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"b-and-a\",\"blade\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":15938214134.25,\"moneyMax\":59768303003.4375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1000,\"serverGrowth\":94}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"16.9.9.1\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\",\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":1111239660.75,\"moneyMax\":4167148727.8125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1035,\"serverGrowth\":97}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"76.4.8.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":750000,\"moneyMax\":2812500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1504,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"92.1.9.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\",\"4sigma\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":758001621.75,\"moneyMax\":2842506081.5625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1057,\"serverGrowth\":92}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"63.8.1.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":676357557.75,\"moneyMax\":2536340841.5625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":963,\"serverGrowth\":64}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"82.4.7.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":620551948.5,\"moneyMax\":2327069806.875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":910,\"serverGrowth\":50}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"62.6.7.9\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":417421173.75,\"moneyMax\":1565329401.5625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":900,\"serverGrowth\":70}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"97.4.9.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":565701449.25,\"moneyMax\":2121380434.6875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":775,\"serverGrowth\":61}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"62.1.0.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":720363407.25,\"moneyMax\":2701362777.1875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":855,\"serverGrowth\":89}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"85.1.5.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"infocomm\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":835951870.5,\"moneyMax\":3134819514.375,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":843,\"serverGrowth\":85}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"49.4.9.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\",\"stormtech\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":648134216.25,\"moneyMax\":2430503310.9375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":823,\"serverGrowth\":79}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"61.0.0.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":418070907.75,\"moneyMax\":1567765904.0625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":827,\"serverGrowth\":74}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"56.8.1.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":657265006.5,\"moneyMax\":2464743774.375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":945,\"serverGrowth\":73}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"24.1.8.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":635506205.25,\"moneyMax\":2383148269.6875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":842,\"serverGrowth\":90}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"44.6.5.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":786478877.25,\"moneyMax\":2949295789.6875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":858,\"serverGrowth\":59}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"83.3.2.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":711680732.25,\"moneyMax\":2668802745.9375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":947,\"serverGrowth\":61}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"48.8.8.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"solaris\",\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":782968203,\"moneyMax\":2936130761.25,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":816,\"serverGrowth\":73}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"77.8.7.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":566499451.5,\"moneyMax\":2124372943.125,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":806,\"serverGrowth\":73}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"73.9.9.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":641009079,\"moneyMax\":2403784046.25,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":770,\"serverGrowth\":74}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"43.6.4.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\",\"icarus\",\"univ-energy\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":1185938312.25,\"moneyMax\":4447268670.9375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":855,\"serverGrowth\":55}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"88.7.8.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\",\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":1309596211.5,\"moneyMax\":4910985793.125,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":793,\"serverGrowth\":85}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"85.8.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\",\"titan-labs\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":844118589.75,\"moneyMax\":3165444711.5625,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":777,\"serverGrowth\":73}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"5.6.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":1064479314.75,\"moneyMax\":3991797430.3125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":807,\"serverGrowth\":76}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"10.6.0.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"snap-fitness\",\"defcomm\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":790385538.75,\"moneyMax\":2963945770.3125,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":804,\"serverGrowth\":76}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"35.7.4.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":568470920.25,\"moneyMax\":2131765950.9375,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":659,\"serverGrowth\":63}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"63.5.5.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-institute\",\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":467116203,\"moneyMax\":1751685761.25,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":516,\"serverGrowth\":41}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"97.2.0.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rothman-uni\",\"global-pharm\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":54,\"minDifficulty\":18,\"moneyAvailable\":528265760.25,\"moneyMax\":1980996600.9375,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":558,\"serverGrowth\":54}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"31.0.1.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"syscore\",\"galactic-cyber\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":210744269.25,\"moneyMax\":790291009.6875,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":416,\"serverGrowth\":39}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"63.8.5.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"netlink\",\"lexo-corp\",\"alpha-ent\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":134035705.5,\"moneyMax\":502633895.625,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":408,\"serverGrowth\":38}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"51.0.6.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"comptek\",\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":677139942.75,\"moneyMax\":2539274785.3125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":774,\"serverGrowth\":76}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"38.9.4.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":53,\"minDifficulty\":18,\"moneyAvailable\":250931352.75,\"moneyMax\":940992572.8125,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":425,\"serverGrowth\":51}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"6.8.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"netlink\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":367900442.25,\"moneyMax\":1379626658.4375,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":633,\"serverGrowth\":62}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"70.6.9.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":274677654,\"moneyMax\":1030041202.5,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":402,\"serverGrowth\":50}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"0.6.5.7\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":36,\"hackDifficulty\":36,\"minDifficulty\":12,\"moneyAvailable\":140198228.25,\"moneyMax\":525743355.9375,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":281,\"serverGrowth\":48}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"60.6.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\",\"zb-institute\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":165381634.5,\"moneyMax\":620181129.375,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":320,\"serverGrowth\":59}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-781749-Joe'sGuns.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[8,18],[3,8],[4,10],[4,8],[24,32],[23,31],[17,24],[22,29],[4,5],[24,25],[11,15],[15,25],[10,15],[20,25],[9,14],[8,12],[17,20],[24,30]],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"47.9.3.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"rothman-uni\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":206250000,\"moneyMax\":773437500,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":381,\"serverGrowth\":46}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"53.1.7.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":61758651.75,\"moneyMax\":231594944.0625,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":287,\"serverGrowth\":37}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"41.6.9.5\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":2.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[1316,7,15,21]},\"filename\":\"/bin/self-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":42.551611064999996,\"offlineMoneyMade\":0,\"offlineRunningTime\":30502.957,\"onlineExpGained\":57.58559999999994,\"onlineMoneyMade\":1316,\"onlineRunningTime\":3750.80999999878,\"pid\":3,\"ramUsage\":2.55,\"server\":\"n00dles\",\"threads\":1,\"dependencies\":[{\"filename\":\"/bin/self-hack.js\",\"url\":\"blob:file:///3bdc4da0-29b8-48c7-92dd-d420465be400\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('sleep')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/self-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/self-hack.js\",\"url\":\"blob:file:///1579c34d-49b8-44c7-90f1-ece3abc39491\"}],\"ramUsage\":2.55,\"server\":\"n00dles\",\"_hash\":\"ae62c7ddf6b59648255a03ee24448407777cfe3ea5d8e783a30036b6ea36125c\",\"moduleSequenceNumber\":257}}],\"serversOnNetwork\":[\"home\",\"nectar-net\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":196875,\"moneyMax\":196875,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"39.9.1.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":15.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,72,144]},\"filename\":\"/bin/self-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":428.26140396000005,\"offlineMoneyMade\":0,\"offlineRunningTime\":30502.959,\"onlineExpGained\":559.8720000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":3750.80999999878,\"pid\":4,\"ramUsage\":2.55,\"server\":\"foodnstuff\",\"threads\":6,\"dependencies\":[{\"filename\":\"/bin/self-hack.js\",\"url\":\"blob:file:///3bdc4da0-29b8-48c7-92dd-d420465be400\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('sleep')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/self-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/self-hack.js\",\"url\":\"blob:file:///1579c34d-49b8-44c7-90f1-ece3abc39491\"}],\"ramUsage\":2.55,\"server\":\"foodnstuff\",\"_hash\":\"ae62c7ddf6b59648255a03ee24448407777cfe3ea5d8e783a30036b6ea36125c\",\"moduleSequenceNumber\":258}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3.024,\"minDifficulty\":3,\"moneyAvailable\":1522118.7351785356,\"moneyMax\":5625000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"8.6.8.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":15.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,0,66,108]},\"filename\":\"/bin/self-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":230.60232468000012,\"offlineMoneyMade\":0,\"offlineRunningTime\":30502.963,\"onlineExpGained\":451.00800000000027,\"onlineMoneyMade\":0,\"onlineRunningTime\":3750.80999999878,\"pid\":5,\"ramUsage\":2.55,\"server\":\"sigma-cosmetics\",\"threads\":6,\"dependencies\":[{\"filename\":\"/bin/self-hack.js\",\"url\":\"blob:file:///3bdc4da0-29b8-48c7-92dd-d420465be400\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('sleep')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/self-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/self-hack.js\",\"url\":\"blob:file:///1579c34d-49b8-44c7-90f1-ece3abc39491\"}],\"ramUsage\":2.55,\"server\":\"sigma-cosmetics\",\"_hash\":\"ae62c7ddf6b59648255a03ee24448407777cfe3ea5d8e783a30036b6ea36125c\",\"moduleSequenceNumber\":259}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3,\"minDifficulty\":3,\"moneyAvailable\":1771832.0459573106,\"moneyMax\":6468750,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"72.6.3.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":15.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[0,0,30,90]},\"filename\":\"/bin/self-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":125.36714505,\"offlineMoneyMade\":0,\"offlineRunningTime\":30502.965,\"onlineExpGained\":394.56000000000006,\"onlineMoneyMade\":0,\"onlineRunningTime\":3750.80999999878,\"pid\":6,\"ramUsage\":2.55,\"server\":\"joesguns\",\"threads\":6,\"dependencies\":[{\"filename\":\"/bin/self-hack.js\",\"url\":\"blob:file:///3bdc4da0-29b8-48c7-92dd-d420465be400\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('sleep')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/self-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/self-hack.js\",\"url\":\"blob:file:///1579c34d-49b8-44c7-90f1-ece3abc39491\"}],\"ramUsage\":2.55,\"server\":\"joesguns\",\"_hash\":\"ae62c7ddf6b59648255a03ee24448407777cfe3ea5d8e783a30036b6ea36125c\",\"moduleSequenceNumber\":260}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5.024,\"minDifficulty\":5,\"moneyAvailable\":1921184.5981767084,\"moneyMax\":7031250,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"14.1.1.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"sigma-cosmetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5625000,\"moneyMax\":21093750,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"50.9.3.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"n00dles\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2062500,\"moneyMax\":7734375,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"74.2.3.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"CSEC\",\"netlink\",\"crush-fitness\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":3750000,\"moneyMax\":14062500,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"12.1.3.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nectar-net\",\"comptek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":33750000,\"moneyMax\":126562500,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"75.0.7.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":15.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,0,36]},\"filename\":\"/bin/self-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":30502.966999999997,\"onlineExpGained\":118.36799999999998,\"onlineMoneyMade\":0,\"onlineRunningTime\":3750.80999999878,\"pid\":7,\"ramUsage\":2.55,\"server\":\"hong-fang-tea\",\"threads\":6,\"dependencies\":[{\"filename\":\"/bin/self-hack.js\",\"url\":\"blob:file:///3bdc4da0-29b8-48c7-92dd-d420465be400\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('sleep')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/self-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/self-hack.js\",\"url\":\"blob:file:///1579c34d-49b8-44c7-90f1-ece3abc39491\"}],\"ramUsage\":2.55,\"server\":\"hong-fang-tea\",\"_hash\":\"ae62c7ddf6b59648255a03ee24448407777cfe3ea5d8e783a30036b6ea36125c\",\"moduleSequenceNumber\":261}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":13.199999999999996,\"minDifficulty\":5,\"moneyAvailable\":2250000,\"moneyMax\":8437500,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"20.9.6.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":15.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[0,0,0,30]},\"filename\":\"/bin/self-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":30502.968999999997,\"onlineExpGained\":98.63999999999999,\"onlineMoneyMade\":0,\"onlineRunningTime\":3750.80999999878,\"pid\":8,\"ramUsage\":2.55,\"server\":\"harakiri-sushi\",\"threads\":6,\"dependencies\":[{\"filename\":\"/bin/self-hack.js\",\"url\":\"blob:file:///3bdc4da0-29b8-48c7-92dd-d420465be400\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('sleep')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/self-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/self-hack.js\",\"url\":\"blob:file:///1579c34d-49b8-44c7-90f1-ece3abc39491\"}],\"ramUsage\":2.55,\"server\":\"harakiri-sushi\",\"_hash\":\"ae62c7ddf6b59648255a03ee24448407777cfe3ea5d8e783a30036b6ea36125c\",\"moduleSequenceNumber\":262}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":13.499999999999996,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":11250000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"59.3.3.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"CSEC\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":18000000,\"moneyMax\":67500000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"99.1.2.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"harakiri-sushi\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":7500000,\"moneyMax\":28125000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"86.5.3.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"CSEC\",\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":28,\"hackDifficulty\":28,\"minDifficulty\":9,\"moneyAvailable\":48099588.75,\"moneyMax\":180373457.8125,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":215,\"serverGrowth\":36}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"41.5.0.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":38,\"hackDifficulty\":38,\"minDifficulty\":13,\"moneyAvailable\":35086111.5,\"moneyMax\":131572918.125,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":254,\"serverGrowth\":31}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"94.7.0.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":30.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"/bin/self-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":123.81000000000122,\"pid\":17,\"ramUsage\":2.55,\"server\":\"iron-gym\",\"threads\":12,\"dependencies\":[{\"filename\":\"/bin/self-hack.js\",\"url\":\"blob:file:///1579c34d-49b8-44c7-90f1-ece3abc39491\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\n//import { NS } from '../../NetscriptDefinitions'\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('sleep')\\r\\n\\r\\n    const args = ns.flags([['help', false]])\\r\\n    const hostname = args._[0]\\r\\n    \\r\\n    if(args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will weaken, grow, hack in an if loop generate money by hacking the server passed to it.\\\")\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`)\\r\\n        ns.tprint(\\\"Example:\\\")\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\r\\n        return\\r\\n    }\\r\\n\\r\\n    while (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(hostname)){ \\r\\n        await ns.sleep(60e3)\\r\\n        ns.print(\\\"hack level:\\\" + ns.getHackingLevel() + \\\" / \\\" + ns.getServerRequiredHackingLevel(hostname))\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname)\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname)\\r\\n        } else { await ns.hack(hostname) }\\r\\n        await ns.sleep(0)\\r\\n    }\\r\\n}\",\"filename\":\"/bin/self-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/self-hack.js\",\"url\":\"blob:file:///1579c34d-49b8-44c7-90f1-ece3abc39491\"}],\"ramUsage\":2.55,\"server\":\"iron-gym\",\"_hash\":\"ae62c7ddf6b59648255a03ee24448407777cfe3ea5d8e783a30036b6ea36125c\",\"moduleSequenceNumber\":655}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":15000000,\"moneyMax\":56250000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"63.9.6.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":48,\"minDifficulty\":16,\"moneyAvailable\":187500000,\"moneyMax\":703125000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":485,\"serverGrowth\":45}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"80.1.6.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":675000000,\"moneyMax\":2531250000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1001,\"serverGrowth\":52}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"91.4.4.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":43,\"hackDifficulty\":43,\"minDifficulty\":14,\"moneyAvailable\":337500000,\"moneyMax\":1265625000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":765,\"serverGrowth\":58}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"55.9.6.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":512,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"1.7.4.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"comptek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":352,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"21.4.3.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":206,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"95.6.8.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\",\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":522,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"39.2.8.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"n00dles\",\"neo-net\",\"phantasy\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":56,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"70.6.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"70.7.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":9000,\"serverGrowth\":0}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":172.32307692307694,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":0.1933333333333333}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{\"own\":\"run /hack/own.js\",\"drain\":\"run /hack/drain.js -t 256\",\"buyTools\":\"buy BruteSSH.exe; buy FTPCrack.exe; buy relaySMTP.exe; buy HTTPWorm.exe; buy SQLInject.exe; buy ServerProfiler.exe; buy DeepscanV1.exe; buy DeepscanV2.exe; buy AutoLink.exe\"}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":false}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":false}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":false}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":20,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":600,\"CodeInstructionRunTime\":10,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":100,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":2,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":true,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":true,\"MonacoTheme\":\"vs-dark\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"theme\":{\"primarylight\":\"#FFFFFF\",\"primary\":\"#C3C7CC\",\"primarydark\":\"#72767D\",\"successlight\":\"#858C23\",\"success\":\"#59731F\",\"successdark\":\"#2F5B1C\",\"errorlight\":\"#FF5258\",\"error\":\"#ED4245\",\"errordark\":\"#E12B31\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#FFBA52\",\"warning\":\"#EAA741\",\"warningdark\":\"#D59022\",\"infolight\":\"#99A1F7\",\"info\":\"#848DED\",\"infodark\":\"#6A75E8\",\"welllight\":\"#202225\",\"well\":\"#36393F\",\"white\":\"#fff\",\"black\":\"#202225\",\"hp\":\"#ED4245\",\"money\":\"#F1C40F\",\"hack\":\"#2ECC71\",\"combat\":\"#faffdf\",\"cha\":\"#9B59B6\",\"int\":\"#5865F2\",\"rep\":\"#faffdf\",\"disabled\":\"#1ABC9C\",\"backgroundprimary\":\"#36393F\",\"backgroundsecondary\":\"#2F3136\",\"button\":\"#2F3136\"}}","VersionSave":"7","AllGangsSave":"","LastExportBonus":"1640979314162","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}